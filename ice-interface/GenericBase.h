// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `GenericBase.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __GenericBase_h__
#define __GenericBase_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompGenericBase
{

class GenericBase;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompGenericBase::GenericBase>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompGenericBase::GenericBase*);

}

}

namespace RoboCompGenericBase
{

class GenericBase;
::Ice::Object* upCast(::RoboCompGenericBase::GenericBase*);
typedef ::IceInternal::Handle< ::RoboCompGenericBase::GenericBase> GenericBasePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompGenericBase::GenericBase> GenericBasePrx;
void __patch(GenericBasePtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompGenericBase
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    explicit HardwareFailedException(const ::std::string&);
    virtual ~HardwareFailedException() throw();

    virtual ::std::string ice_name() const;
    virtual HardwareFailedException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

static HardwareFailedException __HardwareFailedException_init;

struct TBaseState
{
    bool isMoving;
    ::Ice::Float x;
    ::Ice::Float z;
    ::Ice::Float alpha;
    ::Ice::Float correctedX;
    ::Ice::Float correctedZ;
    ::Ice::Float correctedAlpha;
    ::Ice::Float advVx;
    ::Ice::Float advVz;
    ::Ice::Float rotV;

    bool operator==(const TBaseState& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(isMoving != __rhs.isMoving)
        {
            return false;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(z != __rhs.z)
        {
            return false;
        }
        if(alpha != __rhs.alpha)
        {
            return false;
        }
        if(correctedX != __rhs.correctedX)
        {
            return false;
        }
        if(correctedZ != __rhs.correctedZ)
        {
            return false;
        }
        if(correctedAlpha != __rhs.correctedAlpha)
        {
            return false;
        }
        if(advVx != __rhs.advVx)
        {
            return false;
        }
        if(advVz != __rhs.advVz)
        {
            return false;
        }
        if(rotV != __rhs.rotV)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TBaseState& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(isMoving < __rhs.isMoving)
        {
            return true;
        }
        else if(__rhs.isMoving < isMoving)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(z < __rhs.z)
        {
            return true;
        }
        else if(__rhs.z < z)
        {
            return false;
        }
        if(alpha < __rhs.alpha)
        {
            return true;
        }
        else if(__rhs.alpha < alpha)
        {
            return false;
        }
        if(correctedX < __rhs.correctedX)
        {
            return true;
        }
        else if(__rhs.correctedX < correctedX)
        {
            return false;
        }
        if(correctedZ < __rhs.correctedZ)
        {
            return true;
        }
        else if(__rhs.correctedZ < correctedZ)
        {
            return false;
        }
        if(correctedAlpha < __rhs.correctedAlpha)
        {
            return true;
        }
        else if(__rhs.correctedAlpha < correctedAlpha)
        {
            return false;
        }
        if(advVx < __rhs.advVx)
        {
            return true;
        }
        else if(__rhs.advVx < advVx)
        {
            return false;
        }
        if(advVz < __rhs.advVz)
        {
            return true;
        }
        else if(__rhs.advVz < advVz)
        {
            return false;
        }
        if(rotV < __rhs.rotV)
        {
            return true;
        }
        else if(__rhs.rotV < rotV)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TBaseState& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TBaseState& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TBaseState& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TBaseState& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompGenericBase::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompGenericBase::TBaseState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 37;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompGenericBase::TBaseState, S>
{
    static void write(S* __os, const ::RoboCompGenericBase::TBaseState& v)
    {
        __os->write(v.isMoving);
        __os->write(v.x);
        __os->write(v.z);
        __os->write(v.alpha);
        __os->write(v.correctedX);
        __os->write(v.correctedZ);
        __os->write(v.correctedAlpha);
        __os->write(v.advVx);
        __os->write(v.advVz);
        __os->write(v.rotV);
    }
};

template<class S>
struct StreamReader< ::RoboCompGenericBase::TBaseState, S>
{
    static void read(S* __is, ::RoboCompGenericBase::TBaseState& v)
    {
        __is->read(v.isMoving);
        __is->read(v.x);
        __is->read(v.z);
        __is->read(v.alpha);
        __is->read(v.correctedX);
        __is->read(v.correctedZ);
        __is->read(v.correctedAlpha);
        __is->read(v.advVx);
        __is->read(v.advVz);
        __is->read(v.rotV);
    }
};

}

namespace RoboCompGenericBase
{

class Callback_GenericBase_getBaseState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GenericBase_getBaseState_Base> Callback_GenericBase_getBaseStatePtr;

class Callback_GenericBase_getBasePose_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GenericBase_getBasePose_Base> Callback_GenericBase_getBasePosePtr;

}

namespace IceProxy
{

namespace RoboCompGenericBase
{

class GenericBase : virtual public ::IceProxy::Ice::Object
{
public:

    void getBaseState(::RoboCompGenericBase::TBaseState& __p_state)
    {
        getBaseState(__p_state, 0);
    }
    void getBaseState(::RoboCompGenericBase::TBaseState& __p_state, const ::Ice::Context& __ctx)
    {
        getBaseState(__p_state, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBaseState(const ::IceInternal::Function<void (const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBaseState(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBaseState(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBaseState(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBaseState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBaseState(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBaseState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBaseState(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBaseState(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBaseState()
    {
        return begin_getBaseState(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context& __ctx)
    {
        return begin_getBaseState(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBaseState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBaseState(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::RoboCompGenericBase::Callback_GenericBase_getBaseStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBaseState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context& __ctx, const ::RoboCompGenericBase::Callback_GenericBase_getBaseStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBaseState(&__ctx, __del, __cookie);
    }

    void end_getBaseState(::RoboCompGenericBase::TBaseState& __p_state, const ::Ice::AsyncResultPtr&);
    
private:

    void getBaseState(::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getBasePose(::Ice::Int& __p_x, ::Ice::Int& __p_z, ::Ice::Float& __p_alpha)
    {
        getBasePose(__p_x, __p_z, __p_alpha, 0);
    }
    void getBasePose(::Ice::Int& __p_x, ::Ice::Int& __p_z, ::Ice::Float& __p_alpha, const ::Ice::Context& __ctx)
    {
        getBasePose(__p_x, __p_z, __p_alpha, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBasePose(const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int, ::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBasePose(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBasePose(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBasePose(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBasePose(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int, ::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBasePose(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBasePose(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBasePose(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBasePose(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int, ::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBasePose()
    {
        return begin_getBasePose(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context& __ctx)
    {
        return begin_getBasePose(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBasePose(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBasePose(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::RoboCompGenericBase::Callback_GenericBase_getBasePosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBasePose(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context& __ctx, const ::RoboCompGenericBase::Callback_GenericBase_getBasePosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBasePose(&__ctx, __del, __cookie);
    }

    void end_getBasePose(::Ice::Int& __p_x, ::Ice::Int& __p_z, ::Ice::Float& __p_alpha, const ::Ice::AsyncResultPtr&);
    
private:

    void getBasePose(::Ice::Int&, ::Ice::Int&, ::Ice::Float&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<GenericBase> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_secure(bool __secure) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_twoway() const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_oneway() const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_batchOneway() const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_datagram() const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_batchDatagram() const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_compress(bool __compress) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_timeout(int __timeout) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GenericBase> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<GenericBase*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace RoboCompGenericBase
{

class GenericBase : virtual public ::Ice::Object
{
public:

    typedef GenericBasePrx ProxyType;
    typedef GenericBasePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void getBaseState(::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBaseState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getBasePose(::Ice::Int&, ::Ice::Int&, ::Ice::Float&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBasePose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const GenericBase& l, const GenericBase& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const GenericBase& l, const GenericBase& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompGenericBase
{

template<class T>
class CallbackNC_GenericBase_getBaseState : public Callback_GenericBase_getBaseState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_GenericBase_getBaseState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompGenericBase::GenericBasePrx __proxy = ::RoboCompGenericBase::GenericBasePrx::uncheckedCast(__result->getProxy());
        ::RoboCompGenericBase::TBaseState state;
        try
        {
            __proxy->end_getBaseState(state, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(state);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_GenericBase_getBaseStatePtr
newCallback_GenericBase_getBaseState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GenericBase_getBaseState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GenericBase_getBaseStatePtr
newCallback_GenericBase_getBaseState(T* instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GenericBase_getBaseState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GenericBase_getBaseState : public Callback_GenericBase_getBaseState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_GenericBase_getBaseState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompGenericBase::GenericBasePrx __proxy = ::RoboCompGenericBase::GenericBasePrx::uncheckedCast(__result->getProxy());
        ::RoboCompGenericBase::TBaseState state;
        try
        {
            __proxy->end_getBaseState(state, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(state, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_GenericBase_getBaseStatePtr
newCallback_GenericBase_getBaseState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GenericBase_getBaseState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GenericBase_getBaseStatePtr
newCallback_GenericBase_getBaseState(T* instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GenericBase_getBaseState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GenericBase_getBasePose : public Callback_GenericBase_getBasePose_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, ::Ice::Float);

    CallbackNC_GenericBase_getBasePose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompGenericBase::GenericBasePrx __proxy = ::RoboCompGenericBase::GenericBasePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int x;
        ::Ice::Int z;
        ::Ice::Float alpha;
        try
        {
            __proxy->end_getBasePose(x, z, alpha, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(x, z, alpha);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_GenericBase_getBasePosePtr
newCallback_GenericBase_getBasePose(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GenericBase_getBasePose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GenericBase_getBasePosePtr
newCallback_GenericBase_getBasePose(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GenericBase_getBasePose<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GenericBase_getBasePose : public Callback_GenericBase_getBasePose_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, ::Ice::Float, const CT&);

    Callback_GenericBase_getBasePose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompGenericBase::GenericBasePrx __proxy = ::RoboCompGenericBase::GenericBasePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int x;
        ::Ice::Int z;
        ::Ice::Float alpha;
        try
        {
            __proxy->end_getBasePose(x, z, alpha, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(x, z, alpha, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_GenericBase_getBasePosePtr
newCallback_GenericBase_getBasePose(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GenericBase_getBasePose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GenericBase_getBasePosePtr
newCallback_GenericBase_getBasePose(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GenericBase_getBasePose<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
