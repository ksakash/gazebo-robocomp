// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Laser.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Laser_h__
#define __Laser_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include "GenericBase.h"
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompLaser
{

class Laser;
class LaserPrx;

}

namespace RoboCompLaser
{

using shortVector = ::std::vector<int>;

struct LaserConfData
{
    int staticConf;
    int maxMeasures;
    int maxDegrees;
    int maxRange;
    int minRange;
    int iniRange;
    int endRange;
    int cluster;
    int sampleRate;
    float angleRes;
    float angleIni;
    ::std::string driver;
    ::std::string device;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const float&, const float&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(staticConf, maxMeasures, maxDegrees, maxRange, minRange, iniRange, endRange, cluster, sampleRate, angleRes, angleIni, driver, device);
    }
};

struct TData
{
    float angle;
    float dist;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const float&, const float&> ice_tuple() const
    {
        return std::tie(angle, dist);
    }
};

using TLaserData = ::std::vector<TData>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompLaser
{

class Laser : public virtual ::Ice::Object
{
public:

    using ProxyType = LaserPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TLaserData getLaserData(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getLaserData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /**
     * Encapsulates the results of a call to getLaserAndBStateData.
     */
    struct GetLaserAndBStateDataResult
    {
        TLaserData returnValue;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual TLaserData getLaserAndBStateData(::RoboCompGenericBase::TBaseState& bState, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getLaserAndBStateData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual LaserConfData getLaserConfData(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getLaserConfData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompLaser
{

class LaserPrx : public virtual ::Ice::Proxy<LaserPrx, ::Ice::ObjectPrx>
{
public:

    TLaserData getLaserData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<TLaserData>(true, this, &LaserPrx::_iceI_getLaserData, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getLaserDataAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<TLaserData>>().get_future())
    {
        return _makePromiseOutgoing<TLaserData, P>(false, this, &LaserPrx::_iceI_getLaserData, context);
    }

    ::std::function<void()>
    getLaserDataAsync(::std::function<void(TLaserData)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<TLaserData>(response, ex, sent, this, &LaserPrx::_iceI_getLaserData, context);
    }

    /// \cond INTERNAL
    void _iceI_getLaserData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<TLaserData>>&, const ::Ice::Context&);
    /// \endcond

    TLaserData getLaserAndBStateData(::RoboCompGenericBase::TBaseState& bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Laser::GetLaserAndBStateDataResult>(true, this, &LaserPrx::_iceI_getLaserAndBStateData, context).get();
        bState = ::std::move(_result.bState);
        return ::std::move(_result.returnValue);
    }

    template<template<typename> class P = ::std::promise>
    auto getLaserAndBStateDataAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Laser::GetLaserAndBStateDataResult>>().get_future())
    {
        return _makePromiseOutgoing<Laser::GetLaserAndBStateDataResult, P>(false, this, &LaserPrx::_iceI_getLaserAndBStateData, context);
    }

    ::std::function<void()>
    getLaserAndBStateDataAsync(::std::function<void(TLaserData, ::RoboCompGenericBase::TBaseState)> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Laser::GetLaserAndBStateDataResult&& _result)
        {
            response(::std::move(_result.returnValue), ::std::move(_result.bState));
        };
        return _makeLamdaOutgoing<Laser::GetLaserAndBStateDataResult>(_responseCb, ex, sent, this, &LaserPrx::_iceI_getLaserAndBStateData, context);
    }

    /// \cond INTERNAL
    void _iceI_getLaserAndBStateData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Laser::GetLaserAndBStateDataResult>>&, const ::Ice::Context&);
    /// \endcond

    LaserConfData getLaserConfData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<LaserConfData>(true, this, &LaserPrx::_iceI_getLaserConfData, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getLaserConfDataAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<LaserConfData>>().get_future())
    {
        return _makePromiseOutgoing<LaserConfData, P>(false, this, &LaserPrx::_iceI_getLaserConfData, context);
    }

    ::std::function<void()>
    getLaserConfDataAsync(::std::function<void(LaserConfData)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<LaserConfData>(response, ex, sent, this, &LaserPrx::_iceI_getLaserConfData, context);
    }

    /// \cond INTERNAL
    void _iceI_getLaserConfData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<LaserConfData>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    LaserPrx() = default;
    friend ::std::shared_ptr<LaserPrx> IceInternal::createProxy<LaserPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompLaser::LaserConfData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 46;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompLaser::LaserConfData, S>
{
    static void read(S* istr, ::RoboCompLaser::LaserConfData& v)
    {
        istr->readAll(v.staticConf, v.maxMeasures, v.maxDegrees, v.maxRange, v.minRange, v.iniRange, v.endRange, v.cluster, v.sampleRate, v.angleRes, v.angleIni, v.driver, v.device);
    }
};

template<>
struct StreamableTraits<::RoboCompLaser::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompLaser::TData, S>
{
    static void read(S* istr, ::RoboCompLaser::TData& v)
    {
        istr->readAll(v.angle, v.dist);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompLaser
{

using LaserPtr = ::std::shared_ptr<Laser>;
using LaserPrxPtr = ::std::shared_ptr<LaserPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompLaser
{

class Laser;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompLaser::Laser>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompLaser::Laser*);
/// \endcond

}

}

namespace RoboCompLaser
{

class Laser;
/// \cond INTERNAL
::Ice::Object* upCast(Laser*);
/// \endcond
typedef ::IceInternal::Handle< Laser> LaserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompLaser::Laser> LaserPrx;
typedef LaserPrx LaserPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(LaserPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompLaser
{

typedef ::std::vector<Ice::Int> shortVector;

struct LaserConfData
{
    ::Ice::Int staticConf;
    ::Ice::Int maxMeasures;
    ::Ice::Int maxDegrees;
    ::Ice::Int maxRange;
    ::Ice::Int minRange;
    ::Ice::Int iniRange;
    ::Ice::Int endRange;
    ::Ice::Int cluster;
    ::Ice::Int sampleRate;
    ::Ice::Float angleRes;
    ::Ice::Float angleIni;
    ::std::string driver;
    ::std::string device;

    bool operator==(const LaserConfData& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(staticConf != rhs_.staticConf)
        {
            return false;
        }
        if(maxMeasures != rhs_.maxMeasures)
        {
            return false;
        }
        if(maxDegrees != rhs_.maxDegrees)
        {
            return false;
        }
        if(maxRange != rhs_.maxRange)
        {
            return false;
        }
        if(minRange != rhs_.minRange)
        {
            return false;
        }
        if(iniRange != rhs_.iniRange)
        {
            return false;
        }
        if(endRange != rhs_.endRange)
        {
            return false;
        }
        if(cluster != rhs_.cluster)
        {
            return false;
        }
        if(sampleRate != rhs_.sampleRate)
        {
            return false;
        }
        if(angleRes != rhs_.angleRes)
        {
            return false;
        }
        if(angleIni != rhs_.angleIni)
        {
            return false;
        }
        if(driver != rhs_.driver)
        {
            return false;
        }
        if(device != rhs_.device)
        {
            return false;
        }
        return true;
    }

    bool operator<(const LaserConfData& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(staticConf < rhs_.staticConf)
        {
            return true;
        }
        else if(rhs_.staticConf < staticConf)
        {
            return false;
        }
        if(maxMeasures < rhs_.maxMeasures)
        {
            return true;
        }
        else if(rhs_.maxMeasures < maxMeasures)
        {
            return false;
        }
        if(maxDegrees < rhs_.maxDegrees)
        {
            return true;
        }
        else if(rhs_.maxDegrees < maxDegrees)
        {
            return false;
        }
        if(maxRange < rhs_.maxRange)
        {
            return true;
        }
        else if(rhs_.maxRange < maxRange)
        {
            return false;
        }
        if(minRange < rhs_.minRange)
        {
            return true;
        }
        else if(rhs_.minRange < minRange)
        {
            return false;
        }
        if(iniRange < rhs_.iniRange)
        {
            return true;
        }
        else if(rhs_.iniRange < iniRange)
        {
            return false;
        }
        if(endRange < rhs_.endRange)
        {
            return true;
        }
        else if(rhs_.endRange < endRange)
        {
            return false;
        }
        if(cluster < rhs_.cluster)
        {
            return true;
        }
        else if(rhs_.cluster < cluster)
        {
            return false;
        }
        if(sampleRate < rhs_.sampleRate)
        {
            return true;
        }
        else if(rhs_.sampleRate < sampleRate)
        {
            return false;
        }
        if(angleRes < rhs_.angleRes)
        {
            return true;
        }
        else if(rhs_.angleRes < angleRes)
        {
            return false;
        }
        if(angleIni < rhs_.angleIni)
        {
            return true;
        }
        else if(rhs_.angleIni < angleIni)
        {
            return false;
        }
        if(driver < rhs_.driver)
        {
            return true;
        }
        else if(rhs_.driver < driver)
        {
            return false;
        }
        if(device < rhs_.device)
        {
            return true;
        }
        else if(rhs_.device < device)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const LaserConfData& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const LaserConfData& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const LaserConfData& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const LaserConfData& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct TData
{
    ::Ice::Float angle;
    ::Ice::Float dist;

    bool operator==(const TData& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(angle != rhs_.angle)
        {
            return false;
        }
        if(dist != rhs_.dist)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TData& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(angle < rhs_.angle)
        {
            return true;
        }
        else if(rhs_.angle < angle)
        {
            return false;
        }
        if(dist < rhs_.dist)
        {
            return true;
        }
        else if(rhs_.dist < dist)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TData& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const TData& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const TData& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const TData& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector<RoboCompLaser::TData> TLaserData;

}

namespace RoboCompLaser
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLaser::Laser::begin_getLaserData.
 * Create a wrapper instance by calling ::RoboCompLaser::newCallback_Laser_getLaserData.
 */
class Callback_Laser_getLaserData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Laser_getLaserData_Base> Callback_Laser_getLaserDataPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLaser::Laser::begin_getLaserAndBStateData.
 * Create a wrapper instance by calling ::RoboCompLaser::newCallback_Laser_getLaserAndBStateData.
 */
class Callback_Laser_getLaserAndBStateData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Laser_getLaserAndBStateData_Base> Callback_Laser_getLaserAndBStateDataPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLaser::Laser::begin_getLaserConfData.
 * Create a wrapper instance by calling ::RoboCompLaser::newCallback_Laser_getLaserConfData.
 */
class Callback_Laser_getLaserConfData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Laser_getLaserConfData_Base> Callback_Laser_getLaserConfDataPtr;

}

namespace IceProxy
{

namespace RoboCompLaser
{

class Laser : public virtual ::Ice::Proxy<Laser, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompLaser::TLaserData getLaserData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getLaserData(_iceI_begin_getLaserData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getLaserData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getLaserData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserData(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(const ::RoboCompLaser::Callback_Laser_getLaserDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(const ::Ice::Context& context, const ::RoboCompLaser::Callback_Laser_getLaserDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserData(context, cb, cookie);
    }

    ::RoboCompLaser::TLaserData end_getLaserData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getLaserData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompLaser::TLaserData getLaserAndBStateData(::RoboCompGenericBase::TBaseState& bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getLaserAndBStateData(bState, _iceI_begin_getLaserAndBStateData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getLaserAndBStateData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getLaserAndBStateData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLaserAndBStateData(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserAndBStateData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserAndBStateData(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserAndBStateData(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserAndBStateData(const ::RoboCompLaser::Callback_Laser_getLaserAndBStateDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserAndBStateData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserAndBStateData(const ::Ice::Context& context, const ::RoboCompLaser::Callback_Laser_getLaserAndBStateDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserAndBStateData(context, cb, cookie);
    }

    ::RoboCompLaser::TLaserData end_getLaserAndBStateData(::RoboCompGenericBase::TBaseState& bState, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_getLaserAndBStateData(::RoboCompGenericBase::TBaseState& iceP_bState, ::RoboCompLaser::TLaserData& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_getLaserAndBStateData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompLaser::LaserConfData getLaserConfData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getLaserConfData(_iceI_begin_getLaserConfData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getLaserConfData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getLaserConfData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLaserConfData(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserConfData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserConfData(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserConfData(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserConfData(const ::RoboCompLaser::Callback_Laser_getLaserConfDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserConfData(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserConfData(const ::Ice::Context& context, const ::RoboCompLaser::Callback_Laser_getLaserConfDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserConfData(context, cb, cookie);
    }

    ::RoboCompLaser::LaserConfData end_getLaserConfData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getLaserConfData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompLaser
{

class Laser : public virtual ::Ice::Object
{
public:

    typedef LaserPrx ProxyType;
    typedef LaserPtr PointerType;

    virtual ~Laser();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TLaserData getLaserData(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getLaserData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TLaserData getLaserAndBStateData(::RoboCompGenericBase::TBaseState& bState, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getLaserAndBStateData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual LaserConfData getLaserConfData(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getLaserConfData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Laser& lhs, const Laser& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Laser& lhs, const Laser& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompLaser::LaserConfData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 46;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompLaser::LaserConfData, S>
{
    static void write(S* ostr, const ::RoboCompLaser::LaserConfData& v)
    {
        ostr->write(v.staticConf);
        ostr->write(v.maxMeasures);
        ostr->write(v.maxDegrees);
        ostr->write(v.maxRange);
        ostr->write(v.minRange);
        ostr->write(v.iniRange);
        ostr->write(v.endRange);
        ostr->write(v.cluster);
        ostr->write(v.sampleRate);
        ostr->write(v.angleRes);
        ostr->write(v.angleIni);
        ostr->write(v.driver);
        ostr->write(v.device);
    }
};

template<typename S>
struct StreamReader< ::RoboCompLaser::LaserConfData, S>
{
    static void read(S* istr, ::RoboCompLaser::LaserConfData& v)
    {
        istr->read(v.staticConf);
        istr->read(v.maxMeasures);
        istr->read(v.maxDegrees);
        istr->read(v.maxRange);
        istr->read(v.minRange);
        istr->read(v.iniRange);
        istr->read(v.endRange);
        istr->read(v.cluster);
        istr->read(v.sampleRate);
        istr->read(v.angleRes);
        istr->read(v.angleIni);
        istr->read(v.driver);
        istr->read(v.device);
    }
};

template<>
struct StreamableTraits< ::RoboCompLaser::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompLaser::TData, S>
{
    static void write(S* ostr, const ::RoboCompLaser::TData& v)
    {
        ostr->write(v.angle);
        ostr->write(v.dist);
    }
};

template<typename S>
struct StreamReader< ::RoboCompLaser::TData, S>
{
    static void read(S* istr, ::RoboCompLaser::TData& v)
    {
        istr->read(v.angle);
        istr->read(v.dist);
    }
};

}
/// \endcond

namespace RoboCompLaser
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLaser::Laser::begin_getLaserData.
 * Create a wrapper instance by calling ::RoboCompLaser::newCallback_Laser_getLaserData.
 */
template<class T>
class CallbackNC_Laser_getLaserData : public Callback_Laser_getLaserData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TLaserData&);

    CallbackNC_Laser_getLaserData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LaserPrx proxy = LaserPrx::uncheckedCast(result->getProxy());
        TLaserData ret;
        try
        {
            ret = proxy->end_getLaserData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaser::Laser::begin_getLaserData.
 */
template<class T> Callback_Laser_getLaserDataPtr
newCallback_Laser_getLaserData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TLaserData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Laser_getLaserData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaser::Laser::begin_getLaserData.
 */
template<class T> Callback_Laser_getLaserDataPtr
newCallback_Laser_getLaserData(T* instance, void (T::*cb)(const TLaserData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Laser_getLaserData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLaser::Laser::begin_getLaserData.
 * Create a wrapper instance by calling ::RoboCompLaser::newCallback_Laser_getLaserData.
 */
template<class T, typename CT>
class Callback_Laser_getLaserData : public Callback_Laser_getLaserData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TLaserData&, const CT&);

    Callback_Laser_getLaserData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LaserPrx proxy = LaserPrx::uncheckedCast(result->getProxy());
        TLaserData ret;
        try
        {
            ret = proxy->end_getLaserData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaser::Laser::begin_getLaserData.
 */
template<class T, typename CT> Callback_Laser_getLaserDataPtr
newCallback_Laser_getLaserData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TLaserData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Laser_getLaserData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaser::Laser::begin_getLaserData.
 */
template<class T, typename CT> Callback_Laser_getLaserDataPtr
newCallback_Laser_getLaserData(T* instance, void (T::*cb)(const TLaserData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Laser_getLaserData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLaser::Laser::begin_getLaserAndBStateData.
 * Create a wrapper instance by calling ::RoboCompLaser::newCallback_Laser_getLaserAndBStateData.
 */
template<class T>
class CallbackNC_Laser_getLaserAndBStateData : public Callback_Laser_getLaserAndBStateData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TLaserData&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Laser_getLaserAndBStateData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LaserPrx proxy = LaserPrx::uncheckedCast(result->getProxy());
        ::RoboCompGenericBase::TBaseState iceP_bState;
        TLaserData ret;
        try
        {
            ret = proxy->end_getLaserAndBStateData(iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_bState);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaser::Laser::begin_getLaserAndBStateData.
 */
template<class T> Callback_Laser_getLaserAndBStateDataPtr
newCallback_Laser_getLaserAndBStateData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TLaserData&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Laser_getLaserAndBStateData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaser::Laser::begin_getLaserAndBStateData.
 */
template<class T> Callback_Laser_getLaserAndBStateDataPtr
newCallback_Laser_getLaserAndBStateData(T* instance, void (T::*cb)(const TLaserData&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Laser_getLaserAndBStateData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLaser::Laser::begin_getLaserAndBStateData.
 * Create a wrapper instance by calling ::RoboCompLaser::newCallback_Laser_getLaserAndBStateData.
 */
template<class T, typename CT>
class Callback_Laser_getLaserAndBStateData : public Callback_Laser_getLaserAndBStateData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TLaserData&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Laser_getLaserAndBStateData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LaserPrx proxy = LaserPrx::uncheckedCast(result->getProxy());
        ::RoboCompGenericBase::TBaseState iceP_bState;
        TLaserData ret;
        try
        {
            ret = proxy->end_getLaserAndBStateData(iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaser::Laser::begin_getLaserAndBStateData.
 */
template<class T, typename CT> Callback_Laser_getLaserAndBStateDataPtr
newCallback_Laser_getLaserAndBStateData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TLaserData&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Laser_getLaserAndBStateData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaser::Laser::begin_getLaserAndBStateData.
 */
template<class T, typename CT> Callback_Laser_getLaserAndBStateDataPtr
newCallback_Laser_getLaserAndBStateData(T* instance, void (T::*cb)(const TLaserData&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Laser_getLaserAndBStateData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLaser::Laser::begin_getLaserConfData.
 * Create a wrapper instance by calling ::RoboCompLaser::newCallback_Laser_getLaserConfData.
 */
template<class T>
class CallbackNC_Laser_getLaserConfData : public Callback_Laser_getLaserConfData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const LaserConfData&);

    CallbackNC_Laser_getLaserConfData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LaserPrx proxy = LaserPrx::uncheckedCast(result->getProxy());
        LaserConfData ret;
        try
        {
            ret = proxy->end_getLaserConfData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaser::Laser::begin_getLaserConfData.
 */
template<class T> Callback_Laser_getLaserConfDataPtr
newCallback_Laser_getLaserConfData(const IceUtil::Handle<T>& instance, void (T::*cb)(const LaserConfData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Laser_getLaserConfData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaser::Laser::begin_getLaserConfData.
 */
template<class T> Callback_Laser_getLaserConfDataPtr
newCallback_Laser_getLaserConfData(T* instance, void (T::*cb)(const LaserConfData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Laser_getLaserConfData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLaser::Laser::begin_getLaserConfData.
 * Create a wrapper instance by calling ::RoboCompLaser::newCallback_Laser_getLaserConfData.
 */
template<class T, typename CT>
class Callback_Laser_getLaserConfData : public Callback_Laser_getLaserConfData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const LaserConfData&, const CT&);

    Callback_Laser_getLaserConfData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LaserPrx proxy = LaserPrx::uncheckedCast(result->getProxy());
        LaserConfData ret;
        try
        {
            ret = proxy->end_getLaserConfData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaser::Laser::begin_getLaserConfData.
 */
template<class T, typename CT> Callback_Laser_getLaserConfDataPtr
newCallback_Laser_getLaserConfData(const IceUtil::Handle<T>& instance, void (T::*cb)(const LaserConfData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Laser_getLaserConfData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaser::Laser::begin_getLaserConfData.
 */
template<class T, typename CT> Callback_Laser_getLaserConfDataPtr
newCallback_Laser_getLaserConfData(T* instance, void (T::*cb)(const LaserConfData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Laser_getLaserConfData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
