// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Laser_msgs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Laser_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Laser_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* gazebo_robocomp_laser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gazebo_robocomp_laser_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Laser_5fmsgs_2eproto() {
  protobuf_AddDesc_Laser_5fmsgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Laser_msgs.proto");
  GOOGLE_CHECK(file != NULL);
  gazebo_robocomp_laser_descriptor_ = file->message_type(0);
  static const int gazebo_robocomp_laser_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gazebo_robocomp_laser, laser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gazebo_robocomp_laser, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gazebo_robocomp_laser, retro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gazebo_robocomp_laser, fiducial_),
  };
  gazebo_robocomp_laser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gazebo_robocomp_laser_descriptor_,
      gazebo_robocomp_laser::default_instance_,
      gazebo_robocomp_laser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gazebo_robocomp_laser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gazebo_robocomp_laser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gazebo_robocomp_laser));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Laser_5fmsgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gazebo_robocomp_laser_descriptor_, &gazebo_robocomp_laser::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Laser_5fmsgs_2eproto() {
  delete gazebo_robocomp_laser::default_instance_;
  delete gazebo_robocomp_laser_reflection_;
}

void protobuf_AddDesc_Laser_5fmsgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_raysensor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Laser_msgs.proto\022\017Laser_msgs.msgs\032\017ray"
    "sensor.proto\"n\n\025gazebo_robocomp_laser\022%\n"
    "\005Laser\030\001 \002(\0132\026.gazebo.msgs.RaySensor\022\r\n\005"
    "Range\030\002 \003(\001\022\r\n\005Retro\030\003 \003(\001\022\020\n\010Fiducial\030\004"
    " \003(\005", 164);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Laser_msgs.proto", &protobuf_RegisterTypes);
  gazebo_robocomp_laser::default_instance_ = new gazebo_robocomp_laser();
  gazebo_robocomp_laser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Laser_5fmsgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Laser_5fmsgs_2eproto {
  StaticDescriptorInitializer_Laser_5fmsgs_2eproto() {
    protobuf_AddDesc_Laser_5fmsgs_2eproto();
  }
} static_descriptor_initializer_Laser_5fmsgs_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int gazebo_robocomp_laser::kLaserFieldNumber;
const int gazebo_robocomp_laser::kRangeFieldNumber;
const int gazebo_robocomp_laser::kRetroFieldNumber;
const int gazebo_robocomp_laser::kFiducialFieldNumber;
#endif  // !_MSC_VER

gazebo_robocomp_laser::gazebo_robocomp_laser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Laser_msgs.msgs.gazebo_robocomp_laser)
}

void gazebo_robocomp_laser::InitAsDefaultInstance() {
  laser_ = const_cast< ::gazebo::msgs::RaySensor*>(&::gazebo::msgs::RaySensor::default_instance());
}

gazebo_robocomp_laser::gazebo_robocomp_laser(const gazebo_robocomp_laser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Laser_msgs.msgs.gazebo_robocomp_laser)
}

void gazebo_robocomp_laser::SharedCtor() {
  _cached_size_ = 0;
  laser_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gazebo_robocomp_laser::~gazebo_robocomp_laser() {
  // @@protoc_insertion_point(destructor:Laser_msgs.msgs.gazebo_robocomp_laser)
  SharedDtor();
}

void gazebo_robocomp_laser::SharedDtor() {
  if (this != default_instance_) {
    delete laser_;
  }
}

void gazebo_robocomp_laser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gazebo_robocomp_laser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gazebo_robocomp_laser_descriptor_;
}

const gazebo_robocomp_laser& gazebo_robocomp_laser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Laser_5fmsgs_2eproto();
  return *default_instance_;
}

gazebo_robocomp_laser* gazebo_robocomp_laser::default_instance_ = NULL;

gazebo_robocomp_laser* gazebo_robocomp_laser::New() const {
  return new gazebo_robocomp_laser;
}

void gazebo_robocomp_laser::Clear() {
  if (has_laser()) {
    if (laser_ != NULL) laser_->::gazebo::msgs::RaySensor::Clear();
  }
  range_.Clear();
  retro_.Clear();
  fiducial_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gazebo_robocomp_laser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Laser_msgs.msgs.gazebo_robocomp_laser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.RaySensor Laser = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Range;
        break;
      }

      // repeated double Range = 2;
      case 2: {
        if (tag == 17) {
         parse_Range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_range())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_range())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Range;
        if (input->ExpectTag(25)) goto parse_Retro;
        break;
      }

      // repeated double Retro = 3;
      case 3: {
        if (tag == 25) {
         parse_Retro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_retro())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_retro())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_Retro;
        if (input->ExpectTag(32)) goto parse_Fiducial;
        break;
      }

      // repeated int32 Fiducial = 4;
      case 4: {
        if (tag == 32) {
         parse_Fiducial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_fiducial())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fiducial())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Fiducial;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Laser_msgs.msgs.gazebo_robocomp_laser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Laser_msgs.msgs.gazebo_robocomp_laser)
  return false;
#undef DO_
}

void gazebo_robocomp_laser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Laser_msgs.msgs.gazebo_robocomp_laser)
  // required .gazebo.msgs.RaySensor Laser = 1;
  if (has_laser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->laser(), output);
  }

  // repeated double Range = 2;
  for (int i = 0; i < this->range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->range(i), output);
  }

  // repeated double Retro = 3;
  for (int i = 0; i < this->retro_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->retro(i), output);
  }

  // repeated int32 Fiducial = 4;
  for (int i = 0; i < this->fiducial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->fiducial(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Laser_msgs.msgs.gazebo_robocomp_laser)
}

::google::protobuf::uint8* gazebo_robocomp_laser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Laser_msgs.msgs.gazebo_robocomp_laser)
  // required .gazebo.msgs.RaySensor Laser = 1;
  if (has_laser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->laser(), target);
  }

  // repeated double Range = 2;
  for (int i = 0; i < this->range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->range(i), target);
  }

  // repeated double Retro = 3;
  for (int i = 0; i < this->retro_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->retro(i), target);
  }

  // repeated int32 Fiducial = 4;
  for (int i = 0; i < this->fiducial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->fiducial(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Laser_msgs.msgs.gazebo_robocomp_laser)
  return target;
}

int gazebo_robocomp_laser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gazebo.msgs.RaySensor Laser = 1;
    if (has_laser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laser());
    }

  }
  // repeated double Range = 2;
  {
    int data_size = 0;
    data_size = 8 * this->range_size();
    total_size += 1 * this->range_size() + data_size;
  }

  // repeated double Retro = 3;
  {
    int data_size = 0;
    data_size = 8 * this->retro_size();
    total_size += 1 * this->retro_size() + data_size;
  }

  // repeated int32 Fiducial = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->fiducial_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fiducial(i));
    }
    total_size += 1 * this->fiducial_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gazebo_robocomp_laser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gazebo_robocomp_laser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gazebo_robocomp_laser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gazebo_robocomp_laser::MergeFrom(const gazebo_robocomp_laser& from) {
  GOOGLE_CHECK_NE(&from, this);
  range_.MergeFrom(from.range_);
  retro_.MergeFrom(from.retro_);
  fiducial_.MergeFrom(from.fiducial_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_laser()) {
      mutable_laser()->::gazebo::msgs::RaySensor::MergeFrom(from.laser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gazebo_robocomp_laser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gazebo_robocomp_laser::CopyFrom(const gazebo_robocomp_laser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gazebo_robocomp_laser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gazebo_robocomp_laser::Swap(gazebo_robocomp_laser* other) {
  if (other != this) {
    std::swap(laser_, other->laser_);
    range_.Swap(&other->range_);
    retro_.Swap(&other->retro_);
    fiducial_.Swap(&other->fiducial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gazebo_robocomp_laser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gazebo_robocomp_laser_descriptor_;
  metadata.reflection = gazebo_robocomp_laser_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace Laser_msgs

// @@protoc_insertion_point(global_scope)
