// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Laser_msgs.proto

#ifndef PROTOBUF_Laser_5fmsgs_2eproto__INCLUDED
#define PROTOBUF_Laser_5fmsgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "raysensor.pb.h"
// @@protoc_insertion_point(includes)

namespace Laser_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Laser_5fmsgs_2eproto();
void protobuf_AssignDesc_Laser_5fmsgs_2eproto();
void protobuf_ShutdownFile_Laser_5fmsgs_2eproto();

class gazebo_robocomp_laser;

// ===================================================================

class gazebo_robocomp_laser : public ::google::protobuf::Message {
 public:
  gazebo_robocomp_laser();
  virtual ~gazebo_robocomp_laser();

  gazebo_robocomp_laser(const gazebo_robocomp_laser& from);

  inline gazebo_robocomp_laser& operator=(const gazebo_robocomp_laser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gazebo_robocomp_laser& default_instance();

  void Swap(gazebo_robocomp_laser* other);

  // implements Message ----------------------------------------------

  gazebo_robocomp_laser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gazebo_robocomp_laser& from);
  void MergeFrom(const gazebo_robocomp_laser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.RaySensor Laser = 1;
  inline bool has_laser() const;
  inline void clear_laser();
  static const int kLaserFieldNumber = 1;
  inline const ::gazebo::msgs::RaySensor& laser() const;
  inline ::gazebo::msgs::RaySensor* mutable_laser();
  inline ::gazebo::msgs::RaySensor* release_laser();
  inline void set_allocated_laser(::gazebo::msgs::RaySensor* laser);

  // repeated double Range = 2;
  inline int range_size() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 2;
  inline double range(int index) const;
  inline void set_range(int index, double value);
  inline void add_range(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      range() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_range();

  // repeated double Retro = 3;
  inline int retro_size() const;
  inline void clear_retro();
  static const int kRetroFieldNumber = 3;
  inline double retro(int index) const;
  inline void set_retro(int index, double value);
  inline void add_retro(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      retro() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_retro();

  // repeated int32 Fiducial = 4;
  inline int fiducial_size() const;
  inline void clear_fiducial();
  static const int kFiducialFieldNumber = 4;
  inline ::google::protobuf::int32 fiducial(int index) const;
  inline void set_fiducial(int index, ::google::protobuf::int32 value);
  inline void add_fiducial(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fiducial() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fiducial();

  // @@protoc_insertion_point(class_scope:Laser_msgs.msgs.gazebo_robocomp_laser)
 private:
  inline void set_has_laser();
  inline void clear_has_laser();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::RaySensor* laser_;
  ::google::protobuf::RepeatedField< double > range_;
  ::google::protobuf::RepeatedField< double > retro_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fiducial_;
  friend void  protobuf_AddDesc_Laser_5fmsgs_2eproto();
  friend void protobuf_AssignDesc_Laser_5fmsgs_2eproto();
  friend void protobuf_ShutdownFile_Laser_5fmsgs_2eproto();

  void InitAsDefaultInstance();
  static gazebo_robocomp_laser* default_instance_;
};
// ===================================================================


// ===================================================================

// gazebo_robocomp_laser

// required .gazebo.msgs.RaySensor Laser = 1;
inline bool gazebo_robocomp_laser::has_laser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gazebo_robocomp_laser::set_has_laser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gazebo_robocomp_laser::clear_has_laser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gazebo_robocomp_laser::clear_laser() {
  if (laser_ != NULL) laser_->::gazebo::msgs::RaySensor::Clear();
  clear_has_laser();
}
inline const ::gazebo::msgs::RaySensor& gazebo_robocomp_laser::laser() const {
  // @@protoc_insertion_point(field_get:Laser_msgs.msgs.gazebo_robocomp_laser.Laser)
  return laser_ != NULL ? *laser_ : *default_instance_->laser_;
}
inline ::gazebo::msgs::RaySensor* gazebo_robocomp_laser::mutable_laser() {
  set_has_laser();
  if (laser_ == NULL) laser_ = new ::gazebo::msgs::RaySensor;
  // @@protoc_insertion_point(field_mutable:Laser_msgs.msgs.gazebo_robocomp_laser.Laser)
  return laser_;
}
inline ::gazebo::msgs::RaySensor* gazebo_robocomp_laser::release_laser() {
  clear_has_laser();
  ::gazebo::msgs::RaySensor* temp = laser_;
  laser_ = NULL;
  return temp;
}
inline void gazebo_robocomp_laser::set_allocated_laser(::gazebo::msgs::RaySensor* laser) {
  delete laser_;
  laser_ = laser;
  if (laser) {
    set_has_laser();
  } else {
    clear_has_laser();
  }
  // @@protoc_insertion_point(field_set_allocated:Laser_msgs.msgs.gazebo_robocomp_laser.Laser)
}

// repeated double Range = 2;
inline int gazebo_robocomp_laser::range_size() const {
  return range_.size();
}
inline void gazebo_robocomp_laser::clear_range() {
  range_.Clear();
}
inline double gazebo_robocomp_laser::range(int index) const {
  // @@protoc_insertion_point(field_get:Laser_msgs.msgs.gazebo_robocomp_laser.Range)
  return range_.Get(index);
}
inline void gazebo_robocomp_laser::set_range(int index, double value) {
  range_.Set(index, value);
  // @@protoc_insertion_point(field_set:Laser_msgs.msgs.gazebo_robocomp_laser.Range)
}
inline void gazebo_robocomp_laser::add_range(double value) {
  range_.Add(value);
  // @@protoc_insertion_point(field_add:Laser_msgs.msgs.gazebo_robocomp_laser.Range)
}
inline const ::google::protobuf::RepeatedField< double >&
gazebo_robocomp_laser::range() const {
  // @@protoc_insertion_point(field_list:Laser_msgs.msgs.gazebo_robocomp_laser.Range)
  return range_;
}
inline ::google::protobuf::RepeatedField< double >*
gazebo_robocomp_laser::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:Laser_msgs.msgs.gazebo_robocomp_laser.Range)
  return &range_;
}

// repeated double Retro = 3;
inline int gazebo_robocomp_laser::retro_size() const {
  return retro_.size();
}
inline void gazebo_robocomp_laser::clear_retro() {
  retro_.Clear();
}
inline double gazebo_robocomp_laser::retro(int index) const {
  // @@protoc_insertion_point(field_get:Laser_msgs.msgs.gazebo_robocomp_laser.Retro)
  return retro_.Get(index);
}
inline void gazebo_robocomp_laser::set_retro(int index, double value) {
  retro_.Set(index, value);
  // @@protoc_insertion_point(field_set:Laser_msgs.msgs.gazebo_robocomp_laser.Retro)
}
inline void gazebo_robocomp_laser::add_retro(double value) {
  retro_.Add(value);
  // @@protoc_insertion_point(field_add:Laser_msgs.msgs.gazebo_robocomp_laser.Retro)
}
inline const ::google::protobuf::RepeatedField< double >&
gazebo_robocomp_laser::retro() const {
  // @@protoc_insertion_point(field_list:Laser_msgs.msgs.gazebo_robocomp_laser.Retro)
  return retro_;
}
inline ::google::protobuf::RepeatedField< double >*
gazebo_robocomp_laser::mutable_retro() {
  // @@protoc_insertion_point(field_mutable_list:Laser_msgs.msgs.gazebo_robocomp_laser.Retro)
  return &retro_;
}

// repeated int32 Fiducial = 4;
inline int gazebo_robocomp_laser::fiducial_size() const {
  return fiducial_.size();
}
inline void gazebo_robocomp_laser::clear_fiducial() {
  fiducial_.Clear();
}
inline ::google::protobuf::int32 gazebo_robocomp_laser::fiducial(int index) const {
  // @@protoc_insertion_point(field_get:Laser_msgs.msgs.gazebo_robocomp_laser.Fiducial)
  return fiducial_.Get(index);
}
inline void gazebo_robocomp_laser::set_fiducial(int index, ::google::protobuf::int32 value) {
  fiducial_.Set(index, value);
  // @@protoc_insertion_point(field_set:Laser_msgs.msgs.gazebo_robocomp_laser.Fiducial)
}
inline void gazebo_robocomp_laser::add_fiducial(::google::protobuf::int32 value) {
  fiducial_.Add(value);
  // @@protoc_insertion_point(field_add:Laser_msgs.msgs.gazebo_robocomp_laser.Fiducial)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
gazebo_robocomp_laser::fiducial() const {
  // @@protoc_insertion_point(field_list:Laser_msgs.msgs.gazebo_robocomp_laser.Fiducial)
  return fiducial_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
gazebo_robocomp_laser::mutable_fiducial() {
  // @@protoc_insertion_point(field_mutable_list:Laser_msgs.msgs.gazebo_robocomp_laser.Fiducial)
  return &fiducial_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace Laser_msgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Laser_5fmsgs_2eproto__INCLUDED
