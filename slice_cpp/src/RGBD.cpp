// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `RGBD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <RGBD.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompRGBD__RGBD__getRGBDParams_name = "getRGBDParams";

const ::std::string __RoboCompRGBD__RGBD__setRegistration_name = "setRegistration";

const ::std::string __RoboCompRGBD__RGBD__getRegistration_name = "getRegistration";

const ::std::string __RoboCompRGBD__RGBD__getData_name = "getData";

const ::std::string __RoboCompRGBD__RGBD__getDepthInIR_name = "getDepthInIR";

const ::std::string __RoboCompRGBD__RGBD__getImage_name = "getImage";

const ::std::string __RoboCompRGBD__RGBD__getDepth_name = "getDepth";

const ::std::string __RoboCompRGBD__RGBD__getRGB_name = "getRGB";

const ::std::string __RoboCompRGBD__RGBD__getXYZ_name = "getXYZ";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompRGBD::HardwareFailedException> __RoboCompRGBD__HardwareFailedException_init("::RoboCompRGBD::HardwareFailedException");

}

RoboCompRGBD::HardwareFailedException::HardwareFailedException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompRGBD::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompRGBD::HardwareFailedException::ice_name() const
{
    return "RoboCompRGBD::HardwareFailedException";
}

RoboCompRGBD::HardwareFailedException*
RoboCompRGBD::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompRGBD::HardwareFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompRGBD::HardwareFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompRGBD::HardwareFailedException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompRGBD::HardwareFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompRGBD::upCast(::IceProxy::RoboCompRGBD::RGBD* p) { return p; }

void
::IceProxy::RoboCompRGBD::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRGBD::RGBD>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompRGBD::RGBD;
        v->__copyFrom(proxy);
    }
}

::RoboCompRGBD::TRGBDParams
IceProxy::RoboCompRGBD::RGBD::getRGBDParams(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompRGBD__RGBD__getRGBDParams_name);
    ::IceInternal::Outgoing __og(this, __RoboCompRGBD__RGBD__getRGBDParams_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompRGBD::TRGBDParams __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getRGBDParams(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getRGBDParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getRGBDParams_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompRGBD__RGBD__getRGBDParams_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::__begin_getRGBDParams(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::TRGBDParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompRGBD::TRGBDParams&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
            ::RoboCompRGBD::TRGBDParams __ret;
            try
            {
                __ret = __proxy->end_getRGBDParams(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompRGBD::TRGBDParams&)> _response;
    };
    return begin_getRGBDParams(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompRGBD::TRGBDParams
IceProxy::RoboCompRGBD::RGBD::end_getRGBDParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getRGBDParams_name);
    ::RoboCompRGBD::TRGBDParams __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::RoboCompRGBD::RGBD::setRegistration(::RoboCompRGBD::Registration __p_value, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompRGBD__RGBD__setRegistration_name);
    ::IceInternal::Outgoing __og(this, __RoboCompRGBD__RGBD__setRegistration_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_value);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_setRegistration(::RoboCompRGBD::Registration __p_value, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__setRegistration_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__setRegistration_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompRGBD__RGBD__setRegistration_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_value);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::__begin_setRegistration(::RoboCompRGBD::Registration __p_value, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setRegistration(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setRegistration(__p_value, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompRGBD::RGBD::end_setRegistration(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__setRegistration_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::RoboCompRGBD::Registration
IceProxy::RoboCompRGBD::RGBD::getRegistration(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompRGBD__RGBD__getRegistration_name);
    ::IceInternal::Outgoing __og(this, __RoboCompRGBD__RGBD__getRegistration_name, ::Ice::Idempotent, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompRGBD::Registration __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getRegistration(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getRegistration_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getRegistration_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompRGBD__RGBD__getRegistration_name, ::Ice::Idempotent, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::__begin_getRegistration(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::RoboCompRGBD::Registration)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::RoboCompRGBD::Registration)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
            ::RoboCompRGBD::Registration __ret;
            try
            {
                __ret = __proxy->end_getRegistration(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::RoboCompRGBD::Registration)> _response;
    };
    return begin_getRegistration(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompRGBD::Registration
IceProxy::RoboCompRGBD::RGBD::end_getRegistration(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getRegistration_name);
    ::RoboCompRGBD::Registration __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::RoboCompRGBD::RGBD::getData(::RoboCompRGBD::imgType& __p_rgbMatrix, ::RoboCompRGBD::depthType& __p_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompRGBD__RGBD__getData_name);
    ::IceInternal::Outgoing __og(this, __RoboCompRGBD__RGBD__getData_name, ::Ice::Idempotent, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_rgbMatrix);
    __is->read(__p_distanceMatrix);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getData(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getData_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompRGBD__RGBD__getData_name, ::Ice::Idempotent, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::__begin_getData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
            ::RoboCompRGBD::imgType __p_rgbMatrix;
            ::RoboCompRGBD::depthType __p_distanceMatrix;
            ::RoboCompJointMotor::MotorStateMap __p_hState;
            ::RoboCompGenericBase::TBaseState __p_bState;
            try
            {
                __proxy->end_getData(__p_rgbMatrix, __p_distanceMatrix, __p_hState, __p_bState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_rgbMatrix, __p_distanceMatrix, __p_hState, __p_bState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)> _response;
    };
    return begin_getData(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompRGBD::RGBD::end_getData(::RoboCompRGBD::imgType& __p_rgbMatrix, ::RoboCompRGBD::depthType& __p_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getData_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_rgbMatrix);
    __is->read(__p_distanceMatrix);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __result->__endReadParams();
}

void
IceProxy::RoboCompRGBD::RGBD::getDepthInIR(::RoboCompRGBD::depthType& __p_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompRGBD__RGBD__getDepthInIR_name);
    ::IceInternal::Outgoing __og(this, __RoboCompRGBD__RGBD__getDepthInIR_name, ::Ice::Idempotent, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_distanceMatrix);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getDepthInIR(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getDepthInIR_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getDepthInIR_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompRGBD__RGBD__getDepthInIR_name, ::Ice::Idempotent, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::__begin_getDepthInIR(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
            ::RoboCompRGBD::depthType __p_distanceMatrix;
            ::RoboCompJointMotor::MotorStateMap __p_hState;
            ::RoboCompGenericBase::TBaseState __p_bState;
            try
            {
                __proxy->end_getDepthInIR(__p_distanceMatrix, __p_hState, __p_bState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_distanceMatrix, __p_hState, __p_bState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)> _response;
    };
    return begin_getDepthInIR(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompRGBD::RGBD::end_getDepthInIR(::RoboCompRGBD::depthType& __p_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getDepthInIR_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_distanceMatrix);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __result->__endReadParams();
}

void
IceProxy::RoboCompRGBD::RGBD::getImage(::RoboCompRGBD::ColorSeq& __p_color, ::RoboCompRGBD::DepthSeq& __p_depth, ::RoboCompRGBD::PointSeq& __p_points, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompRGBD__RGBD__getImage_name);
    ::IceInternal::Outgoing __og(this, __RoboCompRGBD__RGBD__getImage_name, ::Ice::Idempotent, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_color);
    __is->read(__p_depth);
    __is->read(__p_points);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getImage(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getImage_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompRGBD__RGBD__getImage_name, ::Ice::Idempotent, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::__begin_getImage(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
            ::RoboCompRGBD::ColorSeq __p_color;
            ::RoboCompRGBD::DepthSeq __p_depth;
            ::RoboCompRGBD::PointSeq __p_points;
            ::RoboCompJointMotor::MotorStateMap __p_hState;
            ::RoboCompGenericBase::TBaseState __p_bState;
            try
            {
                __proxy->end_getImage(__p_color, __p_depth, __p_points, __p_hState, __p_bState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_color, __p_depth, __p_points, __p_hState, __p_bState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)> _response;
    };
    return begin_getImage(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompRGBD::RGBD::end_getImage(::RoboCompRGBD::ColorSeq& __p_color, ::RoboCompRGBD::DepthSeq& __p_depth, ::RoboCompRGBD::PointSeq& __p_points, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getImage_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_color);
    __is->read(__p_depth);
    __is->read(__p_points);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __result->__endReadParams();
}

void
IceProxy::RoboCompRGBD::RGBD::getDepth(::RoboCompRGBD::DepthSeq& __p_depth, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompRGBD__RGBD__getDepth_name);
    ::IceInternal::Outgoing __og(this, __RoboCompRGBD__RGBD__getDepth_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_depth);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getDepth(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getDepth_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getDepth_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompRGBD__RGBD__getDepth_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::__begin_getDepth(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
            ::RoboCompRGBD::DepthSeq __p_depth;
            ::RoboCompJointMotor::MotorStateMap __p_hState;
            ::RoboCompGenericBase::TBaseState __p_bState;
            try
            {
                __proxy->end_getDepth(__p_depth, __p_hState, __p_bState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_depth, __p_hState, __p_bState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)> _response;
    };
    return begin_getDepth(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompRGBD::RGBD::end_getDepth(::RoboCompRGBD::DepthSeq& __p_depth, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getDepth_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_depth);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __result->__endReadParams();
}

void
IceProxy::RoboCompRGBD::RGBD::getRGB(::RoboCompRGBD::ColorSeq& __p_color, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompRGBD__RGBD__getRGB_name);
    ::IceInternal::Outgoing __og(this, __RoboCompRGBD__RGBD__getRGB_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_color);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getRGB(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getRGB_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getRGB_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompRGBD__RGBD__getRGB_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::__begin_getRGB(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
            ::RoboCompRGBD::ColorSeq __p_color;
            ::RoboCompJointMotor::MotorStateMap __p_hState;
            ::RoboCompGenericBase::TBaseState __p_bState;
            try
            {
                __proxy->end_getRGB(__p_color, __p_hState, __p_bState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_color, __p_hState, __p_bState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)> _response;
    };
    return begin_getRGB(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompRGBD::RGBD::end_getRGB(::RoboCompRGBD::ColorSeq& __p_color, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getRGB_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_color);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __result->__endReadParams();
}

void
IceProxy::RoboCompRGBD::RGBD::getXYZ(::RoboCompRGBD::PointSeq& __p_points, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompRGBD__RGBD__getXYZ_name);
    ::IceInternal::Outgoing __og(this, __RoboCompRGBD__RGBD__getXYZ_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_points);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::begin_getXYZ(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRGBD__RGBD__getXYZ_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRGBD__RGBD__getXYZ_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompRGBD__RGBD__getXYZ_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompRGBD::RGBD::__begin_getXYZ(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
            ::RoboCompRGBD::PointSeq __p_points;
            ::RoboCompJointMotor::MotorStateMap __p_hState;
            ::RoboCompGenericBase::TBaseState __p_bState;
            try
            {
                __proxy->end_getXYZ(__p_points, __p_hState, __p_bState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_points, __p_hState, __p_bState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)> _response;
    };
    return begin_getXYZ(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompRGBD::RGBD::end_getXYZ(::RoboCompRGBD::PointSeq& __p_points, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRGBD__RGBD__getXYZ_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompRGBD::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_points);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __result->__endReadParams();
}

const ::std::string&
IceProxy::RoboCompRGBD::RGBD::ice_staticId()
{
    return ::RoboCompRGBD::RGBD::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompRGBD::RGBD::__newInstance() const
{
    return new RGBD;
}

::Ice::Object* RoboCompRGBD::upCast(::RoboCompRGBD::RGBD* p) { return p; }

namespace
{
const ::std::string __RoboCompRGBD__RGBD_ids[2] =
{
    "::Ice::Object",
    "::RoboCompRGBD::RGBD"
};

}

bool
RoboCompRGBD::RGBD::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompRGBD__RGBD_ids, __RoboCompRGBD__RGBD_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompRGBD::RGBD::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompRGBD__RGBD_ids[0], &__RoboCompRGBD__RGBD_ids[2]);
}

const ::std::string&
RoboCompRGBD::RGBD::ice_id(const ::Ice::Current&) const
{
    return __RoboCompRGBD__RGBD_ids[1];
}

const ::std::string&
RoboCompRGBD::RGBD::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompRGBD::RGBD";
    return typeId;
#else
    return __RoboCompRGBD__RGBD_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getRGBDParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::TRGBDParams __ret = getRGBDParams(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___setRegistration(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompRGBD::Registration __p_value;
    __is->read(__p_value);
    __inS.endReadParams();
    try
    {
        setRegistration(__p_value, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getRegistration(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::RoboCompRGBD::Registration __ret = getRegistration(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::imgType __p_rgbMatrix;
    ::RoboCompRGBD::depthType __p_distanceMatrix;
    ::RoboCompJointMotor::MotorStateMap __p_hState;
    ::RoboCompGenericBase::TBaseState __p_bState;
    try
    {
        getData(__p_rgbMatrix, __p_distanceMatrix, __p_hState, __p_bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_rgbMatrix);
        __os->write(__p_distanceMatrix);
        __os->write(__p_hState);
        __os->write(__p_bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getDepthInIR(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::depthType __p_distanceMatrix;
    ::RoboCompJointMotor::MotorStateMap __p_hState;
    ::RoboCompGenericBase::TBaseState __p_bState;
    try
    {
        getDepthInIR(__p_distanceMatrix, __p_hState, __p_bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_distanceMatrix);
        __os->write(__p_hState);
        __os->write(__p_bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::ColorSeq __p_color;
    ::RoboCompRGBD::DepthSeq __p_depth;
    ::RoboCompRGBD::PointSeq __p_points;
    ::RoboCompJointMotor::MotorStateMap __p_hState;
    ::RoboCompGenericBase::TBaseState __p_bState;
    try
    {
        getImage(__p_color, __p_depth, __p_points, __p_hState, __p_bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_color);
        __os->write(__p_depth);
        __os->write(__p_points);
        __os->write(__p_hState);
        __os->write(__p_bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getDepth(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::DepthSeq __p_depth;
    ::RoboCompJointMotor::MotorStateMap __p_hState;
    ::RoboCompGenericBase::TBaseState __p_bState;
    try
    {
        getDepth(__p_depth, __p_hState, __p_bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_depth);
        __os->write(__p_hState);
        __os->write(__p_bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getRGB(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::ColorSeq __p_color;
    ::RoboCompJointMotor::MotorStateMap __p_hState;
    ::RoboCompGenericBase::TBaseState __p_bState;
    try
    {
        getRGB(__p_color, __p_hState, __p_bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_color);
        __os->write(__p_hState);
        __os->write(__p_bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::___getXYZ(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompRGBD::PointSeq __p_points;
    ::RoboCompJointMotor::MotorStateMap __p_hState;
    ::RoboCompGenericBase::TBaseState __p_bState;
    try
    {
        getXYZ(__p_points, __p_hState, __p_bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_points);
        __os->write(__p_hState);
        __os->write(__p_bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRGBD::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __RoboCompRGBD__RGBD_all[] =
{
    "getData",
    "getDepth",
    "getDepthInIR",
    "getImage",
    "getRGB",
    "getRGBDParams",
    "getRegistration",
    "getXYZ",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setRegistration"
};

}

::Ice::DispatchStatus
RoboCompRGBD::RGBD::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompRGBD__RGBD_all, __RoboCompRGBD__RGBD_all + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompRGBD__RGBD_all)
    {
        case 0:
        {
            return ___getData(in, current);
        }
        case 1:
        {
            return ___getDepth(in, current);
        }
        case 2:
        {
            return ___getDepthInIR(in, current);
        }
        case 3:
        {
            return ___getImage(in, current);
        }
        case 4:
        {
            return ___getRGB(in, current);
        }
        case 5:
        {
            return ___getRGBDParams(in, current);
        }
        case 6:
        {
            return ___getRegistration(in, current);
        }
        case 7:
        {
            return ___getXYZ(in, current);
        }
        case 8:
        {
            return ___ice_id(in, current);
        }
        case 9:
        {
            return ___ice_ids(in, current);
        }
        case 10:
        {
            return ___ice_isA(in, current);
        }
        case 11:
        {
            return ___ice_ping(in, current);
        }
        case 12:
        {
            return ___setRegistration(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompRGBD::RGBD::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompRGBD::RGBD::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompRGBD::__patch(RGBDPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompRGBD::RGBDPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompRGBD::RGBD::ice_staticId(), v);
    }
}
