// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `Camera.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Camera.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompCamera__Camera__getYUVImage_name = "getYUVImage";

const ::std::string __RoboCompCamera__Camera__getYImage_name = "getYImage";

const ::std::string __RoboCompCamera__Camera__getYLogPolarImage_name = "getYLogPolarImage";

const ::std::string __RoboCompCamera__Camera__getYImageCR_name = "getYImageCR";

const ::std::string __RoboCompCamera__Camera__getRGBPackedImage_name = "getRGBPackedImage";

const ::std::string __RoboCompCamera__Camera__getYRGBImage_name = "getYRGBImage";

const ::std::string __RoboCompCamera__Camera__getCamParams_name = "getCamParams";

const ::std::string __RoboCompCamera__Camera__setInnerImage_name = "setInnerImage";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompCamera::HardwareFailedException> __RoboCompCamera__HardwareFailedException_init("::RoboCompCamera::HardwareFailedException");

}

RoboCompCamera::HardwareFailedException::HardwareFailedException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompCamera::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompCamera::HardwareFailedException::ice_name() const
{
    return "RoboCompCamera::HardwareFailedException";
}

RoboCompCamera::HardwareFailedException*
RoboCompCamera::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompCamera::HardwareFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompCamera::HardwareFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompCamera::HardwareFailedException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompCamera::HardwareFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompCamera::MovingImageException> __RoboCompCamera__MovingImageException_init("::RoboCompCamera::MovingImageException");

}

RoboCompCamera::MovingImageException::MovingImageException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompCamera::MovingImageException::~MovingImageException() throw()
{
}

::std::string
RoboCompCamera::MovingImageException::ice_name() const
{
    return "RoboCompCamera::MovingImageException";
}

RoboCompCamera::MovingImageException*
RoboCompCamera::MovingImageException::ice_clone() const
{
    return new MovingImageException(*this);
}

void
RoboCompCamera::MovingImageException::ice_throw() const
{
    throw *this;
}

void
RoboCompCamera::MovingImageException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompCamera::MovingImageException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompCamera::MovingImageException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompCamera::upCast(::IceProxy::RoboCompCamera::Camera* p) { return p; }

void
::IceProxy::RoboCompCamera::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCamera::Camera>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompCamera::Camera;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompCamera::Camera::getYUVImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCamera__Camera__getYUVImage_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCamera__Camera__getYUVImage_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cam);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompCamera::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_roi);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getYUVImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getYUVImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getYUVImage_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCamera__Camera__getYUVImage_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cam);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::__begin_getYUVImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
            ::RoboCompCamera::imgType __p_roi;
            ::RoboCompCommonHead::THeadState __p_hState;
            ::RoboCompGenericBase::TBaseState __p_bState;
            try
            {
                __proxy->end_getYUVImage(__p_roi, __p_hState, __p_bState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_roi, __p_hState, __p_bState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)> _response;
    };
    return begin_getYUVImage(__p_cam, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCamera::Camera::end_getYUVImage(::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getYUVImage_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompCamera::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_roi);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __result->__endReadParams();
}

void
IceProxy::RoboCompCamera::Camera::getYImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCamera__Camera__getYImage_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCamera__Camera__getYImage_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cam);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompCamera::MovingImageException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_roi);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getYImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getYImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getYImage_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCamera__Camera__getYImage_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cam);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::__begin_getYImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
            ::RoboCompCamera::imgType __p_roi;
            ::RoboCompCommonHead::THeadState __p_hState;
            ::RoboCompGenericBase::TBaseState __p_bState;
            try
            {
                __proxy->end_getYImage(__p_roi, __p_hState, __p_bState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_roi, __p_hState, __p_bState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)> _response;
    };
    return begin_getYImage(__p_cam, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCamera::Camera::end_getYImage(::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getYImage_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompCamera::MovingImageException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_roi);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __result->__endReadParams();
}

void
IceProxy::RoboCompCamera::Camera::getYLogPolarImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCamera__Camera__getYLogPolarImage_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCamera__Camera__getYLogPolarImage_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cam);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompCamera::MovingImageException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_roi);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getYLogPolarImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getYLogPolarImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getYLogPolarImage_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCamera__Camera__getYLogPolarImage_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cam);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::__begin_getYLogPolarImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
            ::RoboCompCamera::imgType __p_roi;
            ::RoboCompCommonHead::THeadState __p_hState;
            ::RoboCompGenericBase::TBaseState __p_bState;
            try
            {
                __proxy->end_getYLogPolarImage(__p_roi, __p_hState, __p_bState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_roi, __p_hState, __p_bState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)> _response;
    };
    return begin_getYLogPolarImage(__p_cam, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCamera::Camera::end_getYLogPolarImage(::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getYLogPolarImage_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompCamera::MovingImageException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_roi);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __result->__endReadParams();
}

void
IceProxy::RoboCompCamera::Camera::getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCamera__Camera__getYImageCR_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCamera__Camera__getYImageCR_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cam);
        __os->write(__p_div);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompCamera::MovingImageException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_roi);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getYImageCR_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getYImageCR_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCamera__Camera__getYImageCR_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cam);
        __os->write(__p_div);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::__begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
            ::RoboCompCamera::imgType __p_roi;
            ::RoboCompCommonHead::THeadState __p_hState;
            ::RoboCompGenericBase::TBaseState __p_bState;
            try
            {
                __proxy->end_getYImageCR(__p_roi, __p_hState, __p_bState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_roi, __p_hState, __p_bState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)> _response;
    };
    return begin_getYImageCR(__p_cam, __p_div, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCamera::Camera::end_getYImageCR(::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getYImageCR_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompCamera::MovingImageException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_roi);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __result->__endReadParams();
}

void
IceProxy::RoboCompCamera::Camera::getRGBPackedImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCamera__Camera__getRGBPackedImage_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCamera__Camera__getRGBPackedImage_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cam);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompCamera::MovingImageException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_roi);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getRGBPackedImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getRGBPackedImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getRGBPackedImage_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCamera__Camera__getRGBPackedImage_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cam);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::__begin_getRGBPackedImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
            ::RoboCompCamera::imgType __p_roi;
            ::RoboCompCommonHead::THeadState __p_hState;
            ::RoboCompGenericBase::TBaseState __p_bState;
            try
            {
                __proxy->end_getRGBPackedImage(__p_roi, __p_hState, __p_bState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_roi, __p_hState, __p_bState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)> _response;
    };
    return begin_getRGBPackedImage(__p_cam, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCamera::Camera::end_getRGBPackedImage(::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getRGBPackedImage_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompCamera::MovingImageException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_roi);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __result->__endReadParams();
}

void
IceProxy::RoboCompCamera::Camera::getYRGBImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCamera__Camera__getYRGBImage_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCamera__Camera__getYRGBImage_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cam);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompCamera::MovingImageException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_roi);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getYRGBImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getYRGBImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getYRGBImage_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCamera__Camera__getYRGBImage_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cam);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::__begin_getYRGBImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
            ::RoboCompCamera::imgType __p_roi;
            ::RoboCompCommonHead::THeadState __p_hState;
            ::RoboCompGenericBase::TBaseState __p_bState;
            try
            {
                __proxy->end_getYRGBImage(__p_roi, __p_hState, __p_bState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_roi, __p_hState, __p_bState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)> _response;
    };
    return begin_getYRGBImage(__p_cam, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCamera::Camera::end_getYRGBImage(::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getYRGBImage_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompCamera::MovingImageException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_roi);
    __is->read(__p_hState);
    __is->read(__p_bState);
    __result->__endReadParams();
}

::RoboCompCamera::TCamParams
IceProxy::RoboCompCamera::Camera::getCamParams(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCamera__Camera__getCamParams_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCamera__Camera__getCamParams_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompCamera::TCamParams __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_getCamParams(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCamera__Camera__getCamParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__getCamParams_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCamera__Camera__getCamParams_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::__begin_getCamParams(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::TCamParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompCamera::TCamParams&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
            ::RoboCompCamera::TCamParams __ret;
            try
            {
                __ret = __proxy->end_getCamParams(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompCamera::TCamParams&)> _response;
    };
    return begin_getCamParams(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompCamera::TCamParams
IceProxy::RoboCompCamera::Camera::end_getCamParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCamera__Camera__getCamParams_name);
    ::RoboCompCamera::TCamParams __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::RoboCompCamera::Camera::setInnerImage(const ::RoboCompCamera::imgType& __p_roi, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompCamera__Camera__setInnerImage_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_roi);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCamera::Camera::begin_setInnerImage(const ::RoboCompCamera::imgType& __p_roi, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCamera__Camera__setInnerImage_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCamera__Camera__setInnerImage_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_roi);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCamera::Camera::end_setInnerImage(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompCamera__Camera__setInnerImage_name);
}

const ::std::string&
IceProxy::RoboCompCamera::Camera::ice_staticId()
{
    return ::RoboCompCamera::Camera::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompCamera::Camera::__newInstance() const
{
    return new Camera;
}

::Ice::Object* RoboCompCamera::upCast(::RoboCompCamera::Camera* p) { return p; }

namespace
{
const ::std::string __RoboCompCamera__Camera_ids[2] =
{
    "::Ice::Object",
    "::RoboCompCamera::Camera"
};

}

bool
RoboCompCamera::Camera::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompCamera__Camera_ids, __RoboCompCamera__Camera_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompCamera::Camera::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompCamera__Camera_ids[0], &__RoboCompCamera__Camera_ids[2]);
}

const ::std::string&
RoboCompCamera::Camera::ice_id(const ::Ice::Current&) const
{
    return __RoboCompCamera__Camera_ids[1];
}

const ::std::string&
RoboCompCamera::Camera::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompCamera::Camera";
    return typeId;
#else
    return __RoboCompCamera__Camera_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getYUVImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_cam;
    __is->read(__p_cam);
    __inS.endReadParams();
    ::RoboCompCamera::imgType __p_roi;
    ::RoboCompCommonHead::THeadState __p_hState;
    ::RoboCompGenericBase::TBaseState __p_bState;
    try
    {
        getYUVImage(__p_cam, __p_roi, __p_hState, __p_bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_roi);
        __os->write(__p_hState);
        __os->write(__p_bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompCamera::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getYImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_cam;
    __is->read(__p_cam);
    __inS.endReadParams();
    ::RoboCompCamera::imgType __p_roi;
    ::RoboCompCommonHead::THeadState __p_hState;
    ::RoboCompGenericBase::TBaseState __p_bState;
    try
    {
        getYImage(__p_cam, __p_roi, __p_hState, __p_bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_roi);
        __os->write(__p_hState);
        __os->write(__p_bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompCamera::MovingImageException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getYLogPolarImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_cam;
    __is->read(__p_cam);
    __inS.endReadParams();
    ::RoboCompCamera::imgType __p_roi;
    ::RoboCompCommonHead::THeadState __p_hState;
    ::RoboCompGenericBase::TBaseState __p_bState;
    try
    {
        getYLogPolarImage(__p_cam, __p_roi, __p_hState, __p_bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_roi);
        __os->write(__p_hState);
        __os->write(__p_bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompCamera::MovingImageException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getYImageCR(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_cam;
    ::Ice::Int __p_div;
    __is->read(__p_cam);
    __is->read(__p_div);
    __inS.endReadParams();
    ::RoboCompCamera::imgType __p_roi;
    ::RoboCompCommonHead::THeadState __p_hState;
    ::RoboCompGenericBase::TBaseState __p_bState;
    try
    {
        getYImageCR(__p_cam, __p_div, __p_roi, __p_hState, __p_bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_roi);
        __os->write(__p_hState);
        __os->write(__p_bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompCamera::MovingImageException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getRGBPackedImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_cam;
    __is->read(__p_cam);
    __inS.endReadParams();
    ::RoboCompCamera::imgType __p_roi;
    ::RoboCompCommonHead::THeadState __p_hState;
    ::RoboCompGenericBase::TBaseState __p_bState;
    try
    {
        getRGBPackedImage(__p_cam, __p_roi, __p_hState, __p_bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_roi);
        __os->write(__p_hState);
        __os->write(__p_bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompCamera::MovingImageException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getYRGBImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_cam;
    __is->read(__p_cam);
    __inS.endReadParams();
    ::RoboCompCamera::imgType __p_roi;
    ::RoboCompCommonHead::THeadState __p_hState;
    ::RoboCompGenericBase::TBaseState __p_bState;
    try
    {
        getYRGBImage(__p_cam, __p_roi, __p_hState, __p_bState, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_roi);
        __os->write(__p_hState);
        __os->write(__p_bState);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompCamera::MovingImageException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___getCamParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompCamera::TCamParams __ret = getCamParams(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCamera::Camera::___setInnerImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompCamera::imgType __p_roi;
    __is->read(__p_roi);
    __inS.endReadParams();
    setInnerImage(__p_roi, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompCamera__Camera_all[] =
{
    "getCamParams",
    "getRGBPackedImage",
    "getYImage",
    "getYImageCR",
    "getYLogPolarImage",
    "getYRGBImage",
    "getYUVImage",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setInnerImage"
};

}

::Ice::DispatchStatus
RoboCompCamera::Camera::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompCamera__Camera_all, __RoboCompCamera__Camera_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompCamera__Camera_all)
    {
        case 0:
        {
            return ___getCamParams(in, current);
        }
        case 1:
        {
            return ___getRGBPackedImage(in, current);
        }
        case 2:
        {
            return ___getYImage(in, current);
        }
        case 3:
        {
            return ___getYImageCR(in, current);
        }
        case 4:
        {
            return ___getYLogPolarImage(in, current);
        }
        case 5:
        {
            return ___getYRGBImage(in, current);
        }
        case 6:
        {
            return ___getYUVImage(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
        case 11:
        {
            return ___setInnerImage(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompCamera::Camera::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompCamera::Camera::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompCamera::__patch(CameraPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompCamera::CameraPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompCamera::Camera::ice_staticId(), v);
    }
}
