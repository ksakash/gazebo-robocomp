// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `Exceptions.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Exceptions.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/BasicStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompExceptions::RoboCompException> __RoboCompExceptions__RoboCompException_init("::RoboCompExceptions::RoboCompException");

}

RoboCompExceptions::RoboCompException::RoboCompException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompExceptions::RoboCompException::~RoboCompException() throw()
{
}

::std::string
RoboCompExceptions::RoboCompException::ice_name() const
{
    return "RoboCompExceptions::RoboCompException";
}

RoboCompExceptions::RoboCompException*
RoboCompExceptions::RoboCompException::ice_clone() const
{
    return new RoboCompException(*this);
}

void
RoboCompExceptions::RoboCompException::ice_throw() const
{
    throw *this;
}

void
RoboCompExceptions::RoboCompException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompExceptions::RoboCompException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompExceptions::RoboCompException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompExceptions::ConfigurationNotExistException> __RoboCompExceptions__ConfigurationNotExistException_init("::RoboCompExceptions::ConfigurationNotExistException");

}

RoboCompExceptions::ConfigurationNotExistException::ConfigurationNotExistException(const ::std::string& __ice_what) :
    ::RoboCompExceptions::RoboCompException(__ice_what)
{
}

RoboCompExceptions::ConfigurationNotExistException::~ConfigurationNotExistException() throw()
{
}

::std::string
RoboCompExceptions::ConfigurationNotExistException::ice_name() const
{
    return "RoboCompExceptions::ConfigurationNotExistException";
}

RoboCompExceptions::ConfigurationNotExistException*
RoboCompExceptions::ConfigurationNotExistException::ice_clone() const
{
    return new ConfigurationNotExistException(*this);
}

void
RoboCompExceptions::ConfigurationNotExistException::ice_throw() const
{
    throw *this;
}

void
RoboCompExceptions::ConfigurationNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompExceptions::ConfigurationNotExistException", -1, false);
    __os->endWriteSlice();
    ::RoboCompExceptions::RoboCompException::__writeImpl(__os);
}

void
RoboCompExceptions::ConfigurationNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::RoboCompExceptions::RoboCompException::__readImpl(__is);
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompExceptions::DataNotExistException> __RoboCompExceptions__DataNotExistException_init("::RoboCompExceptions::DataNotExistException");

}

RoboCompExceptions::DataNotExistException::DataNotExistException(const ::std::string& __ice_what) :
    ::RoboCompExceptions::RoboCompException(__ice_what)
{
}

RoboCompExceptions::DataNotExistException::~DataNotExistException() throw()
{
}

::std::string
RoboCompExceptions::DataNotExistException::ice_name() const
{
    return "RoboCompExceptions::DataNotExistException";
}

RoboCompExceptions::DataNotExistException*
RoboCompExceptions::DataNotExistException::ice_clone() const
{
    return new DataNotExistException(*this);
}

void
RoboCompExceptions::DataNotExistException::ice_throw() const
{
    throw *this;
}

void
RoboCompExceptions::DataNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompExceptions::DataNotExistException", -1, false);
    __os->endWriteSlice();
    ::RoboCompExceptions::RoboCompException::__writeImpl(__os);
}

void
RoboCompExceptions::DataNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::RoboCompExceptions::RoboCompException::__readImpl(__is);
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompExceptions::HardwareFailedException> __RoboCompExceptions__HardwareFailedException_init("::RoboCompExceptions::HardwareFailedException");

}

RoboCompExceptions::HardwareFailedException::HardwareFailedException(const ::std::string& __ice_what) :
    ::RoboCompExceptions::RoboCompException(__ice_what)
{
}

RoboCompExceptions::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompExceptions::HardwareFailedException::ice_name() const
{
    return "RoboCompExceptions::HardwareFailedException";
}

RoboCompExceptions::HardwareFailedException*
RoboCompExceptions::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompExceptions::HardwareFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompExceptions::HardwareFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompExceptions::HardwareFailedException", -1, false);
    __os->endWriteSlice();
    ::RoboCompExceptions::RoboCompException::__writeImpl(__os);
}

void
RoboCompExceptions::HardwareFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::RoboCompExceptions::RoboCompException::__readImpl(__is);
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompExceptions::NoTopicException> __RoboCompExceptions__NoTopicException_init("::RoboCompExceptions::NoTopicException");

}

RoboCompExceptions::NoTopicException::NoTopicException(const ::std::string& __ice_what) :
    ::RoboCompExceptions::RoboCompException(__ice_what)
{
}

RoboCompExceptions::NoTopicException::~NoTopicException() throw()
{
}

::std::string
RoboCompExceptions::NoTopicException::ice_name() const
{
    return "RoboCompExceptions::NoTopicException";
}

RoboCompExceptions::NoTopicException*
RoboCompExceptions::NoTopicException::ice_clone() const
{
    return new NoTopicException(*this);
}

void
RoboCompExceptions::NoTopicException::ice_throw() const
{
    throw *this;
}

void
RoboCompExceptions::NoTopicException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompExceptions::NoTopicException", -1, false);
    __os->endWriteSlice();
    ::RoboCompExceptions::RoboCompException::__writeImpl(__os);
}

void
RoboCompExceptions::NoTopicException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::RoboCompExceptions::RoboCompException::__readImpl(__is);
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompExceptions::SubscriptionFailedException> __RoboCompExceptions__SubscriptionFailedException_init("::RoboCompExceptions::SubscriptionFailedException");

}

RoboCompExceptions::SubscriptionFailedException::SubscriptionFailedException(const ::std::string& __ice_what) :
    ::RoboCompExceptions::RoboCompException(__ice_what)
{
}

RoboCompExceptions::SubscriptionFailedException::~SubscriptionFailedException() throw()
{
}

::std::string
RoboCompExceptions::SubscriptionFailedException::ice_name() const
{
    return "RoboCompExceptions::SubscriptionFailedException";
}

RoboCompExceptions::SubscriptionFailedException*
RoboCompExceptions::SubscriptionFailedException::ice_clone() const
{
    return new SubscriptionFailedException(*this);
}

void
RoboCompExceptions::SubscriptionFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompExceptions::SubscriptionFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompExceptions::SubscriptionFailedException", -1, false);
    __os->endWriteSlice();
    ::RoboCompExceptions::RoboCompException::__writeImpl(__os);
}

void
RoboCompExceptions::SubscriptionFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::RoboCompExceptions::RoboCompException::__readImpl(__is);
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompExceptions::SubscriptionPushFailedException> __RoboCompExceptions__SubscriptionPushFailedException_init("::RoboCompExceptions::SubscriptionPushFailedException");

}

RoboCompExceptions::SubscriptionPushFailedException::SubscriptionPushFailedException(const ::std::string& __ice_what) :
    ::RoboCompExceptions::RoboCompException(__ice_what)
{
}

RoboCompExceptions::SubscriptionPushFailedException::~SubscriptionPushFailedException() throw()
{
}

::std::string
RoboCompExceptions::SubscriptionPushFailedException::ice_name() const
{
    return "RoboCompExceptions::SubscriptionPushFailedException";
}

RoboCompExceptions::SubscriptionPushFailedException*
RoboCompExceptions::SubscriptionPushFailedException::ice_clone() const
{
    return new SubscriptionPushFailedException(*this);
}

void
RoboCompExceptions::SubscriptionPushFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompExceptions::SubscriptionPushFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompExceptions::SubscriptionPushFailedException", -1, false);
    __os->endWriteSlice();
    ::RoboCompExceptions::RoboCompException::__writeImpl(__os);
}

void
RoboCompExceptions::SubscriptionPushFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::RoboCompExceptions::RoboCompException::__readImpl(__is);
}

namespace Ice
{
}
