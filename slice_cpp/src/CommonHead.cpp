// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `CommonHead.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <CommonHead.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompCommonHead__CommonHead__resetHead_name = "resetHead";

const ::std::string __RoboCompCommonHead__CommonHead__stopHead_name = "stopHead";

const ::std::string __RoboCompCommonHead__CommonHead__setPanLeft_name = "setPanLeft";

const ::std::string __RoboCompCommonHead__CommonHead__setPanRight_name = "setPanRight";

const ::std::string __RoboCompCommonHead__CommonHead__setTilt_name = "setTilt";

const ::std::string __RoboCompCommonHead__CommonHead__setNeck_name = "setNeck";

const ::std::string __RoboCompCommonHead__CommonHead__saccadic2DLeft_name = "saccadic2DLeft";

const ::std::string __RoboCompCommonHead__CommonHead__saccadic2DRight_name = "saccadic2DRight";

const ::std::string __RoboCompCommonHead__CommonHead__saccadic3D_name = "saccadic3D";

const ::std::string __RoboCompCommonHead__CommonHead__saccadic4D_name = "saccadic4D";

const ::std::string __RoboCompCommonHead__CommonHead__setNMotorsPosition_name = "setNMotorsPosition";

const ::std::string __RoboCompCommonHead__CommonHead__getHeadParams_name = "getHeadParams";

const ::std::string __RoboCompCommonHead__CommonHead__getHeadState_name = "getHeadState";

const ::std::string __RoboCompCommonHead__CommonHead__isMovingHead_name = "isMovingHead";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompCommonHead::upCast(::IceProxy::RoboCompCommonHead::CommonHead* p) { return p; }

void
::IceProxy::RoboCompCommonHead::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCommonHead::CommonHead>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompCommonHead::CommonHead;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompCommonHead::CommonHead::resetHead(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__resetHead_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_resetHead(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__resetHead_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__resetHead_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_resetHead(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompCommonHead__CommonHead__resetHead_name);
}

void
IceProxy::RoboCompCommonHead::CommonHead::stopHead(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__stopHead_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_stopHead(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__stopHead_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__stopHead_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_stopHead(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompCommonHead__CommonHead__stopHead_name);
}

void
IceProxy::RoboCompCommonHead::CommonHead::setPanLeft(::Ice::Float __p_pan, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonHead__CommonHead__setPanLeft_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__setPanLeft_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_pan);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_setPanLeft(::Ice::Float __p_pan, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonHead__CommonHead__setPanLeft_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__setPanLeft_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__setPanLeft_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_pan);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::__begin_setPanLeft(::Ice::Float __p_pan, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setPanLeft(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setPanLeft(__p_pan, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCommonHead::CommonHead::end_setPanLeft(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonHead__CommonHead__setPanLeft_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompCommonHead::CommonHead::setPanRight(::Ice::Float __p_pan, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonHead__CommonHead__setPanRight_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__setPanRight_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_pan);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_setPanRight(::Ice::Float __p_pan, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonHead__CommonHead__setPanRight_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__setPanRight_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__setPanRight_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_pan);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::__begin_setPanRight(::Ice::Float __p_pan, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setPanRight(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setPanRight(__p_pan, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCommonHead::CommonHead::end_setPanRight(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonHead__CommonHead__setPanRight_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompCommonHead::CommonHead::setTilt(::Ice::Float __p_tilt, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonHead__CommonHead__setTilt_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__setTilt_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_tilt);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_setTilt(::Ice::Float __p_tilt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonHead__CommonHead__setTilt_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__setTilt_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__setTilt_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_tilt);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::__begin_setTilt(::Ice::Float __p_tilt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setTilt(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setTilt(__p_tilt, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCommonHead::CommonHead::end_setTilt(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonHead__CommonHead__setTilt_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompCommonHead::CommonHead::setNeck(::Ice::Float __p_neck, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonHead__CommonHead__setNeck_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__setNeck_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_neck);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_setNeck(::Ice::Float __p_neck, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonHead__CommonHead__setNeck_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__setNeck_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__setNeck_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_neck);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::__begin_setNeck(::Ice::Float __p_neck, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setNeck(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setNeck(__p_neck, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCommonHead::CommonHead::end_setNeck(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonHead__CommonHead__setNeck_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompCommonHead::CommonHead::saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonHead__CommonHead__saccadic2DLeft_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__saccadic2DLeft_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_leftPan);
        __os->write(__p_tilt);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonHead__CommonHead__saccadic2DLeft_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__saccadic2DLeft_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__saccadic2DLeft_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_leftPan);
        __os->write(__p_tilt);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::__begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_saccadic2DLeft(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_saccadic2DLeft(__p_leftPan, __p_tilt, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCommonHead::CommonHead::end_saccadic2DLeft(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonHead__CommonHead__saccadic2DLeft_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompCommonHead::CommonHead::saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonHead__CommonHead__saccadic2DRight_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__saccadic2DRight_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_rightPan);
        __os->write(__p_tilt);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonHead__CommonHead__saccadic2DRight_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__saccadic2DRight_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__saccadic2DRight_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_rightPan);
        __os->write(__p_tilt);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::__begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_saccadic2DRight(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_saccadic2DRight(__p_rightPan, __p_tilt, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCommonHead::CommonHead::end_saccadic2DRight(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonHead__CommonHead__saccadic2DRight_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompCommonHead::CommonHead::saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonHead__CommonHead__saccadic3D_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__saccadic3D_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_leftPan);
        __os->write(__p_rightPan);
        __os->write(__p_tilt);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonHead__CommonHead__saccadic3D_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__saccadic3D_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__saccadic3D_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_leftPan);
        __os->write(__p_rightPan);
        __os->write(__p_tilt);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::__begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_saccadic3D(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCommonHead::CommonHead::end_saccadic3D(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonHead__CommonHead__saccadic3D_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompCommonHead::CommonHead::saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonHead__CommonHead__saccadic4D_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__saccadic4D_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_leftPan);
        __os->write(__p_rightPan);
        __os->write(__p_tilt);
        __os->write(__p_neck);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonHead__CommonHead__saccadic4D_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__saccadic4D_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__saccadic4D_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_leftPan);
        __os->write(__p_rightPan);
        __os->write(__p_tilt);
        __os->write(__p_neck);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::__begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_saccadic4D(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCommonHead::CommonHead::end_saccadic4D(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonHead__CommonHead__saccadic4D_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompCommonHead::CommonHead::setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonHead__CommonHead__setNMotorsPosition_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__setNMotorsPosition_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listGoals);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonHead__CommonHead__setNMotorsPosition_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__setNMotorsPosition_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__setNMotorsPosition_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listGoals);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::__begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setNMotorsPosition(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setNMotorsPosition(__p_listGoals, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCommonHead::CommonHead::end_setNMotorsPosition(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonHead__CommonHead__setNMotorsPosition_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::RoboCompCommonHead::THeadParams
IceProxy::RoboCompCommonHead::CommonHead::getHeadParams(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonHead__CommonHead__getHeadParams_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__getHeadParams_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompCommonHead::THeadParams __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadParams(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonHead__CommonHead__getHeadParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__getHeadParams_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__getHeadParams_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::__begin_getHeadParams(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCommonHead::THeadParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompCommonHead::THeadParams&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
            ::RoboCompCommonHead::THeadParams __ret;
            try
            {
                __ret = __proxy->end_getHeadParams(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompCommonHead::THeadParams&)> _response;
    };
    return begin_getHeadParams(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompCommonHead::THeadParams
IceProxy::RoboCompCommonHead::CommonHead::end_getHeadParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonHead__CommonHead__getHeadParams_name);
    ::RoboCompCommonHead::THeadParams __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::RoboCompCommonHead::CommonHead::getHeadState(::RoboCompCommonHead::THeadState& __p_hState, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonHead__CommonHead__getHeadState_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__getHeadState_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_hState);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_getHeadState(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonHead__CommonHead__getHeadState_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__getHeadState_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__getHeadState_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::__begin_getHeadState(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCommonHead::THeadState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompCommonHead::THeadState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
            ::RoboCompCommonHead::THeadState __p_hState;
            try
            {
                __proxy->end_getHeadState(__p_hState, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_hState);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompCommonHead::THeadState&)> _response;
    };
    return begin_getHeadState(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompCommonHead::CommonHead::end_getHeadState(::RoboCompCommonHead::THeadState& __p_hState, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonHead__CommonHead__getHeadState_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_hState);
    __result->__endReadParams();
}

bool
IceProxy::RoboCompCommonHead::CommonHead::isMovingHead(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonHead__CommonHead__isMovingHead_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonHead__CommonHead__isMovingHead_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::begin_isMovingHead(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonHead__CommonHead__isMovingHead_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonHead__CommonHead__isMovingHead_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonHead__CommonHead__isMovingHead_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::__begin_isMovingHead(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
            bool __ret;
            try
            {
                __ret = __proxy->end_isMovingHead(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (bool)> _response;
    };
    return begin_isMovingHead(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::RoboCompCommonHead::CommonHead::end_isMovingHead(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonHead__CommonHead__isMovingHead_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::RoboCompCommonHead::CommonHead::ice_staticId()
{
    return ::RoboCompCommonHead::CommonHead::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompCommonHead::CommonHead::__newInstance() const
{
    return new CommonHead;
}

::Ice::Object* RoboCompCommonHead::upCast(::RoboCompCommonHead::CommonHead* p) { return p; }

namespace
{
const ::std::string __RoboCompCommonHead__CommonHead_ids[2] =
{
    "::Ice::Object",
    "::RoboCompCommonHead::CommonHead"
};

}

bool
RoboCompCommonHead::CommonHead::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompCommonHead__CommonHead_ids, __RoboCompCommonHead__CommonHead_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompCommonHead::CommonHead::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompCommonHead__CommonHead_ids[0], &__RoboCompCommonHead__CommonHead_ids[2]);
}

const ::std::string&
RoboCompCommonHead::CommonHead::ice_id(const ::Ice::Current&) const
{
    return __RoboCompCommonHead__CommonHead_ids[1];
}

const ::std::string&
RoboCompCommonHead::CommonHead::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompCommonHead::CommonHead";
    return typeId;
#else
    return __RoboCompCommonHead__CommonHead_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___resetHead(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    resetHead(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___stopHead(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    stopHead(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___setPanLeft(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float __p_pan;
    __is->read(__p_pan);
    __inS.endReadParams();
    try
    {
        setPanLeft(__p_pan, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::OutOfRangeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___setPanRight(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float __p_pan;
    __is->read(__p_pan);
    __inS.endReadParams();
    try
    {
        setPanRight(__p_pan, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::OutOfRangeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___setTilt(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float __p_tilt;
    __is->read(__p_tilt);
    __inS.endReadParams();
    try
    {
        setTilt(__p_tilt, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::OutOfRangeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___setNeck(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float __p_neck;
    __is->read(__p_neck);
    __inS.endReadParams();
    try
    {
        setNeck(__p_neck, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::OutOfRangeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___saccadic2DLeft(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float __p_leftPan;
    ::Ice::Float __p_tilt;
    __is->read(__p_leftPan);
    __is->read(__p_tilt);
    __inS.endReadParams();
    try
    {
        saccadic2DLeft(__p_leftPan, __p_tilt, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::OutOfRangeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___saccadic2DRight(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float __p_rightPan;
    ::Ice::Float __p_tilt;
    __is->read(__p_rightPan);
    __is->read(__p_tilt);
    __inS.endReadParams();
    try
    {
        saccadic2DRight(__p_rightPan, __p_tilt, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::OutOfRangeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___saccadic3D(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float __p_leftPan;
    ::Ice::Float __p_rightPan;
    ::Ice::Float __p_tilt;
    __is->read(__p_leftPan);
    __is->read(__p_rightPan);
    __is->read(__p_tilt);
    __inS.endReadParams();
    try
    {
        saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::OutOfRangeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___saccadic4D(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Float __p_leftPan;
    ::Ice::Float __p_rightPan;
    ::Ice::Float __p_tilt;
    ::Ice::Float __p_neck;
    __is->read(__p_leftPan);
    __is->read(__p_rightPan);
    __is->read(__p_tilt);
    __is->read(__p_neck);
    __inS.endReadParams();
    try
    {
        saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::OutOfRangeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___setNMotorsPosition(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalPositionList __p_listGoals;
    __is->read(__p_listGoals);
    __inS.endReadParams();
    try
    {
        setNMotorsPosition(__p_listGoals, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::OutOfRangeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___getHeadParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompCommonHead::THeadParams __ret = getHeadParams(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___getHeadState(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompCommonHead::THeadState __p_hState;
    getHeadState(__p_hState, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_hState);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::___isMovingHead(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    bool __ret = isMovingHead(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompCommonHead__CommonHead_all[] =
{
    "getHeadParams",
    "getHeadState",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isMovingHead",
    "resetHead",
    "saccadic2DLeft",
    "saccadic2DRight",
    "saccadic3D",
    "saccadic4D",
    "setNMotorsPosition",
    "setNeck",
    "setPanLeft",
    "setPanRight",
    "setTilt",
    "stopHead"
};

}

::Ice::DispatchStatus
RoboCompCommonHead::CommonHead::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompCommonHead__CommonHead_all, __RoboCompCommonHead__CommonHead_all + 18, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompCommonHead__CommonHead_all)
    {
        case 0:
        {
            return ___getHeadParams(in, current);
        }
        case 1:
        {
            return ___getHeadState(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___isMovingHead(in, current);
        }
        case 7:
        {
            return ___resetHead(in, current);
        }
        case 8:
        {
            return ___saccadic2DLeft(in, current);
        }
        case 9:
        {
            return ___saccadic2DRight(in, current);
        }
        case 10:
        {
            return ___saccadic3D(in, current);
        }
        case 11:
        {
            return ___saccadic4D(in, current);
        }
        case 12:
        {
            return ___setNMotorsPosition(in, current);
        }
        case 13:
        {
            return ___setNeck(in, current);
        }
        case 14:
        {
            return ___setPanLeft(in, current);
        }
        case 15:
        {
            return ___setPanRight(in, current);
        }
        case 16:
        {
            return ___setTilt(in, current);
        }
        case 17:
        {
            return ___stopHead(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompCommonHead::CommonHead::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompCommonHead::CommonHead::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompCommonHead::__patch(CommonHeadPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompCommonHead::CommonHeadPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompCommonHead::CommonHead::ice_staticId(), v);
    }
}
