// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `JointMotor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <JointMotor.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompJointMotor__JointMotor__setPosition_name = "setPosition";

const ::std::string __RoboCompJointMotor__JointMotor__setVelocity_name = "setVelocity";

const ::std::string __RoboCompJointMotor__JointMotor__setZeroPos_name = "setZeroPos";

const ::std::string __RoboCompJointMotor__JointMotor__setSyncPosition_name = "setSyncPosition";

const ::std::string __RoboCompJointMotor__JointMotor__setSyncVelocity_name = "setSyncVelocity";

const ::std::string __RoboCompJointMotor__JointMotor__setSyncZeroPos_name = "setSyncZeroPos";

const ::std::string __RoboCompJointMotor__JointMotor__getMotorParams_name = "getMotorParams";

const ::std::string __RoboCompJointMotor__JointMotor__getMotorState_name = "getMotorState";

const ::std::string __RoboCompJointMotor__JointMotor__getMotorStateMap_name = "getMotorStateMap";

const ::std::string __RoboCompJointMotor__JointMotor__getAllMotorState_name = "getAllMotorState";

const ::std::string __RoboCompJointMotor__JointMotor__getAllMotorParams_name = "getAllMotorParams";

const ::std::string __RoboCompJointMotor__JointMotor__getBusParams_name = "getBusParams";

const ::std::string __RoboCompJointMotor__JointMotorPublish__motorStates_name = "motorStates";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompJointMotor::HardwareFailedException> __RoboCompJointMotor__HardwareFailedException_init("::RoboCompJointMotor::HardwareFailedException");

}

RoboCompJointMotor::HardwareFailedException::HardwareFailedException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompJointMotor::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompJointMotor::HardwareFailedException::ice_name() const
{
    return "RoboCompJointMotor::HardwareFailedException";
}

RoboCompJointMotor::HardwareFailedException*
RoboCompJointMotor::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompJointMotor::HardwareFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompJointMotor::HardwareFailedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompJointMotor::HardwareFailedException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompJointMotor::HardwareFailedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompJointMotor::OutOfRangeException> __RoboCompJointMotor__OutOfRangeException_init("::RoboCompJointMotor::OutOfRangeException");

}

RoboCompJointMotor::OutOfRangeException::OutOfRangeException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompJointMotor::OutOfRangeException::~OutOfRangeException() throw()
{
}

::std::string
RoboCompJointMotor::OutOfRangeException::ice_name() const
{
    return "RoboCompJointMotor::OutOfRangeException";
}

RoboCompJointMotor::OutOfRangeException*
RoboCompJointMotor::OutOfRangeException::ice_clone() const
{
    return new OutOfRangeException(*this);
}

void
RoboCompJointMotor::OutOfRangeException::ice_throw() const
{
    throw *this;
}

void
RoboCompJointMotor::OutOfRangeException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompJointMotor::OutOfRangeException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompJointMotor::OutOfRangeException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompJointMotor::UnknownMotorException> __RoboCompJointMotor__UnknownMotorException_init("::RoboCompJointMotor::UnknownMotorException");

}

RoboCompJointMotor::UnknownMotorException::UnknownMotorException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompJointMotor::UnknownMotorException::~UnknownMotorException() throw()
{
}

::std::string
RoboCompJointMotor::UnknownMotorException::ice_name() const
{
    return "RoboCompJointMotor::UnknownMotorException";
}

RoboCompJointMotor::UnknownMotorException*
RoboCompJointMotor::UnknownMotorException::ice_clone() const
{
    return new UnknownMotorException(*this);
}

void
RoboCompJointMotor::UnknownMotorException::ice_throw() const
{
    throw *this;
}

void
RoboCompJointMotor::UnknownMotorException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompJointMotor::UnknownMotorException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompJointMotor::UnknownMotorException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompJointMotor::CollisionException> __RoboCompJointMotor__CollisionException_init("::RoboCompJointMotor::CollisionException");

}

RoboCompJointMotor::CollisionException::CollisionException(const ::std::string& __ice_what) :
    ::Ice::UserException(),
    what(__ice_what)
{
}

RoboCompJointMotor::CollisionException::~CollisionException() throw()
{
}

::std::string
RoboCompJointMotor::CollisionException::ice_name() const
{
    return "RoboCompJointMotor::CollisionException";
}

RoboCompJointMotor::CollisionException*
RoboCompJointMotor::CollisionException::ice_clone() const
{
    return new CollisionException(*this);
}

void
RoboCompJointMotor::CollisionException::ice_throw() const
{
    throw *this;
}

void
RoboCompJointMotor::CollisionException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompJointMotor::CollisionException", -1, true);
    __os->write(what);
    __os->endWriteSlice();
}

void
RoboCompJointMotor::CollisionException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(what);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompJointMotor::upCast(::IceProxy::RoboCompJointMotor::JointMotor* p) { return p; }

void
::IceProxy::RoboCompJointMotor::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJointMotor::JointMotor>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompJointMotor::JointMotor;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompJointMotor::JointMotor::setPosition(const ::RoboCompJointMotor::MotorGoalPosition& __p_goal, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompJointMotor__JointMotor__setPosition_name);
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotor__setPosition_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_goal);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::CollisionException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& __p_goal, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__setPosition_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__setPosition_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotor__setPosition_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_goal);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::__begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& __p_goal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setPosition(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setPosition(__p_goal, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompJointMotor::JointMotor::end_setPosition(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__setPosition_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::CollisionException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompJointMotor::JointMotor::setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& __p_goal, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompJointMotor__JointMotor__setVelocity_name);
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotor__setVelocity_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_goal);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& __p_goal, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__setVelocity_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__setVelocity_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotor__setVelocity_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_goal);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::__begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& __p_goal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setVelocity(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setVelocity(__p_goal, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompJointMotor::JointMotor::end_setVelocity(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__setVelocity_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompJointMotor::JointMotor::setZeroPos(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompJointMotor__JointMotor__setZeroPos_name);
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotor__setZeroPos_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_setZeroPos(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__setZeroPos_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__setZeroPos_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotor__setZeroPos_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::__begin_setZeroPos(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setZeroPos(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setZeroPos(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompJointMotor::JointMotor::end_setZeroPos(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__setZeroPos_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompJointMotor::JointMotor::setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompJointMotor__JointMotor__setSyncPosition_name);
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotor__setSyncPosition_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listGoals);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__setSyncPosition_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__setSyncPosition_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotor__setSyncPosition_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listGoals);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::__begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setSyncPosition(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setSyncPosition(__p_listGoals, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompJointMotor::JointMotor::end_setSyncPosition(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__setSyncPosition_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompJointMotor::JointMotor::setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& __p_listGoals, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompJointMotor__JointMotor__setSyncVelocity_name);
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotor__setSyncVelocity_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listGoals);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& __p_listGoals, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__setSyncVelocity_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__setSyncVelocity_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotor__setSyncVelocity_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listGoals);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::__begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& __p_listGoals, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setSyncVelocity(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setSyncVelocity(__p_listGoals, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompJointMotor::JointMotor::end_setSyncVelocity(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__setSyncVelocity_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::RoboCompJointMotor::JointMotor::setSyncZeroPos(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompJointMotor__JointMotor__setSyncZeroPos_name);
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotor__setSyncZeroPos_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_setSyncZeroPos(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__setSyncZeroPos_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__setSyncZeroPos_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotor__setSyncZeroPos_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::__begin_setSyncZeroPos(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_setSyncZeroPos(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_setSyncZeroPos(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompJointMotor::JointMotor::end_setSyncZeroPos(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__setSyncZeroPos_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::RoboCompJointMotor::MotorParams
IceProxy::RoboCompJointMotor::JointMotor::getMotorParams(const ::std::string& __p_motor, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompJointMotor__JointMotor__getMotorParams_name);
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotor__getMotorParams_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_motor);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompJointMotor::MotorParams __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_getMotorParams(const ::std::string& __p_motor, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__getMotorParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__getMotorParams_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotor__getMotorParams_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_motor);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::__begin_getMotorParams(const ::std::string& __p_motor, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompJointMotor::MotorParams&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
            ::RoboCompJointMotor::MotorParams __ret;
            try
            {
                __ret = __proxy->end_getMotorParams(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompJointMotor::MotorParams&)> _response;
    };
    return begin_getMotorParams(__p_motor, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompJointMotor::MotorParams
IceProxy::RoboCompJointMotor::JointMotor::end_getMotorParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__getMotorParams_name);
    ::RoboCompJointMotor::MotorParams __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::RoboCompJointMotor::MotorState
IceProxy::RoboCompJointMotor::JointMotor::getMotorState(const ::std::string& __p_motor, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompJointMotor__JointMotor__getMotorState_name);
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotor__getMotorState_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_motor);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompJointMotor::MotorState __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_getMotorState(const ::std::string& __p_motor, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__getMotorState_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__getMotorState_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotor__getMotorState_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_motor);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::__begin_getMotorState(const ::std::string& __p_motor, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompJointMotor::MotorState&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
            ::RoboCompJointMotor::MotorState __ret;
            try
            {
                __ret = __proxy->end_getMotorState(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompJointMotor::MotorState&)> _response;
    };
    return begin_getMotorState(__p_motor, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompJointMotor::MotorState
IceProxy::RoboCompJointMotor::JointMotor::end_getMotorState(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__getMotorState_name);
    ::RoboCompJointMotor::MotorState __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::RoboCompJointMotor::MotorStateMap
IceProxy::RoboCompJointMotor::JointMotor::getMotorStateMap(const ::RoboCompJointMotor::MotorList& __p_mList, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompJointMotor__JointMotor__getMotorStateMap_name);
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotor__getMotorStateMap_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_mList);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompJointMotor::MotorStateMap __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& __p_mList, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__getMotorStateMap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__getMotorStateMap_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotor__getMotorStateMap_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_mList);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::__begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& __p_mList, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorStateMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompJointMotor::MotorStateMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
            ::RoboCompJointMotor::MotorStateMap __ret;
            try
            {
                __ret = __proxy->end_getMotorStateMap(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompJointMotor::MotorStateMap&)> _response;
    };
    return begin_getMotorStateMap(__p_mList, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompJointMotor::MotorStateMap
IceProxy::RoboCompJointMotor::JointMotor::end_getMotorStateMap(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__getMotorStateMap_name);
    ::RoboCompJointMotor::MotorStateMap __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::RoboCompJointMotor::JointMotor::getAllMotorState(::RoboCompJointMotor::MotorStateMap& __p_mstateMap, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompJointMotor__JointMotor__getAllMotorState_name);
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotor__getAllMotorState_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_mstateMap);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_getAllMotorState(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__getAllMotorState_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__getAllMotorState_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotor__getAllMotorState_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::__begin_getAllMotorState(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorStateMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompJointMotor::MotorStateMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
            ::RoboCompJointMotor::MotorStateMap __p_mstateMap;
            try
            {
                __proxy->end_getAllMotorState(__p_mstateMap, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_mstateMap);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompJointMotor::MotorStateMap&)> _response;
    };
    return begin_getAllMotorState(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompJointMotor::JointMotor::end_getAllMotorState(::RoboCompJointMotor::MotorStateMap& __p_mstateMap, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__getAllMotorState_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_mstateMap);
    __result->__endReadParams();
}

::RoboCompJointMotor::MotorParamsList
IceProxy::RoboCompJointMotor::JointMotor::getAllMotorParams(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompJointMotor__JointMotor__getAllMotorParams_name);
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotor__getAllMotorParams_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompJointMotor::MotorParamsList __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_getAllMotorParams(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__getAllMotorParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__getAllMotorParams_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotor__getAllMotorParams_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::__begin_getAllMotorParams(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::MotorParamsList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompJointMotor::MotorParamsList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
            ::RoboCompJointMotor::MotorParamsList __ret;
            try
            {
                __ret = __proxy->end_getAllMotorParams(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompJointMotor::MotorParamsList&)> _response;
    };
    return begin_getAllMotorParams(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompJointMotor::MotorParamsList
IceProxy::RoboCompJointMotor::JointMotor::end_getAllMotorParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__getAllMotorParams_name);
    ::RoboCompJointMotor::MotorParamsList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::RoboCompJointMotor::BusParams
IceProxy::RoboCompJointMotor::JointMotor::getBusParams(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompJointMotor__JointMotor__getBusParams_name);
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotor__getBusParams_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompJointMotor::BusParams __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::begin_getBusParams(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompJointMotor__JointMotor__getBusParams_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotor__getBusParams_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotor__getBusParams_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::__begin_getBusParams(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompJointMotor::BusParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompJointMotor::BusParams&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompJointMotor::JointMotorPrx __proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(__result->getProxy());
            ::RoboCompJointMotor::BusParams __ret;
            try
            {
                __ret = __proxy->end_getBusParams(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompJointMotor::BusParams&)> _response;
    };
    return begin_getBusParams(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompJointMotor::BusParams
IceProxy::RoboCompJointMotor::JointMotor::end_getBusParams(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompJointMotor__JointMotor__getBusParams_name);
    ::RoboCompJointMotor::BusParams __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::RoboCompJointMotor::JointMotor::ice_staticId()
{
    return ::RoboCompJointMotor::JointMotor::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompJointMotor::JointMotor::__newInstance() const
{
    return new JointMotor;
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompJointMotor::upCast(::IceProxy::RoboCompJointMotor::JointMotorPublish* p) { return p; }

void
::IceProxy::RoboCompJointMotor::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJointMotor::JointMotorPublish>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompJointMotor::JointMotorPublish;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompJointMotor::JointMotorPublish::motorStates(const ::RoboCompJointMotor::MotorStateMap& __p_mstateMap, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompJointMotor__JointMotorPublish__motorStates_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_mstateMap);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotorPublish::begin_motorStates(const ::RoboCompJointMotor::MotorStateMap& __p_mstateMap, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompJointMotor__JointMotorPublish__motorStates_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompJointMotor__JointMotorPublish__motorStates_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_mstateMap);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompJointMotor::JointMotorPublish::end_motorStates(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompJointMotor__JointMotorPublish__motorStates_name);
}

const ::std::string&
IceProxy::RoboCompJointMotor::JointMotorPublish::ice_staticId()
{
    return ::RoboCompJointMotor::JointMotorPublish::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompJointMotor::JointMotorPublish::__newInstance() const
{
    return new JointMotorPublish;
}

::Ice::Object* RoboCompJointMotor::upCast(::RoboCompJointMotor::JointMotor* p) { return p; }

namespace
{
const ::std::string __RoboCompJointMotor__JointMotor_ids[2] =
{
    "::Ice::Object",
    "::RoboCompJointMotor::JointMotor"
};

}

bool
RoboCompJointMotor::JointMotor::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompJointMotor__JointMotor_ids, __RoboCompJointMotor__JointMotor_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompJointMotor::JointMotor::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompJointMotor__JointMotor_ids[0], &__RoboCompJointMotor__JointMotor_ids[2]);
}

const ::std::string&
RoboCompJointMotor::JointMotor::ice_id(const ::Ice::Current&) const
{
    return __RoboCompJointMotor__JointMotor_ids[1];
}

const ::std::string&
RoboCompJointMotor::JointMotor::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompJointMotor::JointMotor";
    return typeId;
#else
    return __RoboCompJointMotor__JointMotor_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___setPosition(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalPosition __p_goal;
    __is->read(__p_goal);
    __inS.endReadParams();
    try
    {
        setPosition(__p_goal, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::CollisionException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___setVelocity(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalVelocity __p_goal;
    __is->read(__p_goal);
    __inS.endReadParams();
    try
    {
        setVelocity(__p_goal, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___setZeroPos(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    try
    {
        setZeroPos(__p_name, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___setSyncPosition(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalPositionList __p_listGoals;
    __is->read(__p_listGoals);
    __inS.endReadParams();
    try
    {
        setSyncPosition(__p_listGoals, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___setSyncVelocity(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalVelocityList __p_listGoals;
    __is->read(__p_listGoals);
    __inS.endReadParams();
    try
    {
        setSyncVelocity(__p_listGoals, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___setSyncZeroPos(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    try
    {
        setSyncZeroPos(__current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::HardwareFailedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___getMotorParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_motor;
    __is->read(__p_motor);
    __inS.endReadParams();
    try
    {
        ::RoboCompJointMotor::MotorParams __ret = getMotorParams(__p_motor, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___getMotorState(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_motor;
    __is->read(__p_motor);
    __inS.endReadParams();
    try
    {
        ::RoboCompJointMotor::MotorState __ret = getMotorState(__p_motor, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___getMotorStateMap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompJointMotor::MotorList __p_mList;
    __is->read(__p_mList);
    __inS.endReadParams();
    try
    {
        ::RoboCompJointMotor::MotorStateMap __ret = getMotorStateMap(__p_mList, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___getAllMotorState(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompJointMotor::MotorStateMap __p_mstateMap;
    try
    {
        getAllMotorState(__p_mstateMap, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_mstateMap);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompJointMotor::UnknownMotorException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___getAllMotorParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompJointMotor::MotorParamsList __ret = getAllMotorParams(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::___getBusParams(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompJointMotor::BusParams __ret = getBusParams(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompJointMotor__JointMotor_all[] =
{
    "getAllMotorParams",
    "getAllMotorState",
    "getBusParams",
    "getMotorParams",
    "getMotorState",
    "getMotorStateMap",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setPosition",
    "setSyncPosition",
    "setSyncVelocity",
    "setSyncZeroPos",
    "setVelocity",
    "setZeroPos"
};

}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotor::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompJointMotor__JointMotor_all, __RoboCompJointMotor__JointMotor_all + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompJointMotor__JointMotor_all)
    {
        case 0:
        {
            return ___getAllMotorParams(in, current);
        }
        case 1:
        {
            return ___getAllMotorState(in, current);
        }
        case 2:
        {
            return ___getBusParams(in, current);
        }
        case 3:
        {
            return ___getMotorParams(in, current);
        }
        case 4:
        {
            return ___getMotorState(in, current);
        }
        case 5:
        {
            return ___getMotorStateMap(in, current);
        }
        case 6:
        {
            return ___ice_id(in, current);
        }
        case 7:
        {
            return ___ice_ids(in, current);
        }
        case 8:
        {
            return ___ice_isA(in, current);
        }
        case 9:
        {
            return ___ice_ping(in, current);
        }
        case 10:
        {
            return ___setPosition(in, current);
        }
        case 11:
        {
            return ___setSyncPosition(in, current);
        }
        case 12:
        {
            return ___setSyncVelocity(in, current);
        }
        case 13:
        {
            return ___setSyncZeroPos(in, current);
        }
        case 14:
        {
            return ___setVelocity(in, current);
        }
        case 15:
        {
            return ___setZeroPos(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompJointMotor::JointMotor::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompJointMotor::JointMotor::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompJointMotor::__patch(JointMotorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompJointMotor::JointMotorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompJointMotor::JointMotor::ice_staticId(), v);
    }
}

::Ice::Object* RoboCompJointMotor::upCast(::RoboCompJointMotor::JointMotorPublish* p) { return p; }

namespace
{
const ::std::string __RoboCompJointMotor__JointMotorPublish_ids[2] =
{
    "::Ice::Object",
    "::RoboCompJointMotor::JointMotorPublish"
};

}

bool
RoboCompJointMotor::JointMotorPublish::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompJointMotor__JointMotorPublish_ids, __RoboCompJointMotor__JointMotorPublish_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompJointMotor::JointMotorPublish::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompJointMotor__JointMotorPublish_ids[0], &__RoboCompJointMotor__JointMotorPublish_ids[2]);
}

const ::std::string&
RoboCompJointMotor::JointMotorPublish::ice_id(const ::Ice::Current&) const
{
    return __RoboCompJointMotor__JointMotorPublish_ids[1];
}

const ::std::string&
RoboCompJointMotor::JointMotorPublish::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompJointMotor::JointMotorPublish";
    return typeId;
#else
    return __RoboCompJointMotor__JointMotorPublish_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotorPublish::___motorStates(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompJointMotor::MotorStateMap __p_mstateMap;
    __is->read(__p_mstateMap);
    __inS.endReadParams();
    motorStates(__p_mstateMap, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompJointMotor__JointMotorPublish_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "motorStates"
};

}

::Ice::DispatchStatus
RoboCompJointMotor::JointMotorPublish::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompJointMotor__JointMotorPublish_all, __RoboCompJointMotor__JointMotorPublish_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompJointMotor__JointMotorPublish_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___motorStates(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompJointMotor::JointMotorPublish::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompJointMotor::JointMotorPublish::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompJointMotor::__patch(JointMotorPublishPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompJointMotor::JointMotorPublishPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompJointMotor::JointMotorPublish::ice_staticId(), v);
    }
}
