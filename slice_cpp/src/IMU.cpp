// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `IMU.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <IMU.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompIMU__IMU__getDataImu_name = "getDataImu";

const ::std::string __RoboCompIMU__IMU__getAcceleration_name = "getAcceleration";

const ::std::string __RoboCompIMU__IMU__getAngularVel_name = "getAngularVel";

const ::std::string __RoboCompIMU__IMU__getMagneticFields_name = "getMagneticFields";

const ::std::string __RoboCompIMU__IMU__getOrientation_name = "getOrientation";

const ::std::string __RoboCompIMU__IMU__resetImu_name = "resetImu";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompIMU::upCast(::IceProxy::RoboCompIMU::IMU* p) { return p; }

void
::IceProxy::RoboCompIMU::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompIMU::IMU>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompIMU::IMU;
        v->__copyFrom(proxy);
    }
}

::RoboCompIMU::DataImu
IceProxy::RoboCompIMU::IMU::getDataImu(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompIMU__IMU__getDataImu_name);
    ::IceInternal::Outgoing __og(this, __RoboCompIMU__IMU__getDataImu_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompIMU::DataImu __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::begin_getDataImu(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompIMU__IMU__getDataImu_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompIMU__IMU__getDataImu_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompIMU__IMU__getDataImu_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::__begin_getDataImu(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::DataImu&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompIMU::DataImu&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
            ::RoboCompIMU::DataImu __ret;
            try
            {
                __ret = __proxy->end_getDataImu(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompIMU::DataImu&)> _response;
    };
    return begin_getDataImu(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompIMU::DataImu
IceProxy::RoboCompIMU::IMU::end_getDataImu(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompIMU__IMU__getDataImu_name);
    ::RoboCompIMU::DataImu __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::RoboCompIMU::Acceleration
IceProxy::RoboCompIMU::IMU::getAcceleration(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompIMU__IMU__getAcceleration_name);
    ::IceInternal::Outgoing __og(this, __RoboCompIMU__IMU__getAcceleration_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompIMU::Acceleration __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::begin_getAcceleration(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompIMU__IMU__getAcceleration_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompIMU__IMU__getAcceleration_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompIMU__IMU__getAcceleration_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::__begin_getAcceleration(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::Acceleration&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompIMU::Acceleration&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
            ::RoboCompIMU::Acceleration __ret;
            try
            {
                __ret = __proxy->end_getAcceleration(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompIMU::Acceleration&)> _response;
    };
    return begin_getAcceleration(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompIMU::Acceleration
IceProxy::RoboCompIMU::IMU::end_getAcceleration(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompIMU__IMU__getAcceleration_name);
    ::RoboCompIMU::Acceleration __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::RoboCompIMU::Gyroscope
IceProxy::RoboCompIMU::IMU::getAngularVel(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompIMU__IMU__getAngularVel_name);
    ::IceInternal::Outgoing __og(this, __RoboCompIMU__IMU__getAngularVel_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompIMU::Gyroscope __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::begin_getAngularVel(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompIMU__IMU__getAngularVel_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompIMU__IMU__getAngularVel_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompIMU__IMU__getAngularVel_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::__begin_getAngularVel(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::Gyroscope&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompIMU::Gyroscope&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
            ::RoboCompIMU::Gyroscope __ret;
            try
            {
                __ret = __proxy->end_getAngularVel(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompIMU::Gyroscope&)> _response;
    };
    return begin_getAngularVel(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompIMU::Gyroscope
IceProxy::RoboCompIMU::IMU::end_getAngularVel(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompIMU__IMU__getAngularVel_name);
    ::RoboCompIMU::Gyroscope __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::RoboCompIMU::Magnetic
IceProxy::RoboCompIMU::IMU::getMagneticFields(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompIMU__IMU__getMagneticFields_name);
    ::IceInternal::Outgoing __og(this, __RoboCompIMU__IMU__getMagneticFields_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompIMU::Magnetic __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::begin_getMagneticFields(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompIMU__IMU__getMagneticFields_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompIMU__IMU__getMagneticFields_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompIMU__IMU__getMagneticFields_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::__begin_getMagneticFields(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::Magnetic&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompIMU::Magnetic&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
            ::RoboCompIMU::Magnetic __ret;
            try
            {
                __ret = __proxy->end_getMagneticFields(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompIMU::Magnetic&)> _response;
    };
    return begin_getMagneticFields(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompIMU::Magnetic
IceProxy::RoboCompIMU::IMU::end_getMagneticFields(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompIMU__IMU__getMagneticFields_name);
    ::RoboCompIMU::Magnetic __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::RoboCompIMU::Orientation
IceProxy::RoboCompIMU::IMU::getOrientation(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompIMU__IMU__getOrientation_name);
    ::IceInternal::Outgoing __og(this, __RoboCompIMU__IMU__getOrientation_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompIMU::Orientation __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::begin_getOrientation(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompIMU__IMU__getOrientation_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompIMU__IMU__getOrientation_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompIMU__IMU__getOrientation_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::__begin_getOrientation(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::Orientation&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompIMU::Orientation&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
            ::RoboCompIMU::Orientation __ret;
            try
            {
                __ret = __proxy->end_getOrientation(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompIMU::Orientation&)> _response;
    };
    return begin_getOrientation(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompIMU::Orientation
IceProxy::RoboCompIMU::IMU::end_getOrientation(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompIMU__IMU__getOrientation_name);
    ::RoboCompIMU::Orientation __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::RoboCompIMU::IMU::resetImu(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompIMU__IMU__resetImu_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::begin_resetImu(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompIMU__IMU__resetImu_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompIMU__IMU__resetImu_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompIMU::IMU::end_resetImu(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompIMU__IMU__resetImu_name);
}

const ::std::string&
IceProxy::RoboCompIMU::IMU::ice_staticId()
{
    return ::RoboCompIMU::IMU::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompIMU::IMU::__newInstance() const
{
    return new IMU;
}

::Ice::Object* RoboCompIMU::upCast(::RoboCompIMU::IMU* p) { return p; }

namespace
{
const ::std::string __RoboCompIMU__IMU_ids[2] =
{
    "::Ice::Object",
    "::RoboCompIMU::IMU"
};

}

bool
RoboCompIMU::IMU::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompIMU__IMU_ids, __RoboCompIMU__IMU_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompIMU::IMU::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompIMU__IMU_ids[0], &__RoboCompIMU__IMU_ids[2]);
}

const ::std::string&
RoboCompIMU::IMU::ice_id(const ::Ice::Current&) const
{
    return __RoboCompIMU__IMU_ids[1];
}

const ::std::string&
RoboCompIMU::IMU::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompIMU::IMU";
    return typeId;
#else
    return __RoboCompIMU__IMU_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompIMU::IMU::___getDataImu(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompIMU::DataImu __ret = getDataImu(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompIMU::IMU::___getAcceleration(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompIMU::Acceleration __ret = getAcceleration(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompIMU::IMU::___getAngularVel(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompIMU::Gyroscope __ret = getAngularVel(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompIMU::IMU::___getMagneticFields(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompIMU::Magnetic __ret = getMagneticFields(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompIMU::IMU::___getOrientation(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompIMU::Orientation __ret = getOrientation(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompIMU::IMU::___resetImu(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    resetImu(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompIMU__IMU_all[] =
{
    "getAcceleration",
    "getAngularVel",
    "getDataImu",
    "getMagneticFields",
    "getOrientation",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "resetImu"
};

}

::Ice::DispatchStatus
RoboCompIMU::IMU::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompIMU__IMU_all, __RoboCompIMU__IMU_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompIMU__IMU_all)
    {
        case 0:
        {
            return ___getAcceleration(in, current);
        }
        case 1:
        {
            return ___getAngularVel(in, current);
        }
        case 2:
        {
            return ___getDataImu(in, current);
        }
        case 3:
        {
            return ___getMagneticFields(in, current);
        }
        case 4:
        {
            return ___getOrientation(in, current);
        }
        case 5:
        {
            return ___ice_id(in, current);
        }
        case 6:
        {
            return ___ice_ids(in, current);
        }
        case 7:
        {
            return ___ice_isA(in, current);
        }
        case 8:
        {
            return ___ice_ping(in, current);
        }
        case 9:
        {
            return ___resetImu(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompIMU::IMU::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompIMU::IMU::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompIMU::__patch(IMUPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompIMU::IMUPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompIMU::IMU::ice_staticId(), v);
    }
}
