// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `CommonHead.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ___home_ironman_gazebo_robocomp_slice____slice_cpp__CommonHead_h__
#define ___home_ironman_gazebo_robocomp_slice____slice_cpp__CommonHead_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <JointMotor.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompCommonHead
{

class CommonHead;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCommonHead::CommonHead>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompCommonHead::CommonHead*);

}

}

namespace RoboCompCommonHead
{

class CommonHead;
::Ice::Object* upCast(::RoboCompCommonHead::CommonHead*);
typedef ::IceInternal::Handle< ::RoboCompCommonHead::CommonHead> CommonHeadPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCommonHead::CommonHead> CommonHeadPrx;
void __patch(CommonHeadPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompCommonHead
{

typedef ::std::map< ::std::string, ::RoboCompJointMotor::MotorParams> dmotorParams;

struct THeadParams
{
    ::RoboCompCommonHead::dmotorParams motorsParams;
    ::std::string model;
};

typedef ::std::map< ::std::string, ::RoboCompJointMotor::MotorState> dmotorsState;

struct THeadState
{
    ::RoboCompCommonHead::dmotorsState motorsState;
    bool isMoving;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompCommonHead::THeadParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompCommonHead::THeadParams, S>
{
    static void write(S* __os, const ::RoboCompCommonHead::THeadParams& v)
    {
        __os->write(v.motorsParams);
        __os->write(v.model);
    }
};

template<class S>
struct StreamReader< ::RoboCompCommonHead::THeadParams, S>
{
    static void read(S* __is, ::RoboCompCommonHead::THeadParams& v)
    {
        __is->read(v.motorsParams);
        __is->read(v.model);
    }
};

template<>
struct StreamableTraits< ::RoboCompCommonHead::THeadState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompCommonHead::THeadState, S>
{
    static void write(S* __os, const ::RoboCompCommonHead::THeadState& v)
    {
        __os->write(v.motorsState);
        __os->write(v.isMoving);
    }
};

template<class S>
struct StreamReader< ::RoboCompCommonHead::THeadState, S>
{
    static void read(S* __is, ::RoboCompCommonHead::THeadState& v)
    {
        __is->read(v.motorsState);
        __is->read(v.isMoving);
    }
};

}

namespace RoboCompCommonHead
{

class Callback_CommonHead_resetHead_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_resetHead_Base> Callback_CommonHead_resetHeadPtr;

class Callback_CommonHead_stopHead_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_stopHead_Base> Callback_CommonHead_stopHeadPtr;

class Callback_CommonHead_setPanLeft_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setPanLeft_Base> Callback_CommonHead_setPanLeftPtr;

class Callback_CommonHead_setPanRight_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setPanRight_Base> Callback_CommonHead_setPanRightPtr;

class Callback_CommonHead_setTilt_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setTilt_Base> Callback_CommonHead_setTiltPtr;

class Callback_CommonHead_setNeck_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setNeck_Base> Callback_CommonHead_setNeckPtr;

class Callback_CommonHead_saccadic2DLeft_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_saccadic2DLeft_Base> Callback_CommonHead_saccadic2DLeftPtr;

class Callback_CommonHead_saccadic2DRight_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_saccadic2DRight_Base> Callback_CommonHead_saccadic2DRightPtr;

class Callback_CommonHead_saccadic3D_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_saccadic3D_Base> Callback_CommonHead_saccadic3DPtr;

class Callback_CommonHead_saccadic4D_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_saccadic4D_Base> Callback_CommonHead_saccadic4DPtr;

class Callback_CommonHead_setNMotorsPosition_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setNMotorsPosition_Base> Callback_CommonHead_setNMotorsPositionPtr;

class Callback_CommonHead_getHeadParams_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_getHeadParams_Base> Callback_CommonHead_getHeadParamsPtr;

class Callback_CommonHead_getHeadState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_getHeadState_Base> Callback_CommonHead_getHeadStatePtr;

class Callback_CommonHead_isMovingHead_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_isMovingHead_Base> Callback_CommonHead_isMovingHeadPtr;

}

namespace IceProxy
{

namespace RoboCompCommonHead
{

class CommonHead : virtual public ::IceProxy::Ice::Object
{
public:

    void resetHead()
    {
        resetHead(0);
    }
    void resetHead(const ::Ice::Context& __ctx)
    {
        resetHead(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_resetHead(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_resetHead(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_resetHead(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resetHead(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resetHead(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_resetHead(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resetHead(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resetHead(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_resetHead()
    {
        return begin_resetHead(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::Context& __ctx)
    {
        return begin_resetHead(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetHead(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetHead(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::RoboCompCommonHead::Callback_CommonHead_resetHeadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetHead(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_resetHeadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetHead(&__ctx, __del, __cookie);
    }

    void end_resetHead(const ::Ice::AsyncResultPtr&);
    
private:

    void resetHead(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stopHead()
    {
        stopHead(0);
    }
    void stopHead(const ::Ice::Context& __ctx)
    {
        stopHead(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stopHead(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stopHead(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_stopHead(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopHead(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopHead(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stopHead(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopHead(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopHead(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_stopHead()
    {
        return begin_stopHead(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::Context& __ctx)
    {
        return begin_stopHead(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopHead(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopHead(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::RoboCompCommonHead::Callback_CommonHead_stopHeadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopHead(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_stopHeadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopHead(&__ctx, __del, __cookie);
    }

    void end_stopHead(const ::Ice::AsyncResultPtr&);
    
private:

    void stopHead(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPanLeft(::Ice::Float __p_pan)
    {
        setPanLeft(__p_pan, 0);
    }
    void setPanLeft(::Ice::Float __p_pan, const ::Ice::Context& __ctx)
    {
        setPanLeft(__p_pan, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPanLeft(::Ice::Float __p_pan, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPanLeft(__p_pan, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPanLeft(::Ice::Float __p_pan, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPanLeft(__p_pan, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPanLeft(::Ice::Float __p_pan, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPanLeft(__p_pan, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPanLeft(::Ice::Float __p_pan, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPanLeft(__p_pan, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPanLeft(::Ice::Float __p_pan, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float __p_pan)
    {
        return begin_setPanLeft(__p_pan, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float __p_pan, const ::Ice::Context& __ctx)
    {
        return begin_setPanLeft(__p_pan, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float __p_pan, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPanLeft(__p_pan, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float __p_pan, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPanLeft(__p_pan, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float __p_pan, const ::RoboCompCommonHead::Callback_CommonHead_setPanLeftPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPanLeft(__p_pan, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float __p_pan, const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_setPanLeftPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPanLeft(__p_pan, &__ctx, __del, __cookie);
    }

    void end_setPanLeft(const ::Ice::AsyncResultPtr&);
    
private:

    void setPanLeft(::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setPanRight(::Ice::Float __p_pan)
    {
        setPanRight(__p_pan, 0);
    }
    void setPanRight(::Ice::Float __p_pan, const ::Ice::Context& __ctx)
    {
        setPanRight(__p_pan, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPanRight(::Ice::Float __p_pan, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPanRight(__p_pan, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPanRight(::Ice::Float __p_pan, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPanRight(__p_pan, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPanRight(::Ice::Float __p_pan, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPanRight(__p_pan, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPanRight(::Ice::Float __p_pan, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPanRight(__p_pan, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPanRight(::Ice::Float __p_pan, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float __p_pan)
    {
        return begin_setPanRight(__p_pan, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float __p_pan, const ::Ice::Context& __ctx)
    {
        return begin_setPanRight(__p_pan, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float __p_pan, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPanRight(__p_pan, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float __p_pan, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPanRight(__p_pan, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float __p_pan, const ::RoboCompCommonHead::Callback_CommonHead_setPanRightPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPanRight(__p_pan, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float __p_pan, const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_setPanRightPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPanRight(__p_pan, &__ctx, __del, __cookie);
    }

    void end_setPanRight(const ::Ice::AsyncResultPtr&);
    
private:

    void setPanRight(::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setTilt(::Ice::Float __p_tilt)
    {
        setTilt(__p_tilt, 0);
    }
    void setTilt(::Ice::Float __p_tilt, const ::Ice::Context& __ctx)
    {
        setTilt(__p_tilt, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setTilt(::Ice::Float __p_tilt, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setTilt(__p_tilt, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setTilt(::Ice::Float __p_tilt, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTilt(__p_tilt, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setTilt(::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setTilt(__p_tilt, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setTilt(::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setTilt(__p_tilt, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setTilt(::Ice::Float __p_tilt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float __p_tilt)
    {
        return begin_setTilt(__p_tilt, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float __p_tilt, const ::Ice::Context& __ctx)
    {
        return begin_setTilt(__p_tilt, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float __p_tilt, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTilt(__p_tilt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTilt(__p_tilt, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float __p_tilt, const ::RoboCompCommonHead::Callback_CommonHead_setTiltPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTilt(__p_tilt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_setTiltPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setTilt(__p_tilt, &__ctx, __del, __cookie);
    }

    void end_setTilt(const ::Ice::AsyncResultPtr&);
    
private:

    void setTilt(::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setNeck(::Ice::Float __p_neck)
    {
        setNeck(__p_neck, 0);
    }
    void setNeck(::Ice::Float __p_neck, const ::Ice::Context& __ctx)
    {
        setNeck(__p_neck, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setNeck(::Ice::Float __p_neck, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setNeck(__p_neck, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setNeck(::Ice::Float __p_neck, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setNeck(__p_neck, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setNeck(::Ice::Float __p_neck, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setNeck(__p_neck, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setNeck(::Ice::Float __p_neck, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setNeck(__p_neck, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setNeck(::Ice::Float __p_neck, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float __p_neck)
    {
        return begin_setNeck(__p_neck, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float __p_neck, const ::Ice::Context& __ctx)
    {
        return begin_setNeck(__p_neck, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float __p_neck, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setNeck(__p_neck, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float __p_neck, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setNeck(__p_neck, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float __p_neck, const ::RoboCompCommonHead::Callback_CommonHead_setNeckPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setNeck(__p_neck, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float __p_neck, const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_setNeckPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setNeck(__p_neck, &__ctx, __del, __cookie);
    }

    void end_setNeck(const ::Ice::AsyncResultPtr&);
    
private:

    void setNeck(::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt)
    {
        saccadic2DLeft(__p_leftPan, __p_tilt, 0);
    }
    void saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx)
    {
        saccadic2DLeft(__p_leftPan, __p_tilt, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saccadic2DLeft(__p_leftPan, __p_tilt, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saccadic2DLeft(__p_leftPan, __p_tilt, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saccadic2DLeft(__p_leftPan, __p_tilt, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saccadic2DLeft(__p_leftPan, __p_tilt, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt)
    {
        return begin_saccadic2DLeft(__p_leftPan, __p_tilt, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx)
    {
        return begin_saccadic2DLeft(__p_leftPan, __p_tilt, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic2DLeft(__p_leftPan, __p_tilt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic2DLeft(__p_leftPan, __p_tilt, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::RoboCompCommonHead::Callback_CommonHead_saccadic2DLeftPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic2DLeft(__p_leftPan, __p_tilt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float __p_leftPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_saccadic2DLeftPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic2DLeft(__p_leftPan, __p_tilt, &__ctx, __del, __cookie);
    }

    void end_saccadic2DLeft(const ::Ice::AsyncResultPtr&);
    
private:

    void saccadic2DLeft(::Ice::Float, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt)
    {
        saccadic2DRight(__p_rightPan, __p_tilt, 0);
    }
    void saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx)
    {
        saccadic2DRight(__p_rightPan, __p_tilt, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saccadic2DRight(__p_rightPan, __p_tilt, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saccadic2DRight(__p_rightPan, __p_tilt, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saccadic2DRight(__p_rightPan, __p_tilt, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saccadic2DRight(__p_rightPan, __p_tilt, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt)
    {
        return begin_saccadic2DRight(__p_rightPan, __p_tilt, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx)
    {
        return begin_saccadic2DRight(__p_rightPan, __p_tilt, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic2DRight(__p_rightPan, __p_tilt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic2DRight(__p_rightPan, __p_tilt, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::RoboCompCommonHead::Callback_CommonHead_saccadic2DRightPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic2DRight(__p_rightPan, __p_tilt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_saccadic2DRightPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic2DRight(__p_rightPan, __p_tilt, &__ctx, __del, __cookie);
    }

    void end_saccadic2DRight(const ::Ice::AsyncResultPtr&);
    
private:

    void saccadic2DRight(::Ice::Float, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt)
    {
        saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, 0);
    }
    void saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx)
    {
        saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt)
    {
        return begin_saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx)
    {
        return begin_saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::RoboCompCommonHead::Callback_CommonHead_saccadic3DPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_saccadic3DPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic3D(__p_leftPan, __p_rightPan, __p_tilt, &__ctx, __del, __cookie);
    }

    void end_saccadic3D(const ::Ice::AsyncResultPtr&);
    
private:

    void saccadic3D(::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck)
    {
        saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, 0);
    }
    void saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::Ice::Context& __ctx)
    {
        saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck)
    {
        return begin_saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::Ice::Context& __ctx)
    {
        return begin_saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::RoboCompCommonHead::Callback_CommonHead_saccadic4DPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float __p_leftPan, ::Ice::Float __p_rightPan, ::Ice::Float __p_tilt, ::Ice::Float __p_neck, const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_saccadic4DPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_saccadic4D(__p_leftPan, __p_rightPan, __p_tilt, __p_neck, &__ctx, __del, __cookie);
    }

    void end_saccadic4D(const ::Ice::AsyncResultPtr&);
    
private:

    void saccadic4D(::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals)
    {
        setNMotorsPosition(__p_listGoals, 0);
    }
    void setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context& __ctx)
    {
        setNMotorsPosition(__p_listGoals, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setNMotorsPosition(__p_listGoals, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setNMotorsPosition(__p_listGoals, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setNMotorsPosition(__p_listGoals, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setNMotorsPosition(__p_listGoals, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals)
    {
        return begin_setNMotorsPosition(__p_listGoals, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context& __ctx)
    {
        return begin_setNMotorsPosition(__p_listGoals, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setNMotorsPosition(__p_listGoals, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setNMotorsPosition(__p_listGoals, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::RoboCompCommonHead::Callback_CommonHead_setNMotorsPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setNMotorsPosition(__p_listGoals, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& __p_listGoals, const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_setNMotorsPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setNMotorsPosition(__p_listGoals, &__ctx, __del, __cookie);
    }

    void end_setNMotorsPosition(const ::Ice::AsyncResultPtr&);
    
private:

    void setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompCommonHead::THeadParams getHeadParams()
    {
        return getHeadParams(0);
    }
    ::RoboCompCommonHead::THeadParams getHeadParams(const ::Ice::Context& __ctx)
    {
        return getHeadParams(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getHeadParams(const ::IceInternal::Function<void (const ::RoboCompCommonHead::THeadParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getHeadParams(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getHeadParams(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getHeadParams(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getHeadParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompCommonHead::THeadParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getHeadParams(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getHeadParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getHeadParams(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getHeadParams(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCommonHead::THeadParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getHeadParams()
    {
        return begin_getHeadParams(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::Context& __ctx)
    {
        return begin_getHeadParams(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHeadParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHeadParams(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::RoboCompCommonHead::Callback_CommonHead_getHeadParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHeadParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_getHeadParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHeadParams(&__ctx, __del, __cookie);
    }

    ::RoboCompCommonHead::THeadParams end_getHeadParams(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompCommonHead::THeadParams getHeadParams(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getHeadState(::RoboCompCommonHead::THeadState& __p_hState)
    {
        getHeadState(__p_hState, 0);
    }
    void getHeadState(::RoboCompCommonHead::THeadState& __p_hState, const ::Ice::Context& __ctx)
    {
        getHeadState(__p_hState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getHeadState(const ::IceInternal::Function<void (const ::RoboCompCommonHead::THeadState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getHeadState(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getHeadState(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getHeadState(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getHeadState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompCommonHead::THeadState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getHeadState(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getHeadState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getHeadState(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getHeadState(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCommonHead::THeadState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getHeadState()
    {
        return begin_getHeadState(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::Context& __ctx)
    {
        return begin_getHeadState(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHeadState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHeadState(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::RoboCompCommonHead::Callback_CommonHead_getHeadStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHeadState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_getHeadStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHeadState(&__ctx, __del, __cookie);
    }

    void end_getHeadState(::RoboCompCommonHead::THeadState& __p_hState, const ::Ice::AsyncResultPtr&);
    
private:

    void getHeadState(::RoboCompCommonHead::THeadState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isMovingHead()
    {
        return isMovingHead(0);
    }
    bool isMovingHead(const ::Ice::Context& __ctx)
    {
        return isMovingHead(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isMovingHead(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isMovingHead(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isMovingHead(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isMovingHead(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isMovingHead(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isMovingHead(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isMovingHead(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isMovingHead(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isMovingHead(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isMovingHead()
    {
        return begin_isMovingHead(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::Context& __ctx)
    {
        return begin_isMovingHead(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isMovingHead(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isMovingHead(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::RoboCompCommonHead::Callback_CommonHead_isMovingHeadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isMovingHead(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::Context& __ctx, const ::RoboCompCommonHead::Callback_CommonHead_isMovingHeadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isMovingHead(&__ctx, __del, __cookie);
    }

    bool end_isMovingHead(const ::Ice::AsyncResultPtr&);
    
private:

    bool isMovingHead(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CommonHead> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_secure(bool __secure) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_twoway() const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_oneway() const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_batchOneway() const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_datagram() const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_batchDatagram() const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_compress(bool __compress) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CommonHead> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CommonHead*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace RoboCompCommonHead
{

class CommonHead : virtual public ::Ice::Object
{
public:

    typedef CommonHeadPrx ProxyType;
    typedef CommonHeadPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void resetHead(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___resetHead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopHead(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stopHead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPanLeft(::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPanLeft(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPanRight(::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPanRight(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTilt(::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setTilt(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setNeck(::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setNeck(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saccadic2DLeft(::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___saccadic2DLeft(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saccadic2DRight(::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___saccadic2DRight(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saccadic3D(::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___saccadic3D(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saccadic4D(::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___saccadic4D(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setNMotorsPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompCommonHead::THeadParams getHeadParams(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getHeadParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getHeadState(::RoboCompCommonHead::THeadState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getHeadState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isMovingHead(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isMovingHead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const CommonHead& l, const CommonHead& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CommonHead& l, const CommonHead& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompCommonHead
{

template<class T>
class CallbackNC_CommonHead_resetHead : public Callback_CommonHead_resetHead_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_resetHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_resetHead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_resetHead<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_resetHead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_resetHead<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_resetHead : public Callback_CommonHead_resetHead_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_resetHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_resetHead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_resetHead<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_resetHead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_resetHead<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_stopHead : public Callback_CommonHead_stopHead_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_stopHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_stopHead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_stopHead<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_stopHead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_stopHead<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_stopHead : public Callback_CommonHead_stopHead_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_stopHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_stopHead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_stopHead<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_stopHead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_stopHead<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_setPanLeft : public Callback_CommonHead_setPanLeft_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setPanLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setPanLeft(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanLeft<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanLeft<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanLeft<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanLeft<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_setPanLeft : public Callback_CommonHead_setPanLeft_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setPanLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setPanLeft(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanLeft<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanLeft<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanLeft<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanLeft<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_setPanRight : public Callback_CommonHead_setPanRight_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setPanRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setPanRight(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanRight<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanRight<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanRight<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanRight<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_setPanRight : public Callback_CommonHead_setPanRight_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setPanRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setPanRight(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanRight<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanRight<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanRight<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanRight<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_setTilt : public Callback_CommonHead_setTilt_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setTilt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setTilt(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setTilt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setTilt<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setTilt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setTilt<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_setTilt : public Callback_CommonHead_setTilt_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setTilt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setTilt(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setTilt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setTilt<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setTilt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setTilt<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_setNeck : public Callback_CommonHead_setNeck_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setNeck(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setNeck(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNeck<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNeck<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNeck<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNeck<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_setNeck : public Callback_CommonHead_setNeck_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setNeck(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setNeck(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNeck<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNeck<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNeck<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNeck<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_saccadic2DLeft : public Callback_CommonHead_saccadic2DLeft_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_saccadic2DLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saccadic2DLeft(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DLeft<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DLeft<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DLeft<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DLeft<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_saccadic2DLeft : public Callback_CommonHead_saccadic2DLeft_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_saccadic2DLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saccadic2DLeft(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DLeft<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DLeft<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DLeft<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DLeft<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_saccadic2DRight : public Callback_CommonHead_saccadic2DRight_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_saccadic2DRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saccadic2DRight(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DRight<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DRight<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DRight<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DRight<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_saccadic2DRight : public Callback_CommonHead_saccadic2DRight_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_saccadic2DRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saccadic2DRight(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DRight<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DRight<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DRight<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DRight<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_saccadic3D : public Callback_CommonHead_saccadic3D_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_saccadic3D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saccadic3D(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic3D<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic3D<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic3D<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic3D<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_saccadic3D : public Callback_CommonHead_saccadic3D_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_saccadic3D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saccadic3D(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic3D<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic3D<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic3D<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic3D<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_saccadic4D : public Callback_CommonHead_saccadic4D_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_saccadic4D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saccadic4D(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic4D<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic4D<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic4D<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic4D<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_saccadic4D : public Callback_CommonHead_saccadic4D_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_saccadic4D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_saccadic4D(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic4D<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic4D<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic4D<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic4D<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_setNMotorsPosition : public Callback_CommonHead_setNMotorsPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setNMotorsPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setNMotorsPosition(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNMotorsPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNMotorsPosition<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNMotorsPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNMotorsPosition<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_setNMotorsPosition : public Callback_CommonHead_setNMotorsPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setNMotorsPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setNMotorsPosition(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNMotorsPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNMotorsPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNMotorsPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNMotorsPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_getHeadParams : public Callback_CommonHead_getHeadParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCommonHead::THeadParams&);

    CallbackNC_CommonHead_getHeadParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCommonHead::THeadParams __ret;
        try
        {
            __ret = __proxy->end_getHeadParams(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommonHead_getHeadParamsPtr
newCallback_CommonHead_getHeadParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCommonHead::THeadParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_getHeadParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_getHeadParamsPtr
newCallback_CommonHead_getHeadParams(T* instance, void (T::*cb)(const ::RoboCompCommonHead::THeadParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_getHeadParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_getHeadParams : public Callback_CommonHead_getHeadParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCommonHead::THeadParams&, const CT&);

    Callback_CommonHead_getHeadParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCommonHead::THeadParams __ret;
        try
        {
            __ret = __proxy->end_getHeadParams(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_getHeadParamsPtr
newCallback_CommonHead_getHeadParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCommonHead::THeadParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_getHeadParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_getHeadParamsPtr
newCallback_CommonHead_getHeadParams(T* instance, void (T::*cb)(const ::RoboCompCommonHead::THeadParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_getHeadParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_getHeadState : public Callback_CommonHead_getHeadState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCommonHead::THeadState&);

    CallbackNC_CommonHead_getHeadState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCommonHead::THeadState hState;
        try
        {
            __proxy->end_getHeadState(hState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(hState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommonHead_getHeadStatePtr
newCallback_CommonHead_getHeadState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCommonHead::THeadState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_getHeadState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_getHeadStatePtr
newCallback_CommonHead_getHeadState(T* instance, void (T::*cb)(const ::RoboCompCommonHead::THeadState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_getHeadState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_getHeadState : public Callback_CommonHead_getHeadState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCommonHead::THeadState&, const CT&);

    Callback_CommonHead_getHeadState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCommonHead::THeadState hState;
        try
        {
            __proxy->end_getHeadState(hState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(hState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_getHeadStatePtr
newCallback_CommonHead_getHeadState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCommonHead::THeadState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_getHeadState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_getHeadStatePtr
newCallback_CommonHead_getHeadState(T* instance, void (T::*cb)(const ::RoboCompCommonHead::THeadState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_getHeadState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_isMovingHead : public Callback_CommonHead_isMovingHead_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_CommonHead_isMovingHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isMovingHead(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_CommonHead_isMovingHeadPtr
newCallback_CommonHead_isMovingHead(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_isMovingHead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_isMovingHeadPtr
newCallback_CommonHead_isMovingHead(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_isMovingHead<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_isMovingHead : public Callback_CommonHead_isMovingHead_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_CommonHead_isMovingHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx __proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isMovingHead(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_isMovingHeadPtr
newCallback_CommonHead_isMovingHead(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_isMovingHead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_isMovingHeadPtr
newCallback_CommonHead_isMovingHead(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_isMovingHead<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
