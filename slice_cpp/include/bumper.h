// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `bumper.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ___home_ironman_gazebo_robocomp_slice____slice_cpp__bumper_h__
#define ___home_ironman_gazebo_robocomp_slice____slice_cpp__bumper_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompBumper
{

class Bumper;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompBumper::Bumper>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompBumper::Bumper*);

}

}

namespace RoboCompBumper
{

class Bumper;
::Ice::Object* upCast(::RoboCompBumper::Bumper*);
typedef ::IceInternal::Handle< ::RoboCompBumper::Bumper> BumperPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompBumper::Bumper> BumperPrx;
void __patch(BumperPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompBumper
{

struct SensorState
{
    ::Ice::Int idNumber;
    ::Ice::Int state;

    bool operator==(const SensorState& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(idNumber != __rhs.idNumber)
        {
            return false;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SensorState& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(idNumber < __rhs.idNumber)
        {
            return true;
        }
        else if(__rhs.idNumber < idNumber)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SensorState& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const SensorState& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const SensorState& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const SensorState& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::map< ::std::string, ::RoboCompBumper::SensorState> SensorStateMap;

struct SensorParams
{
    ::std::string name;
    ::Ice::Int idNumber;
    ::Ice::Float x;
    ::Ice::Float y;
};

typedef ::std::vector< ::RoboCompBumper::SensorParams> SensorParamsList;

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompBumper::SensorState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompBumper::SensorState, S>
{
    static void write(S* __os, const ::RoboCompBumper::SensorState& v)
    {
        __os->write(v.idNumber);
        __os->write(v.state);
    }
};

template<class S>
struct StreamReader< ::RoboCompBumper::SensorState, S>
{
    static void read(S* __is, ::RoboCompBumper::SensorState& v)
    {
        __is->read(v.idNumber);
        __is->read(v.state);
    }
};

template<>
struct StreamableTraits< ::RoboCompBumper::SensorParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompBumper::SensorParams, S>
{
    static void write(S* __os, const ::RoboCompBumper::SensorParams& v)
    {
        __os->write(v.name);
        __os->write(v.idNumber);
        __os->write(v.x);
        __os->write(v.y);
    }
};

template<class S>
struct StreamReader< ::RoboCompBumper::SensorParams, S>
{
    static void read(S* __is, ::RoboCompBumper::SensorParams& v)
    {
        __is->read(v.name);
        __is->read(v.idNumber);
        __is->read(v.x);
        __is->read(v.y);
    }
};

}

namespace RoboCompBumper
{

class Callback_Bumper_enable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bumper_enable_Base> Callback_Bumper_enablePtr;

class Callback_Bumper_disable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bumper_disable_Base> Callback_Bumper_disablePtr;

class Callback_Bumper_isEnabled_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bumper_isEnabled_Base> Callback_Bumper_isEnabledPtr;

class Callback_Bumper_reset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bumper_reset_Base> Callback_Bumper_resetPtr;

class Callback_Bumper_getSensorData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Bumper_getSensorData_Base> Callback_Bumper_getSensorDataPtr;

}

namespace IceProxy
{

namespace RoboCompBumper
{

class Bumper : virtual public ::IceProxy::Ice::Object
{
public:

    void enable()
    {
        enable(0);
    }
    void enable(const ::Ice::Context& __ctx)
    {
        enable(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_enable(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_enable(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_enable(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_enable(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_enable(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_enable(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_enable(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_enable(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_enable()
    {
        return begin_enable(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_enable(const ::Ice::Context& __ctx)
    {
        return begin_enable(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_enable(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_enable(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_enable(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_enable(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_enable(const ::RoboCompBumper::Callback_Bumper_enablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_enable(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_enable(const ::Ice::Context& __ctx, const ::RoboCompBumper::Callback_Bumper_enablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_enable(&__ctx, __del, __cookie);
    }

    void end_enable(const ::Ice::AsyncResultPtr&);
    
private:

    void enable(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_enable(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void disable()
    {
        disable(0);
    }
    void disable(const ::Ice::Context& __ctx)
    {
        disable(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_disable(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_disable(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_disable(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_disable(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_disable(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_disable(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_disable(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_disable(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_disable()
    {
        return begin_disable(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_disable(const ::Ice::Context& __ctx)
    {
        return begin_disable(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_disable(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_disable(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_disable(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_disable(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_disable(const ::RoboCompBumper::Callback_Bumper_disablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_disable(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_disable(const ::Ice::Context& __ctx, const ::RoboCompBumper::Callback_Bumper_disablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_disable(&__ctx, __del, __cookie);
    }

    void end_disable(const ::Ice::AsyncResultPtr&);
    
private:

    void disable(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_disable(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isEnabled()
    {
        return isEnabled(0);
    }
    bool isEnabled(const ::Ice::Context& __ctx)
    {
        return isEnabled(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isEnabled(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isEnabled(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isEnabled(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isEnabled(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isEnabled(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isEnabled(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isEnabled(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isEnabled(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isEnabled(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isEnabled()
    {
        return begin_isEnabled(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isEnabled(const ::Ice::Context& __ctx)
    {
        return begin_isEnabled(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isEnabled(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isEnabled(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isEnabled(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isEnabled(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isEnabled(const ::RoboCompBumper::Callback_Bumper_isEnabledPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isEnabled(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isEnabled(const ::Ice::Context& __ctx, const ::RoboCompBumper::Callback_Bumper_isEnabledPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isEnabled(&__ctx, __del, __cookie);
    }

    bool end_isEnabled(const ::Ice::AsyncResultPtr&);
    
private:

    bool isEnabled(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isEnabled(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reset()
    {
        reset(0);
    }
    void reset(const ::Ice::Context& __ctx)
    {
        reset(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reset(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reset(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reset(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reset(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reset(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reset(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reset(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reset(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reset()
    {
        return begin_reset(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx)
    {
        return begin_reset(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::RoboCompBumper::Callback_Bumper_resetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx, const ::RoboCompBumper::Callback_Bumper_resetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(&__ctx, __del, __cookie);
    }

    void end_reset(const ::Ice::AsyncResultPtr&);
    
private:

    void reset(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompBumper::SensorStateMap getSensorData()
    {
        return getSensorData(0);
    }
    ::RoboCompBumper::SensorStateMap getSensorData(const ::Ice::Context& __ctx)
    {
        return getSensorData(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSensorData(const ::IceInternal::Function<void (const ::RoboCompBumper::SensorStateMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSensorData(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSensorData(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSensorData(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSensorData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompBumper::SensorStateMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSensorData(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSensorData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSensorData(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSensorData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompBumper::SensorStateMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSensorData()
    {
        return begin_getSensorData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSensorData(const ::Ice::Context& __ctx)
    {
        return begin_getSensorData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSensorData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSensorData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensorData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSensorData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensorData(const ::RoboCompBumper::Callback_Bumper_getSensorDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSensorData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSensorData(const ::Ice::Context& __ctx, const ::RoboCompBumper::Callback_Bumper_getSensorDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSensorData(&__ctx, __del, __cookie);
    }

    ::RoboCompBumper::SensorStateMap end_getSensorData(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompBumper::SensorStateMap getSensorData(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSensorData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Bumper> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_secure(bool __secure) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_twoway() const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_oneway() const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_batchOneway() const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_datagram() const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_batchDatagram() const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_compress(bool __compress) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Bumper> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Bumper*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace RoboCompBumper
{

class Bumper : virtual public ::Ice::Object
{
public:

    typedef BumperPrx ProxyType;
    typedef BumperPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void enable(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___enable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void disable(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___disable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isEnabled(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isEnabled(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reset(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompBumper::SensorStateMap getSensorData(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSensorData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Bumper& l, const Bumper& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Bumper& l, const Bumper& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompBumper
{

template<class T>
class CallbackNC_Bumper_enable : public Callback_Bumper_enable_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Bumper_enable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Bumper_enablePtr
newCallback_Bumper_enable(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_enable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bumper_enablePtr
newCallback_Bumper_enable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_enable<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Bumper_enablePtr
newCallback_Bumper_enable(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_enable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bumper_enablePtr
newCallback_Bumper_enable(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_enable<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bumper_enable : public Callback_Bumper_enable_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Bumper_enable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Bumper_enablePtr
newCallback_Bumper_enable(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_enable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bumper_enablePtr
newCallback_Bumper_enable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_enable<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Bumper_enablePtr
newCallback_Bumper_enable(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_enable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bumper_enablePtr
newCallback_Bumper_enable(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_enable<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Bumper_disable : public Callback_Bumper_disable_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Bumper_disable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Bumper_disablePtr
newCallback_Bumper_disable(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_disable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bumper_disablePtr
newCallback_Bumper_disable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_disable<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Bumper_disablePtr
newCallback_Bumper_disable(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_disable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bumper_disablePtr
newCallback_Bumper_disable(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_disable<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bumper_disable : public Callback_Bumper_disable_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Bumper_disable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Bumper_disablePtr
newCallback_Bumper_disable(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_disable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bumper_disablePtr
newCallback_Bumper_disable(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_disable<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Bumper_disablePtr
newCallback_Bumper_disable(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_disable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bumper_disablePtr
newCallback_Bumper_disable(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_disable<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Bumper_isEnabled : public Callback_Bumper_isEnabled_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Bumper_isEnabled(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompBumper::BumperPrx __proxy = ::RoboCompBumper::BumperPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isEnabled(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Bumper_isEnabledPtr
newCallback_Bumper_isEnabled(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_isEnabled<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bumper_isEnabledPtr
newCallback_Bumper_isEnabled(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_isEnabled<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bumper_isEnabled : public Callback_Bumper_isEnabled_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Bumper_isEnabled(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompBumper::BumperPrx __proxy = ::RoboCompBumper::BumperPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isEnabled(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Bumper_isEnabledPtr
newCallback_Bumper_isEnabled(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_isEnabled<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bumper_isEnabledPtr
newCallback_Bumper_isEnabled(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_isEnabled<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Bumper_reset : public Callback_Bumper_reset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Bumper_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Bumper_resetPtr
newCallback_Bumper_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bumper_resetPtr
newCallback_Bumper_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_reset<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Bumper_resetPtr
newCallback_Bumper_reset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bumper_resetPtr
newCallback_Bumper_reset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_reset<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bumper_reset : public Callback_Bumper_reset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Bumper_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Bumper_resetPtr
newCallback_Bumper_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bumper_resetPtr
newCallback_Bumper_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_reset<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Bumper_resetPtr
newCallback_Bumper_reset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bumper_resetPtr
newCallback_Bumper_reset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_reset<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Bumper_getSensorData : public Callback_Bumper_getSensorData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompBumper::SensorStateMap&);

    CallbackNC_Bumper_getSensorData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompBumper::BumperPrx __proxy = ::RoboCompBumper::BumperPrx::uncheckedCast(__result->getProxy());
        ::RoboCompBumper::SensorStateMap __ret;
        try
        {
            __ret = __proxy->end_getSensorData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Bumper_getSensorDataPtr
newCallback_Bumper_getSensorData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompBumper::SensorStateMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_getSensorData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Bumper_getSensorDataPtr
newCallback_Bumper_getSensorData(T* instance, void (T::*cb)(const ::RoboCompBumper::SensorStateMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Bumper_getSensorData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Bumper_getSensorData : public Callback_Bumper_getSensorData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompBumper::SensorStateMap&, const CT&);

    Callback_Bumper_getSensorData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompBumper::BumperPrx __proxy = ::RoboCompBumper::BumperPrx::uncheckedCast(__result->getProxy());
        ::RoboCompBumper::SensorStateMap __ret;
        try
        {
            __ret = __proxy->end_getSensorData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Bumper_getSensorDataPtr
newCallback_Bumper_getSensorData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompBumper::SensorStateMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_getSensorData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Bumper_getSensorDataPtr
newCallback_Bumper_getSensorData(T* instance, void (T::*cb)(const ::RoboCompBumper::SensorStateMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Bumper_getSensorData<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
