// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `RGBD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ___home_ironman_gazebo_robocomp_slice____slice_cpp__RGBD_h__
#define ___home_ironman_gazebo_robocomp_slice____slice_cpp__RGBD_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <JointMotor.h>
#include <GenericBase.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompRGBD
{

class RGBD;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRGBD::RGBD>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompRGBD::RGBD*);

}

}

namespace RoboCompRGBD
{

class RGBD;
::Ice::Object* upCast(::RoboCompRGBD::RGBD*);
typedef ::IceInternal::Handle< ::RoboCompRGBD::RGBD> RGBDPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRGBD::RGBD> RGBDPrx;
void __patch(RGBDPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompRGBD
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    explicit HardwareFailedException(const ::std::string&);
    virtual ~HardwareFailedException() throw();

    virtual ::std::string ice_name() const;
    virtual HardwareFailedException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

static HardwareFailedException __HardwareFailedException_init;

enum Registration
{
    None,
    DepthInColor,
    ColorInDepth
};

typedef ::std::vector< ::Ice::Byte> imgType;

typedef ::std::vector< ::Ice::Float> depthType;

struct ColorRGB
{
    ::Ice::Byte red;
    ::Ice::Byte green;
    ::Ice::Byte blue;

    bool operator==(const ColorRGB& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(red != __rhs.red)
        {
            return false;
        }
        if(green != __rhs.green)
        {
            return false;
        }
        if(blue != __rhs.blue)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ColorRGB& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(red < __rhs.red)
        {
            return true;
        }
        else if(__rhs.red < red)
        {
            return false;
        }
        if(green < __rhs.green)
        {
            return true;
        }
        else if(__rhs.green < green)
        {
            return false;
        }
        if(blue < __rhs.blue)
        {
            return true;
        }
        else if(__rhs.blue < blue)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ColorRGB& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ColorRGB& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ColorRGB& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ColorRGB& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct PointXYZ
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float w;
};

typedef ::std::vector< ::Ice::Float> DepthSeq;

typedef ::std::vector< ::RoboCompRGBD::ColorRGB> ColorSeq;

typedef ::std::vector< ::RoboCompRGBD::PointXYZ> PointSeq;

struct CameraParameters
{
    ::Ice::Int focal;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Int size;
    ::Ice::Int FPS;

    bool operator==(const CameraParameters& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(focal != __rhs.focal)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        if(height != __rhs.height)
        {
            return false;
        }
        if(size != __rhs.size)
        {
            return false;
        }
        if(FPS != __rhs.FPS)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CameraParameters& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(focal < __rhs.focal)
        {
            return true;
        }
        else if(__rhs.focal < focal)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        if(height < __rhs.height)
        {
            return true;
        }
        else if(__rhs.height < height)
        {
            return false;
        }
        if(size < __rhs.size)
        {
            return true;
        }
        else if(__rhs.size < size)
        {
            return false;
        }
        if(FPS < __rhs.FPS)
        {
            return true;
        }
        else if(__rhs.FPS < FPS)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CameraParameters& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const CameraParameters& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const CameraParameters& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const CameraParameters& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct TRGBDParams
{
    ::RoboCompRGBD::CameraParameters color;
    ::RoboCompRGBD::CameraParameters depth;
    ::Ice::Int timerPeriod;
    bool talkToBase;
    bool talkToJointMotor;
    ::std::string driver;
    ::std::string device;

    bool operator==(const TRGBDParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(color != __rhs.color)
        {
            return false;
        }
        if(depth != __rhs.depth)
        {
            return false;
        }
        if(timerPeriod != __rhs.timerPeriod)
        {
            return false;
        }
        if(talkToBase != __rhs.talkToBase)
        {
            return false;
        }
        if(talkToJointMotor != __rhs.talkToJointMotor)
        {
            return false;
        }
        if(driver != __rhs.driver)
        {
            return false;
        }
        if(device != __rhs.device)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TRGBDParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(color < __rhs.color)
        {
            return true;
        }
        else if(__rhs.color < color)
        {
            return false;
        }
        if(depth < __rhs.depth)
        {
            return true;
        }
        else if(__rhs.depth < depth)
        {
            return false;
        }
        if(timerPeriod < __rhs.timerPeriod)
        {
            return true;
        }
        else if(__rhs.timerPeriod < timerPeriod)
        {
            return false;
        }
        if(talkToBase < __rhs.talkToBase)
        {
            return true;
        }
        else if(__rhs.talkToBase < talkToBase)
        {
            return false;
        }
        if(talkToJointMotor < __rhs.talkToJointMotor)
        {
            return true;
        }
        else if(__rhs.talkToJointMotor < talkToJointMotor)
        {
            return false;
        }
        if(driver < __rhs.driver)
        {
            return true;
        }
        else if(__rhs.driver < driver)
        {
            return false;
        }
        if(device < __rhs.device)
        {
            return true;
        }
        else if(__rhs.device < device)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TRGBDParams& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TRGBDParams& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TRGBDParams& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TRGBDParams& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompRGBD::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompRGBD::Registration>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompRGBD::ColorRGB>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompRGBD::ColorRGB, S>
{
    static void write(S* __os, const ::RoboCompRGBD::ColorRGB& v)
    {
        __os->write(v.red);
        __os->write(v.green);
        __os->write(v.blue);
    }
};

template<class S>
struct StreamReader< ::RoboCompRGBD::ColorRGB, S>
{
    static void read(S* __is, ::RoboCompRGBD::ColorRGB& v)
    {
        __is->read(v.red);
        __is->read(v.green);
        __is->read(v.blue);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBD::PointXYZ>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompRGBD::PointXYZ, S>
{
    static void write(S* __os, const ::RoboCompRGBD::PointXYZ& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
        __os->write(v.w);
    }
};

template<class S>
struct StreamReader< ::RoboCompRGBD::PointXYZ, S>
{
    static void read(S* __is, ::RoboCompRGBD::PointXYZ& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
        __is->read(v.w);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBD::CameraParameters>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 20;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompRGBD::CameraParameters, S>
{
    static void write(S* __os, const ::RoboCompRGBD::CameraParameters& v)
    {
        __os->write(v.focal);
        __os->write(v.width);
        __os->write(v.height);
        __os->write(v.size);
        __os->write(v.FPS);
    }
};

template<class S>
struct StreamReader< ::RoboCompRGBD::CameraParameters, S>
{
    static void read(S* __is, ::RoboCompRGBD::CameraParameters& v)
    {
        __is->read(v.focal);
        __is->read(v.width);
        __is->read(v.height);
        __is->read(v.size);
        __is->read(v.FPS);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBD::TRGBDParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 48;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompRGBD::TRGBDParams, S>
{
    static void write(S* __os, const ::RoboCompRGBD::TRGBDParams& v)
    {
        __os->write(v.color);
        __os->write(v.depth);
        __os->write(v.timerPeriod);
        __os->write(v.talkToBase);
        __os->write(v.talkToJointMotor);
        __os->write(v.driver);
        __os->write(v.device);
    }
};

template<class S>
struct StreamReader< ::RoboCompRGBD::TRGBDParams, S>
{
    static void read(S* __is, ::RoboCompRGBD::TRGBDParams& v)
    {
        __is->read(v.color);
        __is->read(v.depth);
        __is->read(v.timerPeriod);
        __is->read(v.talkToBase);
        __is->read(v.talkToJointMotor);
        __is->read(v.driver);
        __is->read(v.device);
    }
};

}

namespace RoboCompRGBD
{

class Callback_RGBD_getRGBDParams_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getRGBDParams_Base> Callback_RGBD_getRGBDParamsPtr;

class Callback_RGBD_setRegistration_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_setRegistration_Base> Callback_RGBD_setRegistrationPtr;

class Callback_RGBD_getRegistration_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getRegistration_Base> Callback_RGBD_getRegistrationPtr;

class Callback_RGBD_getData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getData_Base> Callback_RGBD_getDataPtr;

class Callback_RGBD_getDepthInIR_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getDepthInIR_Base> Callback_RGBD_getDepthInIRPtr;

class Callback_RGBD_getImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getImage_Base> Callback_RGBD_getImagePtr;

class Callback_RGBD_getDepth_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getDepth_Base> Callback_RGBD_getDepthPtr;

class Callback_RGBD_getRGB_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getRGB_Base> Callback_RGBD_getRGBPtr;

class Callback_RGBD_getXYZ_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getXYZ_Base> Callback_RGBD_getXYZPtr;

}

namespace IceProxy
{

namespace RoboCompRGBD
{

class RGBD : virtual public ::IceProxy::Ice::Object
{
public:

    ::RoboCompRGBD::TRGBDParams getRGBDParams()
    {
        return getRGBDParams(0);
    }
    ::RoboCompRGBD::TRGBDParams getRGBDParams(const ::Ice::Context& __ctx)
    {
        return getRGBDParams(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRGBDParams(const ::IceInternal::Function<void (const ::RoboCompRGBD::TRGBDParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRGBDParams(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRGBDParams(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRGBDParams(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRGBDParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::TRGBDParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRGBDParams(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRGBDParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRGBDParams(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRGBDParams(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::TRGBDParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRGBDParams()
    {
        return begin_getRGBDParams(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRGBDParams(const ::Ice::Context& __ctx)
    {
        return begin_getRGBDParams(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRGBDParams(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGBDParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBDParams(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGBDParams(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBDParams(const ::RoboCompRGBD::Callback_RGBD_getRGBDParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGBDParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBDParams(const ::Ice::Context& __ctx, const ::RoboCompRGBD::Callback_RGBD_getRGBDParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGBDParams(&__ctx, __del, __cookie);
    }

    ::RoboCompRGBD::TRGBDParams end_getRGBDParams(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompRGBD::TRGBDParams getRGBDParams(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRGBDParams(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setRegistration(::RoboCompRGBD::Registration __p_value)
    {
        setRegistration(__p_value, 0);
    }
    void setRegistration(::RoboCompRGBD::Registration __p_value, const ::Ice::Context& __ctx)
    {
        setRegistration(__p_value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setRegistration(::RoboCompRGBD::Registration __p_value, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setRegistration(__p_value, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setRegistration(::RoboCompRGBD::Registration __p_value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRegistration(__p_value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setRegistration(::RoboCompRGBD::Registration __p_value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setRegistration(__p_value, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setRegistration(::RoboCompRGBD::Registration __p_value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setRegistration(__p_value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setRegistration(::RoboCompRGBD::Registration __p_value, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setRegistration(::RoboCompRGBD::Registration __p_value)
    {
        return begin_setRegistration(__p_value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRegistration(::RoboCompRGBD::Registration __p_value, const ::Ice::Context& __ctx)
    {
        return begin_setRegistration(__p_value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRegistration(::RoboCompRGBD::Registration __p_value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRegistration(__p_value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRegistration(::RoboCompRGBD::Registration __p_value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRegistration(__p_value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRegistration(::RoboCompRGBD::Registration __p_value, const ::RoboCompRGBD::Callback_RGBD_setRegistrationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRegistration(__p_value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setRegistration(::RoboCompRGBD::Registration __p_value, const ::Ice::Context& __ctx, const ::RoboCompRGBD::Callback_RGBD_setRegistrationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setRegistration(__p_value, &__ctx, __del, __cookie);
    }

    void end_setRegistration(const ::Ice::AsyncResultPtr&);
    
private:

    void setRegistration(::RoboCompRGBD::Registration, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setRegistration(::RoboCompRGBD::Registration, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompRGBD::Registration getRegistration()
    {
        return getRegistration(0);
    }
    ::RoboCompRGBD::Registration getRegistration(const ::Ice::Context& __ctx)
    {
        return getRegistration(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRegistration(const ::IceInternal::Function<void (::RoboCompRGBD::Registration)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRegistration(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRegistration(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRegistration(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRegistration(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::RoboCompRGBD::Registration)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRegistration(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRegistration(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRegistration(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRegistration(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::RoboCompRGBD::Registration)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRegistration()
    {
        return begin_getRegistration(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRegistration(const ::Ice::Context& __ctx)
    {
        return begin_getRegistration(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRegistration(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRegistration(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRegistration(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRegistration(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRegistration(const ::RoboCompRGBD::Callback_RGBD_getRegistrationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRegistration(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRegistration(const ::Ice::Context& __ctx, const ::RoboCompRGBD::Callback_RGBD_getRegistrationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRegistration(&__ctx, __del, __cookie);
    }

    ::RoboCompRGBD::Registration end_getRegistration(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompRGBD::Registration getRegistration(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRegistration(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getData(::RoboCompRGBD::imgType& __p_rgbMatrix, ::RoboCompRGBD::depthType& __p_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState)
    {
        getData(__p_rgbMatrix, __p_distanceMatrix, __p_hState, __p_bState, 0);
    }
    void getData(::RoboCompRGBD::imgType& __p_rgbMatrix, ::RoboCompRGBD::depthType& __p_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context& __ctx)
    {
        getData(__p_rgbMatrix, __p_distanceMatrix, __p_hState, __p_bState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getData(const ::IceInternal::Function<void (const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getData(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getData(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getData(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getData(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getData(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getData()
    {
        return begin_getData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& __ctx)
    {
        return begin_getData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::RoboCompRGBD::Callback_RGBD_getDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& __ctx, const ::RoboCompRGBD::Callback_RGBD_getDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getData(&__ctx, __del, __cookie);
    }

    void end_getData(::RoboCompRGBD::imgType& __p_rgbMatrix, ::RoboCompRGBD::depthType& __p_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr&);
    
private:

    void getData(::RoboCompRGBD::imgType&, ::RoboCompRGBD::depthType&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getDepthInIR(::RoboCompRGBD::depthType& __p_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState)
    {
        getDepthInIR(__p_distanceMatrix, __p_hState, __p_bState, 0);
    }
    void getDepthInIR(::RoboCompRGBD::depthType& __p_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context& __ctx)
    {
        getDepthInIR(__p_distanceMatrix, __p_hState, __p_bState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDepthInIR(const ::IceInternal::Function<void (const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDepthInIR(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDepthInIR(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDepthInIR(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDepthInIR(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDepthInIR(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDepthInIR(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDepthInIR(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDepthInIR(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDepthInIR()
    {
        return begin_getDepthInIR(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDepthInIR(const ::Ice::Context& __ctx)
    {
        return begin_getDepthInIR(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDepthInIR(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDepthInIR(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepthInIR(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDepthInIR(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepthInIR(const ::RoboCompRGBD::Callback_RGBD_getDepthInIRPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDepthInIR(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepthInIR(const ::Ice::Context& __ctx, const ::RoboCompRGBD::Callback_RGBD_getDepthInIRPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDepthInIR(&__ctx, __del, __cookie);
    }

    void end_getDepthInIR(::RoboCompRGBD::depthType& __p_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr&);
    
private:

    void getDepthInIR(::RoboCompRGBD::depthType&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDepthInIR(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getImage(::RoboCompRGBD::ColorSeq& __p_color, ::RoboCompRGBD::DepthSeq& __p_depth, ::RoboCompRGBD::PointSeq& __p_points, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState)
    {
        getImage(__p_color, __p_depth, __p_points, __p_hState, __p_bState, 0);
    }
    void getImage(::RoboCompRGBD::ColorSeq& __p_color, ::RoboCompRGBD::DepthSeq& __p_depth, ::RoboCompRGBD::PointSeq& __p_points, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context& __ctx)
    {
        getImage(__p_color, __p_depth, __p_points, __p_hState, __p_bState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getImage(const ::IceInternal::Function<void (const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImage(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImage(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImage(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getImage(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImage(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImage(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImage(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getImage(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getImage()
    {
        return begin_getImage(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& __ctx)
    {
        return begin_getImage(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImage(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::RoboCompRGBD::Callback_RGBD_getImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImage(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& __ctx, const ::RoboCompRGBD::Callback_RGBD_getImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImage(&__ctx, __del, __cookie);
    }

    void end_getImage(::RoboCompRGBD::ColorSeq& __p_color, ::RoboCompRGBD::DepthSeq& __p_depth, ::RoboCompRGBD::PointSeq& __p_points, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr&);
    
private:

    void getImage(::RoboCompRGBD::ColorSeq&, ::RoboCompRGBD::DepthSeq&, ::RoboCompRGBD::PointSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getDepth(::RoboCompRGBD::DepthSeq& __p_depth, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState)
    {
        getDepth(__p_depth, __p_hState, __p_bState, 0);
    }
    void getDepth(::RoboCompRGBD::DepthSeq& __p_depth, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context& __ctx)
    {
        getDepth(__p_depth, __p_hState, __p_bState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDepth(const ::IceInternal::Function<void (const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDepth(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDepth(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDepth(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDepth(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDepth(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDepth(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDepth(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDepth(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDepth()
    {
        return begin_getDepth(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::Ice::Context& __ctx)
    {
        return begin_getDepth(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDepth(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDepth(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::RoboCompRGBD::Callback_RGBD_getDepthPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDepth(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::Ice::Context& __ctx, const ::RoboCompRGBD::Callback_RGBD_getDepthPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDepth(&__ctx, __del, __cookie);
    }

    void end_getDepth(::RoboCompRGBD::DepthSeq& __p_depth, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr&);
    
private:

    void getDepth(::RoboCompRGBD::DepthSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDepth(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getRGB(::RoboCompRGBD::ColorSeq& __p_color, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState)
    {
        getRGB(__p_color, __p_hState, __p_bState, 0);
    }
    void getRGB(::RoboCompRGBD::ColorSeq& __p_color, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context& __ctx)
    {
        getRGB(__p_color, __p_hState, __p_bState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRGB(const ::IceInternal::Function<void (const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRGB(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRGB(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRGB(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRGB(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRGB(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRGB(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRGB(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRGB(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRGB()
    {
        return begin_getRGB(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRGB(const ::Ice::Context& __ctx)
    {
        return begin_getRGB(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRGB(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGB(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGB(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGB(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGB(const ::RoboCompRGBD::Callback_RGBD_getRGBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGB(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGB(const ::Ice::Context& __ctx, const ::RoboCompRGBD::Callback_RGBD_getRGBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGB(&__ctx, __del, __cookie);
    }

    void end_getRGB(::RoboCompRGBD::ColorSeq& __p_color, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr&);
    
private:

    void getRGB(::RoboCompRGBD::ColorSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRGB(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getXYZ(::RoboCompRGBD::PointSeq& __p_points, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState)
    {
        getXYZ(__p_points, __p_hState, __p_bState, 0);
    }
    void getXYZ(::RoboCompRGBD::PointSeq& __p_points, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context& __ctx)
    {
        getXYZ(__p_points, __p_hState, __p_bState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getXYZ(const ::IceInternal::Function<void (const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getXYZ(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getXYZ(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getXYZ(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getXYZ(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getXYZ(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getXYZ(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getXYZ(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getXYZ(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getXYZ()
    {
        return begin_getXYZ(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getXYZ(const ::Ice::Context& __ctx)
    {
        return begin_getXYZ(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getXYZ(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getXYZ(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getXYZ(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getXYZ(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getXYZ(const ::RoboCompRGBD::Callback_RGBD_getXYZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getXYZ(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getXYZ(const ::Ice::Context& __ctx, const ::RoboCompRGBD::Callback_RGBD_getXYZPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getXYZ(&__ctx, __del, __cookie);
    }

    void end_getXYZ(::RoboCompRGBD::PointSeq& __p_points, ::RoboCompJointMotor::MotorStateMap& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr&);
    
private:

    void getXYZ(::RoboCompRGBD::PointSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getXYZ(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RGBD> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_secure(bool __secure) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_twoway() const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_oneway() const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_batchOneway() const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_datagram() const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_batchDatagram() const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_compress(bool __compress) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RGBD> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RGBD*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace RoboCompRGBD
{

class RGBD : virtual public ::Ice::Object
{
public:

    typedef RGBDPrx ProxyType;
    typedef RGBDPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::RoboCompRGBD::TRGBDParams getRGBDParams(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRGBDParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRegistration(::RoboCompRGBD::Registration, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setRegistration(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompRGBD::Registration getRegistration(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRegistration(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getData(::RoboCompRGBD::imgType&, ::RoboCompRGBD::depthType&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDepthInIR(::RoboCompRGBD::depthType&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDepthInIR(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getImage(::RoboCompRGBD::ColorSeq&, ::RoboCompRGBD::DepthSeq&, ::RoboCompRGBD::PointSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDepth(::RoboCompRGBD::DepthSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDepth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getRGB(::RoboCompRGBD::ColorSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRGB(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getXYZ(::RoboCompRGBD::PointSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getXYZ(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const RGBD& l, const RGBD& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RGBD& l, const RGBD& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompRGBD
{

template<class T>
class CallbackNC_RGBD_getRGBDParams : public Callback_RGBD_getRGBDParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::TRGBDParams&);

    CallbackNC_RGBD_getRGBDParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::TRGBDParams __ret;
        try
        {
            __ret = __proxy->end_getRGBDParams(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RGBD_getRGBDParamsPtr
newCallback_RGBD_getRGBDParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::TRGBDParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getRGBDParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getRGBDParamsPtr
newCallback_RGBD_getRGBDParams(T* instance, void (T::*cb)(const ::RoboCompRGBD::TRGBDParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getRGBDParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getRGBDParams : public Callback_RGBD_getRGBDParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::TRGBDParams&, const CT&);

    Callback_RGBD_getRGBDParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::TRGBDParams __ret;
        try
        {
            __ret = __proxy->end_getRGBDParams(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getRGBDParamsPtr
newCallback_RGBD_getRGBDParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::TRGBDParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getRGBDParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getRGBDParamsPtr
newCallback_RGBD_getRGBDParams(T* instance, void (T::*cb)(const ::RoboCompRGBD::TRGBDParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getRGBDParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_setRegistration : public Callback_RGBD_setRegistration_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RGBD_setRegistration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setRegistration(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_setRegistration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_setRegistration<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_setRegistration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_setRegistration<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_setRegistration : public Callback_RGBD_setRegistration_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RGBD_setRegistration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setRegistration(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_setRegistration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_setRegistration<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_setRegistration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_setRegistration<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getRegistration : public Callback_RGBD_getRegistration_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::RoboCompRGBD::Registration);

    CallbackNC_RGBD_getRegistration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::Registration __ret;
        try
        {
            __ret = __proxy->end_getRegistration(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RGBD_getRegistrationPtr
newCallback_RGBD_getRegistration(const IceUtil::Handle<T>& instance, void (T::*cb)(::RoboCompRGBD::Registration), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getRegistration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getRegistrationPtr
newCallback_RGBD_getRegistration(T* instance, void (T::*cb)(::RoboCompRGBD::Registration), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getRegistration<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getRegistration : public Callback_RGBD_getRegistration_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::RoboCompRGBD::Registration, const CT&);

    Callback_RGBD_getRegistration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::Registration __ret;
        try
        {
            __ret = __proxy->end_getRegistration(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getRegistrationPtr
newCallback_RGBD_getRegistration(const IceUtil::Handle<T>& instance, void (T::*cb)(::RoboCompRGBD::Registration, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getRegistration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getRegistrationPtr
newCallback_RGBD_getRegistration(T* instance, void (T::*cb)(::RoboCompRGBD::Registration, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getRegistration<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getData : public Callback_RGBD_getData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_RGBD_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::imgType rgbMatrix;
        ::RoboCompRGBD::depthType distanceMatrix;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getData(rgbMatrix, distanceMatrix, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(rgbMatrix, distanceMatrix, hState, bState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RGBD_getDataPtr
newCallback_RGBD_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getDataPtr
newCallback_RGBD_getData(T* instance, void (T::*cb)(const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getData : public Callback_RGBD_getData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_RGBD_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::imgType rgbMatrix;
        ::RoboCompRGBD::depthType distanceMatrix;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getData(rgbMatrix, distanceMatrix, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(rgbMatrix, distanceMatrix, hState, bState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getDataPtr
newCallback_RGBD_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getDataPtr
newCallback_RGBD_getData(T* instance, void (T::*cb)(const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getDepthInIR : public Callback_RGBD_getDepthInIR_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_RGBD_getDepthInIR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::depthType distanceMatrix;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getDepthInIR(distanceMatrix, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(distanceMatrix, hState, bState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RGBD_getDepthInIRPtr
newCallback_RGBD_getDepthInIR(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getDepthInIR<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getDepthInIRPtr
newCallback_RGBD_getDepthInIR(T* instance, void (T::*cb)(const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getDepthInIR<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getDepthInIR : public Callback_RGBD_getDepthInIR_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_RGBD_getDepthInIR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::depthType distanceMatrix;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getDepthInIR(distanceMatrix, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(distanceMatrix, hState, bState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getDepthInIRPtr
newCallback_RGBD_getDepthInIR(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getDepthInIR<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getDepthInIRPtr
newCallback_RGBD_getDepthInIR(T* instance, void (T::*cb)(const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getDepthInIR<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getImage : public Callback_RGBD_getImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_RGBD_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::ColorSeq color;
        ::RoboCompRGBD::DepthSeq depth;
        ::RoboCompRGBD::PointSeq points;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getImage(color, depth, points, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(color, depth, points, hState, bState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RGBD_getImagePtr
newCallback_RGBD_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getImagePtr
newCallback_RGBD_getImage(T* instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getImage : public Callback_RGBD_getImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_RGBD_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::ColorSeq color;
        ::RoboCompRGBD::DepthSeq depth;
        ::RoboCompRGBD::PointSeq points;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getImage(color, depth, points, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(color, depth, points, hState, bState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getImagePtr
newCallback_RGBD_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getImagePtr
newCallback_RGBD_getImage(T* instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getDepth : public Callback_RGBD_getDepth_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_RGBD_getDepth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::DepthSeq depth;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getDepth(depth, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(depth, hState, bState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RGBD_getDepthPtr
newCallback_RGBD_getDepth(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getDepth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getDepthPtr
newCallback_RGBD_getDepth(T* instance, void (T::*cb)(const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getDepth<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getDepth : public Callback_RGBD_getDepth_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_RGBD_getDepth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::DepthSeq depth;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getDepth(depth, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(depth, hState, bState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getDepthPtr
newCallback_RGBD_getDepth(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getDepth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getDepthPtr
newCallback_RGBD_getDepth(T* instance, void (T::*cb)(const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getDepth<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getRGB : public Callback_RGBD_getRGB_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_RGBD_getRGB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::ColorSeq color;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getRGB(color, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(color, hState, bState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RGBD_getRGBPtr
newCallback_RGBD_getRGB(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getRGB<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getRGBPtr
newCallback_RGBD_getRGB(T* instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getRGB<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getRGB : public Callback_RGBD_getRGB_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_RGBD_getRGB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::ColorSeq color;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getRGB(color, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(color, hState, bState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getRGBPtr
newCallback_RGBD_getRGB(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getRGB<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getRGBPtr
newCallback_RGBD_getRGB(T* instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getRGB<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getXYZ : public Callback_RGBD_getXYZ_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_RGBD_getXYZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::PointSeq points;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getXYZ(points, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(points, hState, bState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RGBD_getXYZPtr
newCallback_RGBD_getXYZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getXYZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getXYZPtr
newCallback_RGBD_getXYZ(T* instance, void (T::*cb)(const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getXYZ<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getXYZ : public Callback_RGBD_getXYZ_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_RGBD_getXYZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRGBD::RGBDPrx __proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRGBD::PointSeq points;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getXYZ(points, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(points, hState, bState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getXYZPtr
newCallback_RGBD_getXYZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getXYZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getXYZPtr
newCallback_RGBD_getXYZ(T* instance, void (T::*cb)(const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getXYZ<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
