// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `IMU.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ___home_ironman_gazebo_robocomp_slice____slice_cpp__IMU_h__
#define ___home_ironman_gazebo_robocomp_slice____slice_cpp__IMU_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompIMU
{

class IMU;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompIMU::IMU>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompIMU::IMU*);

}

}

namespace RoboCompIMU
{

class IMU;
::Ice::Object* upCast(::RoboCompIMU::IMU*);
typedef ::IceInternal::Handle< ::RoboCompIMU::IMU> IMUPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompIMU::IMU> IMUPrx;
void __patch(IMUPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompIMU
{

struct Acceleration
{
    ::Ice::Float XAcc;
    ::Ice::Float YAcc;
    ::Ice::Float ZAcc;
};

struct Gyroscope
{
    ::Ice::Float XGyr;
    ::Ice::Float YGyr;
    ::Ice::Float ZGyr;
};

struct Magnetic
{
    ::Ice::Float XMag;
    ::Ice::Float YMag;
    ::Ice::Float ZMag;
};

struct Orientation
{
    ::Ice::Float Roll;
    ::Ice::Float Pitch;
    ::Ice::Float Yaw;
};

struct DataImu
{
    ::RoboCompIMU::Acceleration acc;
    ::RoboCompIMU::Gyroscope gyro;
    ::RoboCompIMU::Magnetic mag;
    ::RoboCompIMU::Orientation rot;
    ::Ice::Float temperature;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompIMU::Acceleration>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompIMU::Acceleration, S>
{
    static void write(S* __os, const ::RoboCompIMU::Acceleration& v)
    {
        __os->write(v.XAcc);
        __os->write(v.YAcc);
        __os->write(v.ZAcc);
    }
};

template<class S>
struct StreamReader< ::RoboCompIMU::Acceleration, S>
{
    static void read(S* __is, ::RoboCompIMU::Acceleration& v)
    {
        __is->read(v.XAcc);
        __is->read(v.YAcc);
        __is->read(v.ZAcc);
    }
};

template<>
struct StreamableTraits< ::RoboCompIMU::Gyroscope>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompIMU::Gyroscope, S>
{
    static void write(S* __os, const ::RoboCompIMU::Gyroscope& v)
    {
        __os->write(v.XGyr);
        __os->write(v.YGyr);
        __os->write(v.ZGyr);
    }
};

template<class S>
struct StreamReader< ::RoboCompIMU::Gyroscope, S>
{
    static void read(S* __is, ::RoboCompIMU::Gyroscope& v)
    {
        __is->read(v.XGyr);
        __is->read(v.YGyr);
        __is->read(v.ZGyr);
    }
};

template<>
struct StreamableTraits< ::RoboCompIMU::Magnetic>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompIMU::Magnetic, S>
{
    static void write(S* __os, const ::RoboCompIMU::Magnetic& v)
    {
        __os->write(v.XMag);
        __os->write(v.YMag);
        __os->write(v.ZMag);
    }
};

template<class S>
struct StreamReader< ::RoboCompIMU::Magnetic, S>
{
    static void read(S* __is, ::RoboCompIMU::Magnetic& v)
    {
        __is->read(v.XMag);
        __is->read(v.YMag);
        __is->read(v.ZMag);
    }
};

template<>
struct StreamableTraits< ::RoboCompIMU::Orientation>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompIMU::Orientation, S>
{
    static void write(S* __os, const ::RoboCompIMU::Orientation& v)
    {
        __os->write(v.Roll);
        __os->write(v.Pitch);
        __os->write(v.Yaw);
    }
};

template<class S>
struct StreamReader< ::RoboCompIMU::Orientation, S>
{
    static void read(S* __is, ::RoboCompIMU::Orientation& v)
    {
        __is->read(v.Roll);
        __is->read(v.Pitch);
        __is->read(v.Yaw);
    }
};

template<>
struct StreamableTraits< ::RoboCompIMU::DataImu>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 52;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::RoboCompIMU::DataImu, S>
{
    static void write(S* __os, const ::RoboCompIMU::DataImu& v)
    {
        __os->write(v.acc);
        __os->write(v.gyro);
        __os->write(v.mag);
        __os->write(v.rot);
        __os->write(v.temperature);
    }
};

template<class S>
struct StreamReader< ::RoboCompIMU::DataImu, S>
{
    static void read(S* __is, ::RoboCompIMU::DataImu& v)
    {
        __is->read(v.acc);
        __is->read(v.gyro);
        __is->read(v.mag);
        __is->read(v.rot);
        __is->read(v.temperature);
    }
};

}

namespace RoboCompIMU
{

class Callback_IMU_getDataImu_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMU_getDataImu_Base> Callback_IMU_getDataImuPtr;

class Callback_IMU_getAcceleration_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMU_getAcceleration_Base> Callback_IMU_getAccelerationPtr;

class Callback_IMU_getAngularVel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMU_getAngularVel_Base> Callback_IMU_getAngularVelPtr;

class Callback_IMU_getMagneticFields_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMU_getMagneticFields_Base> Callback_IMU_getMagneticFieldsPtr;

class Callback_IMU_getOrientation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMU_getOrientation_Base> Callback_IMU_getOrientationPtr;

class Callback_IMU_resetImu_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMU_resetImu_Base> Callback_IMU_resetImuPtr;

}

namespace IceProxy
{

namespace RoboCompIMU
{

class IMU : virtual public ::IceProxy::Ice::Object
{
public:

    ::RoboCompIMU::DataImu getDataImu()
    {
        return getDataImu(0);
    }
    ::RoboCompIMU::DataImu getDataImu(const ::Ice::Context& __ctx)
    {
        return getDataImu(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDataImu(const ::IceInternal::Function<void (const ::RoboCompIMU::DataImu&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDataImu(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDataImu(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDataImu(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDataImu(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::DataImu&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDataImu(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDataImu(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDataImu(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDataImu(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::DataImu&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDataImu()
    {
        return begin_getDataImu(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDataImu(const ::Ice::Context& __ctx)
    {
        return begin_getDataImu(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDataImu(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDataImu(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDataImu(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDataImu(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDataImu(const ::RoboCompIMU::Callback_IMU_getDataImuPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDataImu(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDataImu(const ::Ice::Context& __ctx, const ::RoboCompIMU::Callback_IMU_getDataImuPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDataImu(&__ctx, __del, __cookie);
    }

    ::RoboCompIMU::DataImu end_getDataImu(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompIMU::DataImu getDataImu(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDataImu(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompIMU::Acceleration getAcceleration()
    {
        return getAcceleration(0);
    }
    ::RoboCompIMU::Acceleration getAcceleration(const ::Ice::Context& __ctx)
    {
        return getAcceleration(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAcceleration(const ::IceInternal::Function<void (const ::RoboCompIMU::Acceleration&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAcceleration(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAcceleration(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAcceleration(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAcceleration(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::Acceleration&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAcceleration(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAcceleration(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAcceleration(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAcceleration(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::Acceleration&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAcceleration()
    {
        return begin_getAcceleration(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAcceleration(const ::Ice::Context& __ctx)
    {
        return begin_getAcceleration(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAcceleration(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAcceleration(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAcceleration(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAcceleration(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAcceleration(const ::RoboCompIMU::Callback_IMU_getAccelerationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAcceleration(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAcceleration(const ::Ice::Context& __ctx, const ::RoboCompIMU::Callback_IMU_getAccelerationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAcceleration(&__ctx, __del, __cookie);
    }

    ::RoboCompIMU::Acceleration end_getAcceleration(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompIMU::Acceleration getAcceleration(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAcceleration(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompIMU::Gyroscope getAngularVel()
    {
        return getAngularVel(0);
    }
    ::RoboCompIMU::Gyroscope getAngularVel(const ::Ice::Context& __ctx)
    {
        return getAngularVel(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAngularVel(const ::IceInternal::Function<void (const ::RoboCompIMU::Gyroscope&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAngularVel(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAngularVel(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAngularVel(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAngularVel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::Gyroscope&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAngularVel(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAngularVel(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAngularVel(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAngularVel(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::Gyroscope&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAngularVel()
    {
        return begin_getAngularVel(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAngularVel(const ::Ice::Context& __ctx)
    {
        return begin_getAngularVel(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAngularVel(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAngularVel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAngularVel(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAngularVel(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAngularVel(const ::RoboCompIMU::Callback_IMU_getAngularVelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAngularVel(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAngularVel(const ::Ice::Context& __ctx, const ::RoboCompIMU::Callback_IMU_getAngularVelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAngularVel(&__ctx, __del, __cookie);
    }

    ::RoboCompIMU::Gyroscope end_getAngularVel(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompIMU::Gyroscope getAngularVel(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAngularVel(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompIMU::Magnetic getMagneticFields()
    {
        return getMagneticFields(0);
    }
    ::RoboCompIMU::Magnetic getMagneticFields(const ::Ice::Context& __ctx)
    {
        return getMagneticFields(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getMagneticFields(const ::IceInternal::Function<void (const ::RoboCompIMU::Magnetic&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMagneticFields(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMagneticFields(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMagneticFields(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getMagneticFields(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::Magnetic&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getMagneticFields(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getMagneticFields(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getMagneticFields(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getMagneticFields(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::Magnetic&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getMagneticFields()
    {
        return begin_getMagneticFields(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMagneticFields(const ::Ice::Context& __ctx)
    {
        return begin_getMagneticFields(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMagneticFields(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMagneticFields(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMagneticFields(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMagneticFields(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMagneticFields(const ::RoboCompIMU::Callback_IMU_getMagneticFieldsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMagneticFields(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getMagneticFields(const ::Ice::Context& __ctx, const ::RoboCompIMU::Callback_IMU_getMagneticFieldsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getMagneticFields(&__ctx, __del, __cookie);
    }

    ::RoboCompIMU::Magnetic end_getMagneticFields(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompIMU::Magnetic getMagneticFields(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getMagneticFields(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompIMU::Orientation getOrientation()
    {
        return getOrientation(0);
    }
    ::RoboCompIMU::Orientation getOrientation(const ::Ice::Context& __ctx)
    {
        return getOrientation(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOrientation(const ::IceInternal::Function<void (const ::RoboCompIMU::Orientation&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOrientation(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOrientation(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOrientation(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOrientation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::Orientation&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOrientation(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOrientation(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOrientation(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOrientation(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompIMU::Orientation&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOrientation()
    {
        return begin_getOrientation(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOrientation(const ::Ice::Context& __ctx)
    {
        return begin_getOrientation(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOrientation(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOrientation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOrientation(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOrientation(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOrientation(const ::RoboCompIMU::Callback_IMU_getOrientationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOrientation(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOrientation(const ::Ice::Context& __ctx, const ::RoboCompIMU::Callback_IMU_getOrientationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOrientation(&__ctx, __del, __cookie);
    }

    ::RoboCompIMU::Orientation end_getOrientation(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompIMU::Orientation getOrientation(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOrientation(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void resetImu()
    {
        resetImu(0);
    }
    void resetImu(const ::Ice::Context& __ctx)
    {
        resetImu(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_resetImu(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_resetImu(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_resetImu(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resetImu(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resetImu(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_resetImu(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resetImu(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resetImu(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_resetImu()
    {
        return begin_resetImu(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetImu(const ::Ice::Context& __ctx)
    {
        return begin_resetImu(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetImu(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetImu(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetImu(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetImu(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetImu(const ::RoboCompIMU::Callback_IMU_resetImuPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetImu(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetImu(const ::Ice::Context& __ctx, const ::RoboCompIMU::Callback_IMU_resetImuPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetImu(&__ctx, __del, __cookie);
    }

    void end_resetImu(const ::Ice::AsyncResultPtr&);
    
private:

    void resetImu(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_resetImu(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<IMU> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_secure(bool __secure) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_twoway() const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_oneway() const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_batchOneway() const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_datagram() const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_batchDatagram() const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_compress(bool __compress) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_timeout(int __timeout) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IMU> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<IMU*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace RoboCompIMU
{

class IMU : virtual public ::Ice::Object
{
public:

    typedef IMUPrx ProxyType;
    typedef IMUPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::RoboCompIMU::DataImu getDataImu(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDataImu(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompIMU::Acceleration getAcceleration(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAcceleration(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompIMU::Gyroscope getAngularVel(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAngularVel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompIMU::Magnetic getMagneticFields(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getMagneticFields(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompIMU::Orientation getOrientation(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOrientation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void resetImu(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___resetImu(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const IMU& l, const IMU& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IMU& l, const IMU& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompIMU
{

template<class T>
class CallbackNC_IMU_getDataImu : public Callback_IMU_getDataImu_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompIMU::DataImu&);

    CallbackNC_IMU_getDataImu(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
        ::RoboCompIMU::DataImu __ret;
        try
        {
            __ret = __proxy->end_getDataImu(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_IMU_getDataImuPtr
newCallback_IMU_getDataImu(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompIMU::DataImu&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getDataImu<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMU_getDataImuPtr
newCallback_IMU_getDataImu(T* instance, void (T::*cb)(const ::RoboCompIMU::DataImu&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getDataImu<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMU_getDataImu : public Callback_IMU_getDataImu_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompIMU::DataImu&, const CT&);

    Callback_IMU_getDataImu(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
        ::RoboCompIMU::DataImu __ret;
        try
        {
            __ret = __proxy->end_getDataImu(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_IMU_getDataImuPtr
newCallback_IMU_getDataImu(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompIMU::DataImu&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getDataImu<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMU_getDataImuPtr
newCallback_IMU_getDataImu(T* instance, void (T::*cb)(const ::RoboCompIMU::DataImu&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getDataImu<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMU_getAcceleration : public Callback_IMU_getAcceleration_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompIMU::Acceleration&);

    CallbackNC_IMU_getAcceleration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
        ::RoboCompIMU::Acceleration __ret;
        try
        {
            __ret = __proxy->end_getAcceleration(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_IMU_getAccelerationPtr
newCallback_IMU_getAcceleration(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompIMU::Acceleration&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getAcceleration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMU_getAccelerationPtr
newCallback_IMU_getAcceleration(T* instance, void (T::*cb)(const ::RoboCompIMU::Acceleration&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getAcceleration<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMU_getAcceleration : public Callback_IMU_getAcceleration_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompIMU::Acceleration&, const CT&);

    Callback_IMU_getAcceleration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
        ::RoboCompIMU::Acceleration __ret;
        try
        {
            __ret = __proxy->end_getAcceleration(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_IMU_getAccelerationPtr
newCallback_IMU_getAcceleration(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompIMU::Acceleration&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getAcceleration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMU_getAccelerationPtr
newCallback_IMU_getAcceleration(T* instance, void (T::*cb)(const ::RoboCompIMU::Acceleration&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getAcceleration<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMU_getAngularVel : public Callback_IMU_getAngularVel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompIMU::Gyroscope&);

    CallbackNC_IMU_getAngularVel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
        ::RoboCompIMU::Gyroscope __ret;
        try
        {
            __ret = __proxy->end_getAngularVel(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_IMU_getAngularVelPtr
newCallback_IMU_getAngularVel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompIMU::Gyroscope&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getAngularVel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMU_getAngularVelPtr
newCallback_IMU_getAngularVel(T* instance, void (T::*cb)(const ::RoboCompIMU::Gyroscope&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getAngularVel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMU_getAngularVel : public Callback_IMU_getAngularVel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompIMU::Gyroscope&, const CT&);

    Callback_IMU_getAngularVel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
        ::RoboCompIMU::Gyroscope __ret;
        try
        {
            __ret = __proxy->end_getAngularVel(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_IMU_getAngularVelPtr
newCallback_IMU_getAngularVel(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompIMU::Gyroscope&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getAngularVel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMU_getAngularVelPtr
newCallback_IMU_getAngularVel(T* instance, void (T::*cb)(const ::RoboCompIMU::Gyroscope&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getAngularVel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMU_getMagneticFields : public Callback_IMU_getMagneticFields_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompIMU::Magnetic&);

    CallbackNC_IMU_getMagneticFields(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
        ::RoboCompIMU::Magnetic __ret;
        try
        {
            __ret = __proxy->end_getMagneticFields(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_IMU_getMagneticFieldsPtr
newCallback_IMU_getMagneticFields(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompIMU::Magnetic&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getMagneticFields<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMU_getMagneticFieldsPtr
newCallback_IMU_getMagneticFields(T* instance, void (T::*cb)(const ::RoboCompIMU::Magnetic&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getMagneticFields<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMU_getMagneticFields : public Callback_IMU_getMagneticFields_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompIMU::Magnetic&, const CT&);

    Callback_IMU_getMagneticFields(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
        ::RoboCompIMU::Magnetic __ret;
        try
        {
            __ret = __proxy->end_getMagneticFields(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_IMU_getMagneticFieldsPtr
newCallback_IMU_getMagneticFields(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompIMU::Magnetic&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getMagneticFields<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMU_getMagneticFieldsPtr
newCallback_IMU_getMagneticFields(T* instance, void (T::*cb)(const ::RoboCompIMU::Magnetic&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getMagneticFields<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMU_getOrientation : public Callback_IMU_getOrientation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompIMU::Orientation&);

    CallbackNC_IMU_getOrientation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
        ::RoboCompIMU::Orientation __ret;
        try
        {
            __ret = __proxy->end_getOrientation(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_IMU_getOrientationPtr
newCallback_IMU_getOrientation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompIMU::Orientation&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getOrientation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMU_getOrientationPtr
newCallback_IMU_getOrientation(T* instance, void (T::*cb)(const ::RoboCompIMU::Orientation&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getOrientation<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMU_getOrientation : public Callback_IMU_getOrientation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompIMU::Orientation&, const CT&);

    Callback_IMU_getOrientation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompIMU::IMUPrx __proxy = ::RoboCompIMU::IMUPrx::uncheckedCast(__result->getProxy());
        ::RoboCompIMU::Orientation __ret;
        try
        {
            __ret = __proxy->end_getOrientation(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_IMU_getOrientationPtr
newCallback_IMU_getOrientation(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompIMU::Orientation&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getOrientation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMU_getOrientationPtr
newCallback_IMU_getOrientation(T* instance, void (T::*cb)(const ::RoboCompIMU::Orientation&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getOrientation<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IMU_resetImu : public Callback_IMU_resetImu_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IMU_resetImu(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_resetImu<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_resetImu<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_resetImu<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_resetImu<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IMU_resetImu : public Callback_IMU_resetImu_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IMU_resetImu(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_resetImu<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_resetImu<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_resetImu<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_resetImu<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
