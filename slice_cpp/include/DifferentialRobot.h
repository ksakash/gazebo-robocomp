// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `DifferentialRobot.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ___home_ironman_gazebo_robocomp_slice____slice_cpp__DifferentialRobot_h__
#define ___home_ironman_gazebo_robocomp_slice____slice_cpp__DifferentialRobot_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <GenericBase.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompDifferentialRobot
{

class DifferentialRobot;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDifferentialRobot::DifferentialRobot>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompDifferentialRobot::DifferentialRobot*);

}

}

namespace RoboCompDifferentialRobot
{

class DifferentialRobot;
::Ice::Object* upCast(::RoboCompDifferentialRobot::DifferentialRobot*);
typedef ::IceInternal::Handle< ::RoboCompDifferentialRobot::DifferentialRobot> DifferentialRobotPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDifferentialRobot::DifferentialRobot> DifferentialRobotPrx;
void __patch(DifferentialRobotPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompDifferentialRobot
{

struct TMechParams
{
    ::Ice::Int wheelRadius;
    ::Ice::Int axisLength;
    ::Ice::Int encoderSteps;
    ::Ice::Int gearRatio;
    ::Ice::Float temp;
    ::Ice::Float maxVelAdv;
    ::Ice::Float maxVelRot;
    ::std::string device;
    ::std::string handler;

    bool operator==(const TMechParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(wheelRadius != __rhs.wheelRadius)
        {
            return false;
        }
        if(axisLength != __rhs.axisLength)
        {
            return false;
        }
        if(encoderSteps != __rhs.encoderSteps)
        {
            return false;
        }
        if(gearRatio != __rhs.gearRatio)
        {
            return false;
        }
        if(temp != __rhs.temp)
        {
            return false;
        }
        if(maxVelAdv != __rhs.maxVelAdv)
        {
            return false;
        }
        if(maxVelRot != __rhs.maxVelRot)
        {
            return false;
        }
        if(device != __rhs.device)
        {
            return false;
        }
        if(handler != __rhs.handler)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TMechParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(wheelRadius < __rhs.wheelRadius)
        {
            return true;
        }
        else if(__rhs.wheelRadius < wheelRadius)
        {
            return false;
        }
        if(axisLength < __rhs.axisLength)
        {
            return true;
        }
        else if(__rhs.axisLength < axisLength)
        {
            return false;
        }
        if(encoderSteps < __rhs.encoderSteps)
        {
            return true;
        }
        else if(__rhs.encoderSteps < encoderSteps)
        {
            return false;
        }
        if(gearRatio < __rhs.gearRatio)
        {
            return true;
        }
        else if(__rhs.gearRatio < gearRatio)
        {
            return false;
        }
        if(temp < __rhs.temp)
        {
            return true;
        }
        else if(__rhs.temp < temp)
        {
            return false;
        }
        if(maxVelAdv < __rhs.maxVelAdv)
        {
            return true;
        }
        else if(__rhs.maxVelAdv < maxVelAdv)
        {
            return false;
        }
        if(maxVelRot < __rhs.maxVelRot)
        {
            return true;
        }
        else if(__rhs.maxVelRot < maxVelRot)
        {
            return false;
        }
        if(device < __rhs.device)
        {
            return true;
        }
        else if(__rhs.device < device)
        {
            return false;
        }
        if(handler < __rhs.handler)
        {
            return true;
        }
        else if(__rhs.handler < handler)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TMechParams& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TMechParams& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TMechParams& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TMechParams& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompDifferentialRobot::TMechParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 30;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompDifferentialRobot::TMechParams, S>
{
    static void write(S* __os, const ::RoboCompDifferentialRobot::TMechParams& v)
    {
        __os->write(v.wheelRadius);
        __os->write(v.axisLength);
        __os->write(v.encoderSteps);
        __os->write(v.gearRatio);
        __os->write(v.temp);
        __os->write(v.maxVelAdv);
        __os->write(v.maxVelRot);
        __os->write(v.device);
        __os->write(v.handler);
    }
};

template<class S>
struct StreamReader< ::RoboCompDifferentialRobot::TMechParams, S>
{
    static void read(S* __is, ::RoboCompDifferentialRobot::TMechParams& v)
    {
        __is->read(v.wheelRadius);
        __is->read(v.axisLength);
        __is->read(v.encoderSteps);
        __is->read(v.gearRatio);
        __is->read(v.temp);
        __is->read(v.maxVelAdv);
        __is->read(v.maxVelRot);
        __is->read(v.device);
        __is->read(v.handler);
    }
};

}

namespace RoboCompDifferentialRobot
{

class Callback_DifferentialRobot_getBaseState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_getBaseState_Base> Callback_DifferentialRobot_getBaseStatePtr;

class Callback_DifferentialRobot_getBasePose_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_getBasePose_Base> Callback_DifferentialRobot_getBasePosePtr;

class Callback_DifferentialRobot_setSpeedBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_setSpeedBase_Base> Callback_DifferentialRobot_setSpeedBasePtr;

class Callback_DifferentialRobot_stopBase_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_stopBase_Base> Callback_DifferentialRobot_stopBasePtr;

class Callback_DifferentialRobot_resetOdometer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_resetOdometer_Base> Callback_DifferentialRobot_resetOdometerPtr;

class Callback_DifferentialRobot_setOdometer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_setOdometer_Base> Callback_DifferentialRobot_setOdometerPtr;

class Callback_DifferentialRobot_setOdometerPose_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_setOdometerPose_Base> Callback_DifferentialRobot_setOdometerPosePtr;

class Callback_DifferentialRobot_correctOdometer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_correctOdometer_Base> Callback_DifferentialRobot_correctOdometerPtr;

}

namespace IceProxy
{

namespace RoboCompDifferentialRobot
{

class DifferentialRobot : virtual public ::IceProxy::Ice::Object
{
public:

    void getBaseState(::RoboCompGenericBase::TBaseState& __p_state)
    {
        getBaseState(__p_state, 0);
    }
    void getBaseState(::RoboCompGenericBase::TBaseState& __p_state, const ::Ice::Context& __ctx)
    {
        getBaseState(__p_state, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBaseState(const ::IceInternal::Function<void (const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBaseState(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBaseState(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBaseState(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBaseState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBaseState(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBaseState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBaseState(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBaseState(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBaseState()
    {
        return begin_getBaseState(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context& __ctx)
    {
        return begin_getBaseState(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBaseState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBaseState(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_getBaseStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBaseState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context& __ctx, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_getBaseStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBaseState(&__ctx, __del, __cookie);
    }

    void end_getBaseState(::RoboCompGenericBase::TBaseState& __p_state, const ::Ice::AsyncResultPtr&);
    
private:

    void getBaseState(::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getBasePose(::Ice::Int& __p_x, ::Ice::Int& __p_z, ::Ice::Float& __p_alpha)
    {
        getBasePose(__p_x, __p_z, __p_alpha, 0);
    }
    void getBasePose(::Ice::Int& __p_x, ::Ice::Int& __p_z, ::Ice::Float& __p_alpha, const ::Ice::Context& __ctx)
    {
        getBasePose(__p_x, __p_z, __p_alpha, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBasePose(const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int, ::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBasePose(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBasePose(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBasePose(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBasePose(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int, ::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBasePose(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBasePose(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBasePose(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBasePose(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int, ::Ice::Float)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBasePose()
    {
        return begin_getBasePose(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context& __ctx)
    {
        return begin_getBasePose(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBasePose(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBasePose(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_getBasePosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBasePose(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context& __ctx, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_getBasePosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBasePose(&__ctx, __del, __cookie);
    }

    void end_getBasePose(::Ice::Int& __p_x, ::Ice::Int& __p_z, ::Ice::Float& __p_alpha, const ::Ice::AsyncResultPtr&);
    
private:

    void getBasePose(::Ice::Int&, ::Ice::Int&, ::Ice::Float&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot)
    {
        setSpeedBase(__p_adv, __p_rot, 0);
    }
    void setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot, const ::Ice::Context& __ctx)
    {
        setSpeedBase(__p_adv, __p_rot, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSpeedBase(__p_adv, __p_rot, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSpeedBase(__p_adv, __p_rot, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setSpeedBase(__p_adv, __p_rot, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setSpeedBase(__p_adv, __p_rot, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot)
    {
        return begin_setSpeedBase(__p_adv, __p_rot, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot, const ::Ice::Context& __ctx)
    {
        return begin_setSpeedBase(__p_adv, __p_rot, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSpeedBase(__p_adv, __p_rot, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSpeedBase(__p_adv, __p_rot, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_setSpeedBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSpeedBase(__p_adv, __p_rot, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setSpeedBase(::Ice::Float __p_adv, ::Ice::Float __p_rot, const ::Ice::Context& __ctx, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_setSpeedBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setSpeedBase(__p_adv, __p_rot, &__ctx, __del, __cookie);
    }

    void end_setSpeedBase(const ::Ice::AsyncResultPtr&);
    
private:

    void setSpeedBase(::Ice::Float, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setSpeedBase(::Ice::Float, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stopBase()
    {
        stopBase(0);
    }
    void stopBase(const ::Ice::Context& __ctx)
    {
        stopBase(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stopBase(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_stopBase(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_stopBase(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopBase(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_stopBase(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_stopBase(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopBase(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_stopBase(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_stopBase()
    {
        return begin_stopBase(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopBase(const ::Ice::Context& __ctx)
    {
        return begin_stopBase(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopBase(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopBase(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopBase(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopBase(const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_stopBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopBase(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopBase(const ::Ice::Context& __ctx, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_stopBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopBase(&__ctx, __del, __cookie);
    }

    void end_stopBase(const ::Ice::AsyncResultPtr&);
    
private:

    void stopBase(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stopBase(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void resetOdometer()
    {
        resetOdometer(0);
    }
    void resetOdometer(const ::Ice::Context& __ctx)
    {
        resetOdometer(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_resetOdometer(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_resetOdometer(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_resetOdometer(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resetOdometer(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resetOdometer(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_resetOdometer(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_resetOdometer(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resetOdometer(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_resetOdometer(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_resetOdometer()
    {
        return begin_resetOdometer(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetOdometer(const ::Ice::Context& __ctx)
    {
        return begin_resetOdometer(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetOdometer(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetOdometer(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetOdometer(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetOdometer(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetOdometer(const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_resetOdometerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetOdometer(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetOdometer(const ::Ice::Context& __ctx, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_resetOdometerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetOdometer(&__ctx, __del, __cookie);
    }

    void end_resetOdometer(const ::Ice::AsyncResultPtr&);
    
private:

    void resetOdometer(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_resetOdometer(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state)
    {
        setOdometer(__p_state, 0);
    }
    void setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state, const ::Ice::Context& __ctx)
    {
        setOdometer(__p_state, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setOdometer(__p_state, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOdometer(__p_state, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setOdometer(__p_state, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOdometer(__p_state, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state)
    {
        return begin_setOdometer(__p_state, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state, const ::Ice::Context& __ctx)
    {
        return begin_setOdometer(__p_state, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOdometer(__p_state, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOdometer(__p_state, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_setOdometerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOdometer(__p_state, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOdometer(const ::RoboCompGenericBase::TBaseState& __p_state, const ::Ice::Context& __ctx, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_setOdometerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOdometer(__p_state, &__ctx, __del, __cookie);
    }

    void end_setOdometer(const ::Ice::AsyncResultPtr&);
    
private:

    void setOdometer(const ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setOdometer(const ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha)
    {
        setOdometerPose(__p_x, __p_z, __p_alpha, 0);
    }
    void setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context& __ctx)
    {
        setOdometerPose(__p_x, __p_z, __p_alpha, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setOdometerPose(__p_x, __p_z, __p_alpha, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOdometerPose(__p_x, __p_z, __p_alpha, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setOdometerPose(__p_x, __p_z, __p_alpha, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setOdometerPose(__p_x, __p_z, __p_alpha, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha)
    {
        return begin_setOdometerPose(__p_x, __p_z, __p_alpha, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context& __ctx)
    {
        return begin_setOdometerPose(__p_x, __p_z, __p_alpha, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOdometerPose(__p_x, __p_z, __p_alpha, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOdometerPose(__p_x, __p_z, __p_alpha, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_setOdometerPosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOdometerPose(__p_x, __p_z, __p_alpha, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOdometerPose(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context& __ctx, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_setOdometerPosePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOdometerPose(__p_x, __p_z, __p_alpha, &__ctx, __del, __cookie);
    }

    void end_setOdometerPose(const ::Ice::AsyncResultPtr&);
    
private:

    void setOdometerPose(::Ice::Int, ::Ice::Int, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setOdometerPose(::Ice::Int, ::Ice::Int, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha)
    {
        correctOdometer(__p_x, __p_z, __p_alpha, 0);
    }
    void correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context& __ctx)
    {
        correctOdometer(__p_x, __p_z, __p_alpha, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_correctOdometer(__p_x, __p_z, __p_alpha, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_correctOdometer(__p_x, __p_z, __p_alpha, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_correctOdometer(__p_x, __p_z, __p_alpha, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_correctOdometer(__p_x, __p_z, __p_alpha, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha)
    {
        return begin_correctOdometer(__p_x, __p_z, __p_alpha, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context& __ctx)
    {
        return begin_correctOdometer(__p_x, __p_z, __p_alpha, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_correctOdometer(__p_x, __p_z, __p_alpha, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_correctOdometer(__p_x, __p_z, __p_alpha, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_correctOdometerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_correctOdometer(__p_x, __p_z, __p_alpha, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_correctOdometer(::Ice::Int __p_x, ::Ice::Int __p_z, ::Ice::Float __p_alpha, const ::Ice::Context& __ctx, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_correctOdometerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_correctOdometer(__p_x, __p_z, __p_alpha, &__ctx, __del, __cookie);
    }

    void end_correctOdometer(const ::Ice::AsyncResultPtr&);
    
private:

    void correctOdometer(::Ice::Int, ::Ice::Int, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_correctOdometer(::Ice::Int, ::Ice::Int, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_secure(bool __secure) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_twoway() const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_oneway() const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_batchOneway() const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_datagram() const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_batchDatagram() const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_compress(bool __compress) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DifferentialRobot> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DifferentialRobot*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace RoboCompDifferentialRobot
{

class DifferentialRobot : virtual public ::Ice::Object
{
public:

    typedef DifferentialRobotPrx ProxyType;
    typedef DifferentialRobotPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void getBaseState(::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBaseState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getBasePose(::Ice::Int&, ::Ice::Int&, ::Ice::Float&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBasePose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSpeedBase(::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setSpeedBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopBase(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stopBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void resetOdometer(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___resetOdometer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOdometer(const ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setOdometer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOdometerPose(::Ice::Int, ::Ice::Int, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setOdometerPose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void correctOdometer(::Ice::Int, ::Ice::Int, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___correctOdometer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const DifferentialRobot& l, const DifferentialRobot& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DifferentialRobot& l, const DifferentialRobot& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompDifferentialRobot
{

template<class T>
class CallbackNC_DifferentialRobot_getBaseState : public Callback_DifferentialRobot_getBaseState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_DifferentialRobot_getBaseState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        ::RoboCompGenericBase::TBaseState state;
        try
        {
            __proxy->end_getBaseState(state, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(state);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_getBaseStatePtr
newCallback_DifferentialRobot_getBaseState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_getBaseState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_getBaseStatePtr
newCallback_DifferentialRobot_getBaseState(T* instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_getBaseState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_getBaseState : public Callback_DifferentialRobot_getBaseState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_DifferentialRobot_getBaseState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        ::RoboCompGenericBase::TBaseState state;
        try
        {
            __proxy->end_getBaseState(state, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(state, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_getBaseStatePtr
newCallback_DifferentialRobot_getBaseState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_getBaseState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_getBaseStatePtr
newCallback_DifferentialRobot_getBaseState(T* instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_getBaseState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_getBasePose : public Callback_DifferentialRobot_getBasePose_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, ::Ice::Float);

    CallbackNC_DifferentialRobot_getBasePose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int x;
        ::Ice::Int z;
        ::Ice::Float alpha;
        try
        {
            __proxy->end_getBasePose(x, z, alpha, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(x, z, alpha);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_getBasePosePtr
newCallback_DifferentialRobot_getBasePose(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_getBasePose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_getBasePosePtr
newCallback_DifferentialRobot_getBasePose(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_getBasePose<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_getBasePose : public Callback_DifferentialRobot_getBasePose_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, ::Ice::Float, const CT&);

    Callback_DifferentialRobot_getBasePose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int x;
        ::Ice::Int z;
        ::Ice::Float alpha;
        try
        {
            __proxy->end_getBasePose(x, z, alpha, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(x, z, alpha, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_getBasePosePtr
newCallback_DifferentialRobot_getBasePose(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_getBasePose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_getBasePosePtr
newCallback_DifferentialRobot_getBasePose(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_getBasePose<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_setSpeedBase : public Callback_DifferentialRobot_setSpeedBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DifferentialRobot_setSpeedBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setSpeedBase(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setSpeedBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setSpeedBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setSpeedBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setSpeedBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_setSpeedBase : public Callback_DifferentialRobot_setSpeedBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DifferentialRobot_setSpeedBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setSpeedBase(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setSpeedBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setSpeedBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setSpeedBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setSpeedBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_stopBase : public Callback_DifferentialRobot_stopBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DifferentialRobot_stopBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_stopBase(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_stopBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_stopBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_stopBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_stopBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_stopBase : public Callback_DifferentialRobot_stopBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DifferentialRobot_stopBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_stopBase(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_stopBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_stopBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_stopBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_stopBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_resetOdometer : public Callback_DifferentialRobot_resetOdometer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DifferentialRobot_resetOdometer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_resetOdometer(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_resetOdometer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_resetOdometer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_resetOdometer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_resetOdometer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_resetOdometer : public Callback_DifferentialRobot_resetOdometer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DifferentialRobot_resetOdometer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_resetOdometer(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_resetOdometer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_resetOdometer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_resetOdometer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_resetOdometer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_setOdometer : public Callback_DifferentialRobot_setOdometer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DifferentialRobot_setOdometer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setOdometer(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_setOdometer : public Callback_DifferentialRobot_setOdometer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DifferentialRobot_setOdometer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setOdometer(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_setOdometerPose : public Callback_DifferentialRobot_setOdometerPose_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DifferentialRobot_setOdometerPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setOdometerPose(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometerPose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometerPose<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometerPose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometerPose<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_setOdometerPose : public Callback_DifferentialRobot_setOdometerPose_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DifferentialRobot_setOdometerPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setOdometerPose(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometerPose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometerPose<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometerPose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometerPose<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_correctOdometer : public Callback_DifferentialRobot_correctOdometer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DifferentialRobot_correctOdometer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_correctOdometer(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_correctOdometer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_correctOdometer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_correctOdometer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_correctOdometer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_correctOdometer : public Callback_DifferentialRobot_correctOdometer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DifferentialRobot_correctOdometer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx __proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_correctOdometer(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_correctOdometer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_correctOdometer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_correctOdometer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_correctOdometer<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
