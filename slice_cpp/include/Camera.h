// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `Camera.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ___home_ironman_gazebo_robocomp_slice____slice_cpp__Camera_h__
#define ___home_ironman_gazebo_robocomp_slice____slice_cpp__Camera_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <CommonHead.h>
#include <GenericBase.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompCamera
{

class Camera;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCamera::Camera>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompCamera::Camera*);

}

}

namespace RoboCompCamera
{

class Camera;
::Ice::Object* upCast(::RoboCompCamera::Camera*);
typedef ::IceInternal::Handle< ::RoboCompCamera::Camera> CameraPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCamera::Camera> CameraPrx;
void __patch(CameraPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompCamera
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    explicit HardwareFailedException(const ::std::string&);
    virtual ~HardwareFailedException() throw();

    virtual ::std::string ice_name() const;
    virtual HardwareFailedException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

static HardwareFailedException __HardwareFailedException_init;

class MovingImageException : public ::Ice::UserException
{
public:

    MovingImageException() {}
    explicit MovingImageException(const ::std::string&);
    virtual ~MovingImageException() throw();

    virtual ::std::string ice_name() const;
    virtual MovingImageException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

typedef ::std::vector< ::Ice::Byte> imgType;

typedef ::std::vector< ::Ice::Int> intVector;

struct TCamParams
{
    ::Ice::Int focal;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Int size;
    ::Ice::Int numCams;
    ::Ice::Int FPS;
    ::Ice::Int timerPeriod;
    ::Ice::Int leftCamera;
    ::Ice::Int rightCamera;
    ::Ice::Int bothCameras;
    ::Ice::Int inverted;
    ::Ice::Int rotated;
    ::Ice::Int leftInverted;
    ::Ice::Int rightInverted;
    ::Ice::Int saturation;
    ::Ice::Int lineFreq;
    bool talkToBase;
    bool talkToJointMotor;
    ::std::string name;
    ::std::string driver;
    ::std::string device;
    ::std::string mode;

    bool operator==(const TCamParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(focal != __rhs.focal)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        if(height != __rhs.height)
        {
            return false;
        }
        if(size != __rhs.size)
        {
            return false;
        }
        if(numCams != __rhs.numCams)
        {
            return false;
        }
        if(FPS != __rhs.FPS)
        {
            return false;
        }
        if(timerPeriod != __rhs.timerPeriod)
        {
            return false;
        }
        if(leftCamera != __rhs.leftCamera)
        {
            return false;
        }
        if(rightCamera != __rhs.rightCamera)
        {
            return false;
        }
        if(bothCameras != __rhs.bothCameras)
        {
            return false;
        }
        if(inverted != __rhs.inverted)
        {
            return false;
        }
        if(rotated != __rhs.rotated)
        {
            return false;
        }
        if(leftInverted != __rhs.leftInverted)
        {
            return false;
        }
        if(rightInverted != __rhs.rightInverted)
        {
            return false;
        }
        if(saturation != __rhs.saturation)
        {
            return false;
        }
        if(lineFreq != __rhs.lineFreq)
        {
            return false;
        }
        if(talkToBase != __rhs.talkToBase)
        {
            return false;
        }
        if(talkToJointMotor != __rhs.talkToJointMotor)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(driver != __rhs.driver)
        {
            return false;
        }
        if(device != __rhs.device)
        {
            return false;
        }
        if(mode != __rhs.mode)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TCamParams& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(focal < __rhs.focal)
        {
            return true;
        }
        else if(__rhs.focal < focal)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        if(height < __rhs.height)
        {
            return true;
        }
        else if(__rhs.height < height)
        {
            return false;
        }
        if(size < __rhs.size)
        {
            return true;
        }
        else if(__rhs.size < size)
        {
            return false;
        }
        if(numCams < __rhs.numCams)
        {
            return true;
        }
        else if(__rhs.numCams < numCams)
        {
            return false;
        }
        if(FPS < __rhs.FPS)
        {
            return true;
        }
        else if(__rhs.FPS < FPS)
        {
            return false;
        }
        if(timerPeriod < __rhs.timerPeriod)
        {
            return true;
        }
        else if(__rhs.timerPeriod < timerPeriod)
        {
            return false;
        }
        if(leftCamera < __rhs.leftCamera)
        {
            return true;
        }
        else if(__rhs.leftCamera < leftCamera)
        {
            return false;
        }
        if(rightCamera < __rhs.rightCamera)
        {
            return true;
        }
        else if(__rhs.rightCamera < rightCamera)
        {
            return false;
        }
        if(bothCameras < __rhs.bothCameras)
        {
            return true;
        }
        else if(__rhs.bothCameras < bothCameras)
        {
            return false;
        }
        if(inverted < __rhs.inverted)
        {
            return true;
        }
        else if(__rhs.inverted < inverted)
        {
            return false;
        }
        if(rotated < __rhs.rotated)
        {
            return true;
        }
        else if(__rhs.rotated < rotated)
        {
            return false;
        }
        if(leftInverted < __rhs.leftInverted)
        {
            return true;
        }
        else if(__rhs.leftInverted < leftInverted)
        {
            return false;
        }
        if(rightInverted < __rhs.rightInverted)
        {
            return true;
        }
        else if(__rhs.rightInverted < rightInverted)
        {
            return false;
        }
        if(saturation < __rhs.saturation)
        {
            return true;
        }
        else if(__rhs.saturation < saturation)
        {
            return false;
        }
        if(lineFreq < __rhs.lineFreq)
        {
            return true;
        }
        else if(__rhs.lineFreq < lineFreq)
        {
            return false;
        }
        if(talkToBase < __rhs.talkToBase)
        {
            return true;
        }
        else if(__rhs.talkToBase < talkToBase)
        {
            return false;
        }
        if(talkToJointMotor < __rhs.talkToJointMotor)
        {
            return true;
        }
        else if(__rhs.talkToJointMotor < talkToJointMotor)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(driver < __rhs.driver)
        {
            return true;
        }
        else if(__rhs.driver < driver)
        {
            return false;
        }
        if(device < __rhs.device)
        {
            return true;
        }
        else if(__rhs.device < device)
        {
            return false;
        }
        if(mode < __rhs.mode)
        {
            return true;
        }
        else if(__rhs.mode < mode)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TCamParams& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TCamParams& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TCamParams& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TCamParams& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompCamera::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompCamera::MovingImageException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompCamera::TCamParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 70;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompCamera::TCamParams, S>
{
    static void write(S* __os, const ::RoboCompCamera::TCamParams& v)
    {
        __os->write(v.focal);
        __os->write(v.width);
        __os->write(v.height);
        __os->write(v.size);
        __os->write(v.numCams);
        __os->write(v.FPS);
        __os->write(v.timerPeriod);
        __os->write(v.leftCamera);
        __os->write(v.rightCamera);
        __os->write(v.bothCameras);
        __os->write(v.inverted);
        __os->write(v.rotated);
        __os->write(v.leftInverted);
        __os->write(v.rightInverted);
        __os->write(v.saturation);
        __os->write(v.lineFreq);
        __os->write(v.talkToBase);
        __os->write(v.talkToJointMotor);
        __os->write(v.name);
        __os->write(v.driver);
        __os->write(v.device);
        __os->write(v.mode);
    }
};

template<class S>
struct StreamReader< ::RoboCompCamera::TCamParams, S>
{
    static void read(S* __is, ::RoboCompCamera::TCamParams& v)
    {
        __is->read(v.focal);
        __is->read(v.width);
        __is->read(v.height);
        __is->read(v.size);
        __is->read(v.numCams);
        __is->read(v.FPS);
        __is->read(v.timerPeriod);
        __is->read(v.leftCamera);
        __is->read(v.rightCamera);
        __is->read(v.bothCameras);
        __is->read(v.inverted);
        __is->read(v.rotated);
        __is->read(v.leftInverted);
        __is->read(v.rightInverted);
        __is->read(v.saturation);
        __is->read(v.lineFreq);
        __is->read(v.talkToBase);
        __is->read(v.talkToJointMotor);
        __is->read(v.name);
        __is->read(v.driver);
        __is->read(v.device);
        __is->read(v.mode);
    }
};

}

namespace RoboCompCamera
{

class Callback_Camera_getYUVImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getYUVImage_Base> Callback_Camera_getYUVImagePtr;

class Callback_Camera_getYImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getYImage_Base> Callback_Camera_getYImagePtr;

class Callback_Camera_getYLogPolarImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getYLogPolarImage_Base> Callback_Camera_getYLogPolarImagePtr;

class Callback_Camera_getYImageCR_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getYImageCR_Base> Callback_Camera_getYImageCRPtr;

class Callback_Camera_getRGBPackedImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getRGBPackedImage_Base> Callback_Camera_getRGBPackedImagePtr;

class Callback_Camera_getYRGBImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getYRGBImage_Base> Callback_Camera_getYRGBImagePtr;

class Callback_Camera_getCamParams_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getCamParams_Base> Callback_Camera_getCamParamsPtr;

class Callback_Camera_setInnerImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_setInnerImage_Base> Callback_Camera_setInnerImagePtr;

}

namespace IceProxy
{

namespace RoboCompCamera
{

class Camera : virtual public ::IceProxy::Ice::Object
{
public:

    void getYUVImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState)
    {
        getYUVImage(__p_cam, __p_roi, __p_hState, __p_bState, 0);
    }
    void getYUVImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context& __ctx)
    {
        getYUVImage(__p_cam, __p_roi, __p_hState, __p_bState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getYUVImage(::Ice::Int __p_cam, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getYUVImage(__p_cam, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getYUVImage(::Ice::Int __p_cam, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getYUVImage(__p_cam, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getYUVImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getYUVImage(__p_cam, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getYUVImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getYUVImage(__p_cam, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getYUVImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getYUVImage(::Ice::Int __p_cam)
    {
        return begin_getYUVImage(__p_cam, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYUVImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx)
    {
        return begin_getYUVImage(__p_cam, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYUVImage(::Ice::Int __p_cam, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYUVImage(__p_cam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYUVImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYUVImage(__p_cam, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYUVImage(::Ice::Int __p_cam, const ::RoboCompCamera::Callback_Camera_getYUVImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYUVImage(__p_cam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYUVImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::RoboCompCamera::Callback_Camera_getYUVImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYUVImage(__p_cam, &__ctx, __del, __cookie);
    }

    void end_getYUVImage(::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr&);
    
private:

    void getYUVImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getYUVImage(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getYImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState)
    {
        getYImage(__p_cam, __p_roi, __p_hState, __p_bState, 0);
    }
    void getYImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context& __ctx)
    {
        getYImage(__p_cam, __p_roi, __p_hState, __p_bState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getYImage(::Ice::Int __p_cam, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getYImage(__p_cam, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getYImage(::Ice::Int __p_cam, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getYImage(__p_cam, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getYImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getYImage(__p_cam, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getYImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getYImage(__p_cam, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getYImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getYImage(::Ice::Int __p_cam)
    {
        return begin_getYImage(__p_cam, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx)
    {
        return begin_getYImage(__p_cam, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYImage(::Ice::Int __p_cam, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYImage(__p_cam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYImage(__p_cam, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYImage(::Ice::Int __p_cam, const ::RoboCompCamera::Callback_Camera_getYImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYImage(__p_cam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::RoboCompCamera::Callback_Camera_getYImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYImage(__p_cam, &__ctx, __del, __cookie);
    }

    void end_getYImage(::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr&);
    
private:

    void getYImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getYImage(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getYLogPolarImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState)
    {
        getYLogPolarImage(__p_cam, __p_roi, __p_hState, __p_bState, 0);
    }
    void getYLogPolarImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context& __ctx)
    {
        getYLogPolarImage(__p_cam, __p_roi, __p_hState, __p_bState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getYLogPolarImage(::Ice::Int __p_cam, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getYLogPolarImage(__p_cam, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getYLogPolarImage(::Ice::Int __p_cam, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getYLogPolarImage(__p_cam, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getYLogPolarImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getYLogPolarImage(__p_cam, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getYLogPolarImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getYLogPolarImage(__p_cam, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getYLogPolarImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getYLogPolarImage(::Ice::Int __p_cam)
    {
        return begin_getYLogPolarImage(__p_cam, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYLogPolarImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx)
    {
        return begin_getYLogPolarImage(__p_cam, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYLogPolarImage(::Ice::Int __p_cam, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYLogPolarImage(__p_cam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYLogPolarImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYLogPolarImage(__p_cam, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYLogPolarImage(::Ice::Int __p_cam, const ::RoboCompCamera::Callback_Camera_getYLogPolarImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYLogPolarImage(__p_cam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYLogPolarImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::RoboCompCamera::Callback_Camera_getYLogPolarImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYLogPolarImage(__p_cam, &__ctx, __del, __cookie);
    }

    void end_getYLogPolarImage(::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr&);
    
private:

    void getYLogPolarImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getYLogPolarImage(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState)
    {
        getYImageCR(__p_cam, __p_div, __p_roi, __p_hState, __p_bState, 0);
    }
    void getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context& __ctx)
    {
        getYImageCR(__p_cam, __p_div, __p_roi, __p_hState, __p_bState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getYImageCR(__p_cam, __p_div, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getYImageCR(__p_cam, __p_div, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getYImageCR(__p_cam, __p_div, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getYImageCR(__p_cam, __p_div, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div)
    {
        return begin_getYImageCR(__p_cam, __p_div, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, const ::Ice::Context& __ctx)
    {
        return begin_getYImageCR(__p_cam, __p_div, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYImageCR(__p_cam, __p_div, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYImageCR(__p_cam, __p_div, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, const ::RoboCompCamera::Callback_Camera_getYImageCRPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYImageCR(__p_cam, __p_div, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYImageCR(::Ice::Int __p_cam, ::Ice::Int __p_div, const ::Ice::Context& __ctx, const ::RoboCompCamera::Callback_Camera_getYImageCRPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYImageCR(__p_cam, __p_div, &__ctx, __del, __cookie);
    }

    void end_getYImageCR(::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr&);
    
private:

    void getYImageCR(::Ice::Int, ::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getYImageCR(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getRGBPackedImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState)
    {
        getRGBPackedImage(__p_cam, __p_roi, __p_hState, __p_bState, 0);
    }
    void getRGBPackedImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context& __ctx)
    {
        getRGBPackedImage(__p_cam, __p_roi, __p_hState, __p_bState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRGBPackedImage(::Ice::Int __p_cam, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRGBPackedImage(__p_cam, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRGBPackedImage(::Ice::Int __p_cam, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRGBPackedImage(__p_cam, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRGBPackedImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRGBPackedImage(__p_cam, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRGBPackedImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRGBPackedImage(__p_cam, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRGBPackedImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRGBPackedImage(::Ice::Int __p_cam)
    {
        return begin_getRGBPackedImage(__p_cam, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRGBPackedImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx)
    {
        return begin_getRGBPackedImage(__p_cam, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRGBPackedImage(::Ice::Int __p_cam, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGBPackedImage(__p_cam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBPackedImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGBPackedImage(__p_cam, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBPackedImage(::Ice::Int __p_cam, const ::RoboCompCamera::Callback_Camera_getRGBPackedImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGBPackedImage(__p_cam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBPackedImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::RoboCompCamera::Callback_Camera_getRGBPackedImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRGBPackedImage(__p_cam, &__ctx, __del, __cookie);
    }

    void end_getRGBPackedImage(::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr&);
    
private:

    void getRGBPackedImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRGBPackedImage(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getYRGBImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState)
    {
        getYRGBImage(__p_cam, __p_roi, __p_hState, __p_bState, 0);
    }
    void getYRGBImage(::Ice::Int __p_cam, ::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::Context& __ctx)
    {
        getYRGBImage(__p_cam, __p_roi, __p_hState, __p_bState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getYRGBImage(::Ice::Int __p_cam, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getYRGBImage(__p_cam, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getYRGBImage(::Ice::Int __p_cam, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getYRGBImage(__p_cam, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getYRGBImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getYRGBImage(__p_cam, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getYRGBImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getYRGBImage(__p_cam, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getYRGBImage(::Ice::Int __p_cam, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getYRGBImage(::Ice::Int __p_cam)
    {
        return begin_getYRGBImage(__p_cam, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYRGBImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx)
    {
        return begin_getYRGBImage(__p_cam, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYRGBImage(::Ice::Int __p_cam, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYRGBImage(__p_cam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYRGBImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYRGBImage(__p_cam, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYRGBImage(::Ice::Int __p_cam, const ::RoboCompCamera::Callback_Camera_getYRGBImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYRGBImage(__p_cam, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYRGBImage(::Ice::Int __p_cam, const ::Ice::Context& __ctx, const ::RoboCompCamera::Callback_Camera_getYRGBImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYRGBImage(__p_cam, &__ctx, __del, __cookie);
    }

    void end_getYRGBImage(::RoboCompCamera::imgType& __p_roi, ::RoboCompCommonHead::THeadState& __p_hState, ::RoboCompGenericBase::TBaseState& __p_bState, const ::Ice::AsyncResultPtr&);
    
private:

    void getYRGBImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getYRGBImage(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompCamera::TCamParams getCamParams()
    {
        return getCamParams(0);
    }
    ::RoboCompCamera::TCamParams getCamParams(const ::Ice::Context& __ctx)
    {
        return getCamParams(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCamParams(const ::IceInternal::Function<void (const ::RoboCompCamera::TCamParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCamParams(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCamParams(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCamParams(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCamParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::TCamParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCamParams(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCamParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCamParams(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCamParams(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCamera::TCamParams&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCamParams()
    {
        return begin_getCamParams(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCamParams(const ::Ice::Context& __ctx)
    {
        return begin_getCamParams(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCamParams(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCamParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCamParams(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCamParams(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCamParams(const ::RoboCompCamera::Callback_Camera_getCamParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCamParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCamParams(const ::Ice::Context& __ctx, const ::RoboCompCamera::Callback_Camera_getCamParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCamParams(&__ctx, __del, __cookie);
    }

    ::RoboCompCamera::TCamParams end_getCamParams(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompCamera::TCamParams getCamParams(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCamParams(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setInnerImage(const ::RoboCompCamera::imgType& __p_roi)
    {
        setInnerImage(__p_roi, 0);
    }
    void setInnerImage(const ::RoboCompCamera::imgType& __p_roi, const ::Ice::Context& __ctx)
    {
        setInnerImage(__p_roi, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setInnerImage(const ::RoboCompCamera::imgType& __p_roi, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInnerImage(__p_roi, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setInnerImage(const ::RoboCompCamera::imgType& __p_roi, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInnerImage(__p_roi, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInnerImage(const ::RoboCompCamera::imgType& __p_roi, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setInnerImage(__p_roi, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setInnerImage(const ::RoboCompCamera::imgType& __p_roi, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setInnerImage(__p_roi, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setInnerImage(const ::RoboCompCamera::imgType& __p_roi)
    {
        return begin_setInnerImage(__p_roi, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInnerImage(const ::RoboCompCamera::imgType& __p_roi, const ::Ice::Context& __ctx)
    {
        return begin_setInnerImage(__p_roi, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInnerImage(const ::RoboCompCamera::imgType& __p_roi, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInnerImage(__p_roi, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInnerImage(const ::RoboCompCamera::imgType& __p_roi, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInnerImage(__p_roi, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInnerImage(const ::RoboCompCamera::imgType& __p_roi, const ::RoboCompCamera::Callback_Camera_setInnerImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInnerImage(__p_roi, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setInnerImage(const ::RoboCompCamera::imgType& __p_roi, const ::Ice::Context& __ctx, const ::RoboCompCamera::Callback_Camera_setInnerImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setInnerImage(__p_roi, &__ctx, __del, __cookie);
    }

    void end_setInnerImage(const ::Ice::AsyncResultPtr&);
    
private:

    void setInnerImage(const ::RoboCompCamera::imgType&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setInnerImage(const ::RoboCompCamera::imgType&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Camera> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_secure(bool __secure) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_twoway() const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_oneway() const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_batchOneway() const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_datagram() const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_batchDatagram() const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_compress(bool __compress) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace RoboCompCamera
{

class Camera : virtual public ::Ice::Object
{
public:

    typedef CameraPrx ProxyType;
    typedef CameraPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void getYUVImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getYUVImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getYImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getYImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getYLogPolarImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getYLogPolarImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getYImageCR(::Ice::Int, ::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getYImageCR(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getRGBPackedImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRGBPackedImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getYRGBImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getYRGBImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompCamera::TCamParams getCamParams(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCamParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setInnerImage(const ::RoboCompCamera::imgType&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setInnerImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Camera& l, const Camera& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Camera& l, const Camera& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompCamera
{

template<class T>
class CallbackNC_Camera_getYUVImage : public Callback_Camera_getYUVImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Camera_getYUVImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getYUVImage(roi, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(roi, hState, bState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Camera_getYUVImagePtr
newCallback_Camera_getYUVImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYUVImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getYUVImagePtr
newCallback_Camera_getYUVImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYUVImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getYUVImage : public Callback_Camera_getYUVImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Camera_getYUVImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getYUVImage(roi, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(roi, hState, bState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getYUVImagePtr
newCallback_Camera_getYUVImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYUVImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getYUVImagePtr
newCallback_Camera_getYUVImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYUVImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_getYImage : public Callback_Camera_getYImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Camera_getYImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getYImage(roi, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(roi, hState, bState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Camera_getYImagePtr
newCallback_Camera_getYImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getYImagePtr
newCallback_Camera_getYImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getYImage : public Callback_Camera_getYImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Camera_getYImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getYImage(roi, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(roi, hState, bState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getYImagePtr
newCallback_Camera_getYImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getYImagePtr
newCallback_Camera_getYImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_getYLogPolarImage : public Callback_Camera_getYLogPolarImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Camera_getYLogPolarImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getYLogPolarImage(roi, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(roi, hState, bState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Camera_getYLogPolarImagePtr
newCallback_Camera_getYLogPolarImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYLogPolarImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getYLogPolarImagePtr
newCallback_Camera_getYLogPolarImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYLogPolarImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getYLogPolarImage : public Callback_Camera_getYLogPolarImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Camera_getYLogPolarImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getYLogPolarImage(roi, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(roi, hState, bState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getYLogPolarImagePtr
newCallback_Camera_getYLogPolarImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYLogPolarImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getYLogPolarImagePtr
newCallback_Camera_getYLogPolarImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYLogPolarImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_getYImageCR : public Callback_Camera_getYImageCR_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Camera_getYImageCR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getYImageCR(roi, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(roi, hState, bState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Camera_getYImageCRPtr
newCallback_Camera_getYImageCR(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYImageCR<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getYImageCRPtr
newCallback_Camera_getYImageCR(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYImageCR<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getYImageCR : public Callback_Camera_getYImageCR_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Camera_getYImageCR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getYImageCR(roi, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(roi, hState, bState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getYImageCRPtr
newCallback_Camera_getYImageCR(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYImageCR<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getYImageCRPtr
newCallback_Camera_getYImageCR(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYImageCR<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_getRGBPackedImage : public Callback_Camera_getRGBPackedImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Camera_getRGBPackedImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getRGBPackedImage(roi, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(roi, hState, bState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Camera_getRGBPackedImagePtr
newCallback_Camera_getRGBPackedImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getRGBPackedImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getRGBPackedImagePtr
newCallback_Camera_getRGBPackedImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getRGBPackedImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getRGBPackedImage : public Callback_Camera_getRGBPackedImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Camera_getRGBPackedImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getRGBPackedImage(roi, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(roi, hState, bState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getRGBPackedImagePtr
newCallback_Camera_getRGBPackedImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getRGBPackedImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getRGBPackedImagePtr
newCallback_Camera_getRGBPackedImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getRGBPackedImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_getYRGBImage : public Callback_Camera_getYRGBImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Camera_getYRGBImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getYRGBImage(roi, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(roi, hState, bState);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Camera_getYRGBImagePtr
newCallback_Camera_getYRGBImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYRGBImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getYRGBImagePtr
newCallback_Camera_getYRGBImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYRGBImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getYRGBImage : public Callback_Camera_getYRGBImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Camera_getYRGBImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
        try
        {
            __proxy->end_getYRGBImage(roi, hState, bState, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(roi, hState, bState, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getYRGBImagePtr
newCallback_Camera_getYRGBImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYRGBImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getYRGBImagePtr
newCallback_Camera_getYRGBImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYRGBImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_getCamParams : public Callback_Camera_getCamParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::TCamParams&);

    CallbackNC_Camera_getCamParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::TCamParams __ret;
        try
        {
            __ret = __proxy->end_getCamParams(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Camera_getCamParamsPtr
newCallback_Camera_getCamParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::TCamParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getCamParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getCamParamsPtr
newCallback_Camera_getCamParams(T* instance, void (T::*cb)(const ::RoboCompCamera::TCamParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getCamParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getCamParams : public Callback_Camera_getCamParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::TCamParams&, const CT&);

    Callback_Camera_getCamParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompCamera::CameraPrx __proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(__result->getProxy());
        ::RoboCompCamera::TCamParams __ret;
        try
        {
            __ret = __proxy->end_getCamParams(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getCamParamsPtr
newCallback_Camera_getCamParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::TCamParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getCamParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getCamParamsPtr
newCallback_Camera_getCamParams(T* instance, void (T::*cb)(const ::RoboCompCamera::TCamParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getCamParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_setInnerImage : public Callback_Camera_setInnerImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Camera_setInnerImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_setInnerImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_setInnerImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_setInnerImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_setInnerImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_setInnerImage : public Callback_Camera_setInnerImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Camera_setInnerImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_setInnerImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_setInnerImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_setInnerImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_setInnerImage<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
